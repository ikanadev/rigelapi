// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/year"
)

// Year is the model entity for the Year schema.
type Year struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the YearQuery when eager-loading is set.
	Edges YearEdges `json:"edges"`
}

// YearEdges holds the relations/edges for other nodes in the graph.
type YearEdges struct {
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// Periods holds the value of the periods edge.
	Periods []*Period `json:"periods,omitempty"`
	// Areas holds the value of the areas edge.
	Areas []*Area `json:"areas,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e YearEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// PeriodsOrErr returns the Periods value or an error if the edge
// was not loaded in eager-loading.
func (e YearEdges) PeriodsOrErr() ([]*Period, error) {
	if e.loadedTypes[1] {
		return e.Periods, nil
	}
	return nil, &NotLoadedError{edge: "periods"}
}

// AreasOrErr returns the Areas value or an error if the edge
// was not loaded in eager-loading.
func (e YearEdges) AreasOrErr() ([]*Area, error) {
	if e.loadedTypes[2] {
		return e.Areas, nil
	}
	return nil, &NotLoadedError{edge: "areas"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e YearEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[3] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Year) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case year.FieldValue:
			values[i] = new(sql.NullInt64)
		case year.FieldID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Year", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Year fields.
func (y *Year) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case year.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				y.ID = value.String
			}
		case year.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				y.Value = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryClasses queries the "classes" edge of the Year entity.
func (y *Year) QueryClasses() *ClassQuery {
	return (&YearClient{config: y.config}).QueryClasses(y)
}

// QueryPeriods queries the "periods" edge of the Year entity.
func (y *Year) QueryPeriods() *PeriodQuery {
	return (&YearClient{config: y.config}).QueryPeriods(y)
}

// QueryAreas queries the "areas" edge of the Year entity.
func (y *Year) QueryAreas() *AreaQuery {
	return (&YearClient{config: y.config}).QueryAreas(y)
}

// QuerySubscriptions queries the "subscriptions" edge of the Year entity.
func (y *Year) QuerySubscriptions() *SubscriptionQuery {
	return (&YearClient{config: y.config}).QuerySubscriptions(y)
}

// Update returns a builder for updating this Year.
// Note that you need to call Year.Unwrap() before calling this method if this Year
// was returned from a transaction, and the transaction was committed or rolled back.
func (y *Year) Update() *YearUpdateOne {
	return (&YearClient{config: y.config}).UpdateOne(y)
}

// Unwrap unwraps the Year entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (y *Year) Unwrap() *Year {
	_tx, ok := y.config.driver.(*txDriver)
	if !ok {
		panic("ent: Year is not a transactional entity")
	}
	y.config.driver = _tx.drv
	return y
}

// String implements the fmt.Stringer.
func (y *Year) String() string {
	var builder strings.Builder
	builder.WriteString("Year(")
	builder.WriteString(fmt.Sprintf("id=%v, ", y.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", y.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Years is a parsable slice of Year.
type Years []*Year

func (y Years) config(cfg config) {
	for _i := range y {
		y[_i].config = cfg
	}
}
