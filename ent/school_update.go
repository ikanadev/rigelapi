// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/municipio"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/school"
)

// SchoolUpdate is the builder for updating School entities.
type SchoolUpdate struct {
	config
	hooks    []Hook
	mutation *SchoolMutation
}

// Where appends a list predicates to the SchoolUpdate builder.
func (su *SchoolUpdate) Where(ps ...predicate.School) *SchoolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SchoolUpdate) SetName(s string) *SchoolUpdate {
	su.mutation.SetName(s)
	return su
}

// SetLat sets the "lat" field.
func (su *SchoolUpdate) SetLat(s string) *SchoolUpdate {
	su.mutation.SetLat(s)
	return su
}

// SetLon sets the "lon" field.
func (su *SchoolUpdate) SetLon(s string) *SchoolUpdate {
	su.mutation.SetLon(s)
	return su
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (su *SchoolUpdate) AddClassIDs(ids ...string) *SchoolUpdate {
	su.mutation.AddClassIDs(ids...)
	return su
}

// AddClasses adds the "classes" edges to the Class entity.
func (su *SchoolUpdate) AddClasses(c ...*Class) *SchoolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddClassIDs(ids...)
}

// SetMunicipioID sets the "municipio" edge to the Municipio entity by ID.
func (su *SchoolUpdate) SetMunicipioID(id string) *SchoolUpdate {
	su.mutation.SetMunicipioID(id)
	return su
}

// SetNillableMunicipioID sets the "municipio" edge to the Municipio entity by ID if the given value is not nil.
func (su *SchoolUpdate) SetNillableMunicipioID(id *string) *SchoolUpdate {
	if id != nil {
		su = su.SetMunicipioID(*id)
	}
	return su
}

// SetMunicipio sets the "municipio" edge to the Municipio entity.
func (su *SchoolUpdate) SetMunicipio(m *Municipio) *SchoolUpdate {
	return su.SetMunicipioID(m.ID)
}

// Mutation returns the SchoolMutation object of the builder.
func (su *SchoolUpdate) Mutation() *SchoolMutation {
	return su.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (su *SchoolUpdate) ClearClasses() *SchoolUpdate {
	su.mutation.ClearClasses()
	return su
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (su *SchoolUpdate) RemoveClassIDs(ids ...string) *SchoolUpdate {
	su.mutation.RemoveClassIDs(ids...)
	return su
}

// RemoveClasses removes "classes" edges to Class entities.
func (su *SchoolUpdate) RemoveClasses(c ...*Class) *SchoolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveClassIDs(ids...)
}

// ClearMunicipio clears the "municipio" edge to the Municipio entity.
func (su *SchoolUpdate) ClearMunicipio() *SchoolUpdate {
	su.mutation.ClearMunicipio()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SchoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SchoolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SchoolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SchoolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SchoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(school.Table, school.Columns, sqlgraph.NewFieldSpec(school.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(school.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.SetField(school.FieldLat, field.TypeString, value)
	}
	if value, ok := su.mutation.Lon(); ok {
		_spec.SetField(school.FieldLon, field.TypeString, value)
	}
	if su.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedClassesIDs(); len(nodes) > 0 && !su.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MunicipioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   school.MunicipioTable,
			Columns: []string{school.MunicipioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(municipio.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MunicipioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   school.MunicipioTable,
			Columns: []string{school.MunicipioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(municipio.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SchoolUpdateOne is the builder for updating a single School entity.
type SchoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SchoolMutation
}

// SetName sets the "name" field.
func (suo *SchoolUpdateOne) SetName(s string) *SchoolUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetLat sets the "lat" field.
func (suo *SchoolUpdateOne) SetLat(s string) *SchoolUpdateOne {
	suo.mutation.SetLat(s)
	return suo
}

// SetLon sets the "lon" field.
func (suo *SchoolUpdateOne) SetLon(s string) *SchoolUpdateOne {
	suo.mutation.SetLon(s)
	return suo
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (suo *SchoolUpdateOne) AddClassIDs(ids ...string) *SchoolUpdateOne {
	suo.mutation.AddClassIDs(ids...)
	return suo
}

// AddClasses adds the "classes" edges to the Class entity.
func (suo *SchoolUpdateOne) AddClasses(c ...*Class) *SchoolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddClassIDs(ids...)
}

// SetMunicipioID sets the "municipio" edge to the Municipio entity by ID.
func (suo *SchoolUpdateOne) SetMunicipioID(id string) *SchoolUpdateOne {
	suo.mutation.SetMunicipioID(id)
	return suo
}

// SetNillableMunicipioID sets the "municipio" edge to the Municipio entity by ID if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableMunicipioID(id *string) *SchoolUpdateOne {
	if id != nil {
		suo = suo.SetMunicipioID(*id)
	}
	return suo
}

// SetMunicipio sets the "municipio" edge to the Municipio entity.
func (suo *SchoolUpdateOne) SetMunicipio(m *Municipio) *SchoolUpdateOne {
	return suo.SetMunicipioID(m.ID)
}

// Mutation returns the SchoolMutation object of the builder.
func (suo *SchoolUpdateOne) Mutation() *SchoolMutation {
	return suo.mutation
}

// ClearClasses clears all "classes" edges to the Class entity.
func (suo *SchoolUpdateOne) ClearClasses() *SchoolUpdateOne {
	suo.mutation.ClearClasses()
	return suo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (suo *SchoolUpdateOne) RemoveClassIDs(ids ...string) *SchoolUpdateOne {
	suo.mutation.RemoveClassIDs(ids...)
	return suo
}

// RemoveClasses removes "classes" edges to Class entities.
func (suo *SchoolUpdateOne) RemoveClasses(c ...*Class) *SchoolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveClassIDs(ids...)
}

// ClearMunicipio clears the "municipio" edge to the Municipio entity.
func (suo *SchoolUpdateOne) ClearMunicipio() *SchoolUpdateOne {
	suo.mutation.ClearMunicipio()
	return suo
}

// Where appends a list predicates to the SchoolUpdate builder.
func (suo *SchoolUpdateOne) Where(ps ...predicate.School) *SchoolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SchoolUpdateOne) Select(field string, fields ...string) *SchoolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated School entity.
func (suo *SchoolUpdateOne) Save(ctx context.Context) (*School, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SchoolUpdateOne) SaveX(ctx context.Context) *School {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SchoolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SchoolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SchoolUpdateOne) sqlSave(ctx context.Context) (_node *School, err error) {
	_spec := sqlgraph.NewUpdateSpec(school.Table, school.Columns, sqlgraph.NewFieldSpec(school.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "School.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, school.FieldID)
		for _, f := range fields {
			if !school.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != school.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(school.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.SetField(school.FieldLat, field.TypeString, value)
	}
	if value, ok := suo.mutation.Lon(); ok {
		_spec.SetField(school.FieldLon, field.TypeString, value)
	}
	if suo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !suo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   school.ClassesTable,
			Columns: []string{school.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MunicipioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   school.MunicipioTable,
			Columns: []string{school.MunicipioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(municipio.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MunicipioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   school.MunicipioTable,
			Columns: []string{school.MunicipioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(municipio.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &School{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
