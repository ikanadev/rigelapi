// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/municipio"
	"github.com/vmkevv/rigelapi/ent/school"
)

// School is the model entity for the School schema.
type School struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat string `json:"lat,omitempty"`
	// Lon holds the value of the "lon" field.
	Lon string `json:"lon,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SchoolQuery when eager-loading is set.
	Edges             SchoolEdges `json:"edges"`
	municipio_schools *string
}

// SchoolEdges holds the relations/edges for other nodes in the graph.
type SchoolEdges struct {
	// Classes holds the value of the classes edge.
	Classes []*Class `json:"classes,omitempty"`
	// Municipio holds the value of the municipio edge.
	Municipio *Municipio `json:"municipio,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassesOrErr returns the Classes value or an error if the edge
// was not loaded in eager-loading.
func (e SchoolEdges) ClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[0] {
		return e.Classes, nil
	}
	return nil, &NotLoadedError{edge: "classes"}
}

// MunicipioOrErr returns the Municipio value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SchoolEdges) MunicipioOrErr() (*Municipio, error) {
	if e.loadedTypes[1] {
		if e.Municipio == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: municipio.Label}
		}
		return e.Municipio, nil
	}
	return nil, &NotLoadedError{edge: "municipio"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*School) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case school.FieldID, school.FieldName, school.FieldLat, school.FieldLon:
			values[i] = new(sql.NullString)
		case school.ForeignKeys[0]: // municipio_schools
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type School", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the School fields.
func (s *School) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case school.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case school.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case school.FieldLat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				s.Lat = value.String
			}
		case school.FieldLon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lon", values[i])
			} else if value.Valid {
				s.Lon = value.String
			}
		case school.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field municipio_schools", values[i])
			} else if value.Valid {
				s.municipio_schools = new(string)
				*s.municipio_schools = value.String
			}
		}
	}
	return nil
}

// QueryClasses queries the "classes" edge of the School entity.
func (s *School) QueryClasses() *ClassQuery {
	return (&SchoolClient{config: s.config}).QueryClasses(s)
}

// QueryMunicipio queries the "municipio" edge of the School entity.
func (s *School) QueryMunicipio() *MunicipioQuery {
	return (&SchoolClient{config: s.config}).QueryMunicipio(s)
}

// Update returns a builder for updating this School.
// Note that you need to call School.Unwrap() before calling this method if this School
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *School) Update() *SchoolUpdateOne {
	return (&SchoolClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the School entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *School) Unwrap() *School {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: School is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *School) String() string {
	var builder strings.Builder
	builder.WriteString("School(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(s.Lat)
	builder.WriteString(", ")
	builder.WriteString("lon=")
	builder.WriteString(s.Lon)
	builder.WriteByte(')')
	return builder.String()
}

// Schools is a parsable slice of School.
type Schools []*School

func (s Schools) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
