// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/vmkevv/rigelapi/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vmkevv/rigelapi/ent/activity"
	"github.com/vmkevv/rigelapi/ent/adminaction"
	"github.com/vmkevv/rigelapi/ent/apperror"
	"github.com/vmkevv/rigelapi/ent/area"
	"github.com/vmkevv/rigelapi/ent/attendance"
	"github.com/vmkevv/rigelapi/ent/attendanceday"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/dpto"
	"github.com/vmkevv/rigelapi/ent/grade"
	"github.com/vmkevv/rigelapi/ent/municipio"
	"github.com/vmkevv/rigelapi/ent/period"
	"github.com/vmkevv/rigelapi/ent/provincia"
	"github.com/vmkevv/rigelapi/ent/school"
	"github.com/vmkevv/rigelapi/ent/score"
	"github.com/vmkevv/rigelapi/ent/student"
	"github.com/vmkevv/rigelapi/ent/subject"
	"github.com/vmkevv/rigelapi/ent/subscription"
	"github.com/vmkevv/rigelapi/ent/teacher"
	"github.com/vmkevv/rigelapi/ent/year"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// AdminAction is the client for interacting with the AdminAction builders.
	AdminAction *AdminActionClient
	// AppError is the client for interacting with the AppError builders.
	AppError *AppErrorClient
	// Area is the client for interacting with the Area builders.
	Area *AreaClient
	// Attendance is the client for interacting with the Attendance builders.
	Attendance *AttendanceClient
	// AttendanceDay is the client for interacting with the AttendanceDay builders.
	AttendanceDay *AttendanceDayClient
	// Class is the client for interacting with the Class builders.
	Class *ClassClient
	// ClassPeriod is the client for interacting with the ClassPeriod builders.
	ClassPeriod *ClassPeriodClient
	// Dpto is the client for interacting with the Dpto builders.
	Dpto *DptoClient
	// Grade is the client for interacting with the Grade builders.
	Grade *GradeClient
	// Municipio is the client for interacting with the Municipio builders.
	Municipio *MunicipioClient
	// Period is the client for interacting with the Period builders.
	Period *PeriodClient
	// Provincia is the client for interacting with the Provincia builders.
	Provincia *ProvinciaClient
	// School is the client for interacting with the School builders.
	School *SchoolClient
	// Score is the client for interacting with the Score builders.
	Score *ScoreClient
	// Student is the client for interacting with the Student builders.
	Student *StudentClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// Teacher is the client for interacting with the Teacher builders.
	Teacher *TeacherClient
	// Year is the client for interacting with the Year builders.
	Year *YearClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.AdminAction = NewAdminActionClient(c.config)
	c.AppError = NewAppErrorClient(c.config)
	c.Area = NewAreaClient(c.config)
	c.Attendance = NewAttendanceClient(c.config)
	c.AttendanceDay = NewAttendanceDayClient(c.config)
	c.Class = NewClassClient(c.config)
	c.ClassPeriod = NewClassPeriodClient(c.config)
	c.Dpto = NewDptoClient(c.config)
	c.Grade = NewGradeClient(c.config)
	c.Municipio = NewMunicipioClient(c.config)
	c.Period = NewPeriodClient(c.config)
	c.Provincia = NewProvinciaClient(c.config)
	c.School = NewSchoolClient(c.config)
	c.Score = NewScoreClient(c.config)
	c.Student = NewStudentClient(c.config)
	c.Subject = NewSubjectClient(c.config)
	c.Subscription = NewSubscriptionClient(c.config)
	c.Teacher = NewTeacherClient(c.config)
	c.Year = NewYearClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Activity:      NewActivityClient(cfg),
		AdminAction:   NewAdminActionClient(cfg),
		AppError:      NewAppErrorClient(cfg),
		Area:          NewAreaClient(cfg),
		Attendance:    NewAttendanceClient(cfg),
		AttendanceDay: NewAttendanceDayClient(cfg),
		Class:         NewClassClient(cfg),
		ClassPeriod:   NewClassPeriodClient(cfg),
		Dpto:          NewDptoClient(cfg),
		Grade:         NewGradeClient(cfg),
		Municipio:     NewMunicipioClient(cfg),
		Period:        NewPeriodClient(cfg),
		Provincia:     NewProvinciaClient(cfg),
		School:        NewSchoolClient(cfg),
		Score:         NewScoreClient(cfg),
		Student:       NewStudentClient(cfg),
		Subject:       NewSubjectClient(cfg),
		Subscription:  NewSubscriptionClient(cfg),
		Teacher:       NewTeacherClient(cfg),
		Year:          NewYearClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Activity:      NewActivityClient(cfg),
		AdminAction:   NewAdminActionClient(cfg),
		AppError:      NewAppErrorClient(cfg),
		Area:          NewAreaClient(cfg),
		Attendance:    NewAttendanceClient(cfg),
		AttendanceDay: NewAttendanceDayClient(cfg),
		Class:         NewClassClient(cfg),
		ClassPeriod:   NewClassPeriodClient(cfg),
		Dpto:          NewDptoClient(cfg),
		Grade:         NewGradeClient(cfg),
		Municipio:     NewMunicipioClient(cfg),
		Period:        NewPeriodClient(cfg),
		Provincia:     NewProvinciaClient(cfg),
		School:        NewSchoolClient(cfg),
		Score:         NewScoreClient(cfg),
		Student:       NewStudentClient(cfg),
		Subject:       NewSubjectClient(cfg),
		Subscription:  NewSubscriptionClient(cfg),
		Teacher:       NewTeacherClient(cfg),
		Year:          NewYearClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Activity, c.AdminAction, c.AppError, c.Area, c.Attendance, c.AttendanceDay,
		c.Class, c.ClassPeriod, c.Dpto, c.Grade, c.Municipio, c.Period, c.Provincia,
		c.School, c.Score, c.Student, c.Subject, c.Subscription, c.Teacher, c.Year,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Activity, c.AdminAction, c.AppError, c.Area, c.Attendance, c.AttendanceDay,
		c.Class, c.ClassPeriod, c.Dpto, c.Grade, c.Municipio, c.Period, c.Provincia,
		c.School, c.Score, c.Student, c.Subject, c.Subscription, c.Teacher, c.Year,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivityMutation:
		return c.Activity.mutate(ctx, m)
	case *AdminActionMutation:
		return c.AdminAction.mutate(ctx, m)
	case *AppErrorMutation:
		return c.AppError.mutate(ctx, m)
	case *AreaMutation:
		return c.Area.mutate(ctx, m)
	case *AttendanceMutation:
		return c.Attendance.mutate(ctx, m)
	case *AttendanceDayMutation:
		return c.AttendanceDay.mutate(ctx, m)
	case *ClassMutation:
		return c.Class.mutate(ctx, m)
	case *ClassPeriodMutation:
		return c.ClassPeriod.mutate(ctx, m)
	case *DptoMutation:
		return c.Dpto.mutate(ctx, m)
	case *GradeMutation:
		return c.Grade.mutate(ctx, m)
	case *MunicipioMutation:
		return c.Municipio.mutate(ctx, m)
	case *PeriodMutation:
		return c.Period.mutate(ctx, m)
	case *ProvinciaMutation:
		return c.Provincia.mutate(ctx, m)
	case *SchoolMutation:
		return c.School.mutate(ctx, m)
	case *ScoreMutation:
		return c.Score.mutate(ctx, m)
	case *StudentMutation:
		return c.Student.mutate(ctx, m)
	case *SubjectMutation:
		return c.Subject.mutate(ctx, m)
	case *SubscriptionMutation:
		return c.Subscription.mutate(ctx, m)
	case *TeacherMutation:
		return c.Teacher.mutate(ctx, m)
	case *YearMutation:
		return c.Year.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activity.Intercept(f(g(h())))`.
func (c *ActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Activity = append(c.inters.Activity, interceptors...)
}

// Create returns a builder for creating a Activity entity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id string) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityClient) DeleteOneID(id string) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id string) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id string) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScores queries the scores edge of a Activity.
func (c *ActivityClient) QueryScores(a *Activity) *ScoreQuery {
	query := (&ScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(score.Table, score.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activity.ScoresTable, activity.ScoresColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArea queries the area edge of a Activity.
func (c *ActivityClient) QueryArea(a *Activity) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.AreaTable, activity.AreaColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassPeriod queries the classPeriod edge of a Activity.
func (c *ActivityClient) QueryClassPeriod(a *Activity) *ClassPeriodQuery {
	query := (&ClassPeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(classperiod.Table, classperiod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.ClassPeriodTable, activity.ClassPeriodColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// Interceptors returns the client interceptors.
func (c *ActivityClient) Interceptors() []Interceptor {
	return c.inters.Activity
}

func (c *ActivityClient) mutate(ctx context.Context, m *ActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Activity mutation op: %q", m.Op())
	}
}

// AdminActionClient is a client for the AdminAction schema.
type AdminActionClient struct {
	config
}

// NewAdminActionClient returns a client for the AdminAction from the given config.
func NewAdminActionClient(c config) *AdminActionClient {
	return &AdminActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminaction.Hooks(f(g(h())))`.
func (c *AdminActionClient) Use(hooks ...Hook) {
	c.hooks.AdminAction = append(c.hooks.AdminAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminaction.Intercept(f(g(h())))`.
func (c *AdminActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminAction = append(c.inters.AdminAction, interceptors...)
}

// Create returns a builder for creating a AdminAction entity.
func (c *AdminActionClient) Create() *AdminActionCreate {
	mutation := newAdminActionMutation(c.config, OpCreate)
	return &AdminActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminAction entities.
func (c *AdminActionClient) CreateBulk(builders ...*AdminActionCreate) *AdminActionCreateBulk {
	return &AdminActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminAction.
func (c *AdminActionClient) Update() *AdminActionUpdate {
	mutation := newAdminActionMutation(c.config, OpUpdate)
	return &AdminActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminActionClient) UpdateOne(aa *AdminAction) *AdminActionUpdateOne {
	mutation := newAdminActionMutation(c.config, OpUpdateOne, withAdminAction(aa))
	return &AdminActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminActionClient) UpdateOneID(id string) *AdminActionUpdateOne {
	mutation := newAdminActionMutation(c.config, OpUpdateOne, withAdminActionID(id))
	return &AdminActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminAction.
func (c *AdminActionClient) Delete() *AdminActionDelete {
	mutation := newAdminActionMutation(c.config, OpDelete)
	return &AdminActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminActionClient) DeleteOne(aa *AdminAction) *AdminActionDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminActionClient) DeleteOneID(id string) *AdminActionDeleteOne {
	builder := c.Delete().Where(adminaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminActionDeleteOne{builder}
}

// Query returns a query builder for AdminAction.
func (c *AdminActionClient) Query() *AdminActionQuery {
	return &AdminActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminAction},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminAction entity by its id.
func (c *AdminActionClient) Get(ctx context.Context, id string) (*AdminAction, error) {
	return c.Query().Where(adminaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminActionClient) GetX(ctx context.Context, id string) *AdminAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a AdminAction.
func (c *AdminActionClient) QueryTeacher(aa *AdminAction) *TeacherQuery {
	query := (&TeacherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminaction.Table, adminaction.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminaction.TeacherTable, adminaction.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminActionClient) Hooks() []Hook {
	return c.hooks.AdminAction
}

// Interceptors returns the client interceptors.
func (c *AdminActionClient) Interceptors() []Interceptor {
	return c.inters.AdminAction
}

func (c *AdminActionClient) mutate(ctx context.Context, m *AdminActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminAction mutation op: %q", m.Op())
	}
}

// AppErrorClient is a client for the AppError schema.
type AppErrorClient struct {
	config
}

// NewAppErrorClient returns a client for the AppError from the given config.
func NewAppErrorClient(c config) *AppErrorClient {
	return &AppErrorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apperror.Hooks(f(g(h())))`.
func (c *AppErrorClient) Use(hooks ...Hook) {
	c.hooks.AppError = append(c.hooks.AppError, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apperror.Intercept(f(g(h())))`.
func (c *AppErrorClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppError = append(c.inters.AppError, interceptors...)
}

// Create returns a builder for creating a AppError entity.
func (c *AppErrorClient) Create() *AppErrorCreate {
	mutation := newAppErrorMutation(c.config, OpCreate)
	return &AppErrorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppError entities.
func (c *AppErrorClient) CreateBulk(builders ...*AppErrorCreate) *AppErrorCreateBulk {
	return &AppErrorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppError.
func (c *AppErrorClient) Update() *AppErrorUpdate {
	mutation := newAppErrorMutation(c.config, OpUpdate)
	return &AppErrorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppErrorClient) UpdateOne(ae *AppError) *AppErrorUpdateOne {
	mutation := newAppErrorMutation(c.config, OpUpdateOne, withAppError(ae))
	return &AppErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppErrorClient) UpdateOneID(id string) *AppErrorUpdateOne {
	mutation := newAppErrorMutation(c.config, OpUpdateOne, withAppErrorID(id))
	return &AppErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppError.
func (c *AppErrorClient) Delete() *AppErrorDelete {
	mutation := newAppErrorMutation(c.config, OpDelete)
	return &AppErrorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppErrorClient) DeleteOne(ae *AppError) *AppErrorDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppErrorClient) DeleteOneID(id string) *AppErrorDeleteOne {
	builder := c.Delete().Where(apperror.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppErrorDeleteOne{builder}
}

// Query returns a query builder for AppError.
func (c *AppErrorClient) Query() *AppErrorQuery {
	return &AppErrorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppError},
		inters: c.Interceptors(),
	}
}

// Get returns a AppError entity by its id.
func (c *AppErrorClient) Get(ctx context.Context, id string) (*AppError, error) {
	return c.Query().Where(apperror.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppErrorClient) GetX(ctx context.Context, id string) *AppError {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppErrorClient) Hooks() []Hook {
	return c.hooks.AppError
}

// Interceptors returns the client interceptors.
func (c *AppErrorClient) Interceptors() []Interceptor {
	return c.inters.AppError
}

func (c *AppErrorClient) mutate(ctx context.Context, m *AppErrorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppErrorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppErrorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppErrorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppError mutation op: %q", m.Op())
	}
}

// AreaClient is a client for the Area schema.
type AreaClient struct {
	config
}

// NewAreaClient returns a client for the Area from the given config.
func NewAreaClient(c config) *AreaClient {
	return &AreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `area.Hooks(f(g(h())))`.
func (c *AreaClient) Use(hooks ...Hook) {
	c.hooks.Area = append(c.hooks.Area, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `area.Intercept(f(g(h())))`.
func (c *AreaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Area = append(c.inters.Area, interceptors...)
}

// Create returns a builder for creating a Area entity.
func (c *AreaClient) Create() *AreaCreate {
	mutation := newAreaMutation(c.config, OpCreate)
	return &AreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Area entities.
func (c *AreaClient) CreateBulk(builders ...*AreaCreate) *AreaCreateBulk {
	return &AreaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Area.
func (c *AreaClient) Update() *AreaUpdate {
	mutation := newAreaMutation(c.config, OpUpdate)
	return &AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaClient) UpdateOne(a *Area) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withArea(a))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaClient) UpdateOneID(id string) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withAreaID(id))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Area.
func (c *AreaClient) Delete() *AreaDelete {
	mutation := newAreaMutation(c.config, OpDelete)
	return &AreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AreaClient) DeleteOne(a *Area) *AreaDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AreaClient) DeleteOneID(id string) *AreaDeleteOne {
	builder := c.Delete().Where(area.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaDeleteOne{builder}
}

// Query returns a query builder for Area.
func (c *AreaClient) Query() *AreaQuery {
	return &AreaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArea},
		inters: c.Interceptors(),
	}
}

// Get returns a Area entity by its id.
func (c *AreaClient) Get(ctx context.Context, id string) (*Area, error) {
	return c.Query().Where(area.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaClient) GetX(ctx context.Context, id string) *Area {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivities queries the activities edge of a Area.
func (c *AreaClient) QueryActivities(a *Area) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, area.ActivitiesTable, area.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryYear queries the year edge of a Area.
func (c *AreaClient) QueryYear(a *Area) *YearQuery {
	query := (&YearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(year.Table, year.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, area.YearTable, area.YearColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaClient) Hooks() []Hook {
	return c.hooks.Area
}

// Interceptors returns the client interceptors.
func (c *AreaClient) Interceptors() []Interceptor {
	return c.inters.Area
}

func (c *AreaClient) mutate(ctx context.Context, m *AreaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AreaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AreaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Area mutation op: %q", m.Op())
	}
}

// AttendanceClient is a client for the Attendance schema.
type AttendanceClient struct {
	config
}

// NewAttendanceClient returns a client for the Attendance from the given config.
func NewAttendanceClient(c config) *AttendanceClient {
	return &AttendanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attendance.Hooks(f(g(h())))`.
func (c *AttendanceClient) Use(hooks ...Hook) {
	c.hooks.Attendance = append(c.hooks.Attendance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attendance.Intercept(f(g(h())))`.
func (c *AttendanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attendance = append(c.inters.Attendance, interceptors...)
}

// Create returns a builder for creating a Attendance entity.
func (c *AttendanceClient) Create() *AttendanceCreate {
	mutation := newAttendanceMutation(c.config, OpCreate)
	return &AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attendance entities.
func (c *AttendanceClient) CreateBulk(builders ...*AttendanceCreate) *AttendanceCreateBulk {
	return &AttendanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attendance.
func (c *AttendanceClient) Update() *AttendanceUpdate {
	mutation := newAttendanceMutation(c.config, OpUpdate)
	return &AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttendanceClient) UpdateOne(a *Attendance) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(a))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttendanceClient) UpdateOneID(id string) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendanceID(id))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attendance.
func (c *AttendanceClient) Delete() *AttendanceDelete {
	mutation := newAttendanceMutation(c.config, OpDelete)
	return &AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttendanceClient) DeleteOne(a *Attendance) *AttendanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttendanceClient) DeleteOneID(id string) *AttendanceDeleteOne {
	builder := c.Delete().Where(attendance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttendanceDeleteOne{builder}
}

// Query returns a query builder for Attendance.
func (c *AttendanceClient) Query() *AttendanceQuery {
	return &AttendanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttendance},
		inters: c.Interceptors(),
	}
}

// Get returns a Attendance entity by its id.
func (c *AttendanceClient) Get(ctx context.Context, id string) (*Attendance, error) {
	return c.Query().Where(attendance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttendanceClient) GetX(ctx context.Context, id string) *Attendance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttendanceDay queries the attendanceDay edge of a Attendance.
func (c *AttendanceClient) QueryAttendanceDay(a *Attendance) *AttendanceDayQuery {
	query := (&AttendanceDayClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(attendanceday.Table, attendanceday.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.AttendanceDayTable, attendance.AttendanceDayColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudent queries the student edge of a Attendance.
func (c *AttendanceClient) QueryStudent(a *Attendance) *StudentQuery {
	query := (&StudentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.StudentTable, attendance.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttendanceClient) Hooks() []Hook {
	return c.hooks.Attendance
}

// Interceptors returns the client interceptors.
func (c *AttendanceClient) Interceptors() []Interceptor {
	return c.inters.Attendance
}

func (c *AttendanceClient) mutate(ctx context.Context, m *AttendanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attendance mutation op: %q", m.Op())
	}
}

// AttendanceDayClient is a client for the AttendanceDay schema.
type AttendanceDayClient struct {
	config
}

// NewAttendanceDayClient returns a client for the AttendanceDay from the given config.
func NewAttendanceDayClient(c config) *AttendanceDayClient {
	return &AttendanceDayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attendanceday.Hooks(f(g(h())))`.
func (c *AttendanceDayClient) Use(hooks ...Hook) {
	c.hooks.AttendanceDay = append(c.hooks.AttendanceDay, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attendanceday.Intercept(f(g(h())))`.
func (c *AttendanceDayClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttendanceDay = append(c.inters.AttendanceDay, interceptors...)
}

// Create returns a builder for creating a AttendanceDay entity.
func (c *AttendanceDayClient) Create() *AttendanceDayCreate {
	mutation := newAttendanceDayMutation(c.config, OpCreate)
	return &AttendanceDayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttendanceDay entities.
func (c *AttendanceDayClient) CreateBulk(builders ...*AttendanceDayCreate) *AttendanceDayCreateBulk {
	return &AttendanceDayCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttendanceDay.
func (c *AttendanceDayClient) Update() *AttendanceDayUpdate {
	mutation := newAttendanceDayMutation(c.config, OpUpdate)
	return &AttendanceDayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttendanceDayClient) UpdateOne(ad *AttendanceDay) *AttendanceDayUpdateOne {
	mutation := newAttendanceDayMutation(c.config, OpUpdateOne, withAttendanceDay(ad))
	return &AttendanceDayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttendanceDayClient) UpdateOneID(id string) *AttendanceDayUpdateOne {
	mutation := newAttendanceDayMutation(c.config, OpUpdateOne, withAttendanceDayID(id))
	return &AttendanceDayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttendanceDay.
func (c *AttendanceDayClient) Delete() *AttendanceDayDelete {
	mutation := newAttendanceDayMutation(c.config, OpDelete)
	return &AttendanceDayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttendanceDayClient) DeleteOne(ad *AttendanceDay) *AttendanceDayDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttendanceDayClient) DeleteOneID(id string) *AttendanceDayDeleteOne {
	builder := c.Delete().Where(attendanceday.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttendanceDayDeleteOne{builder}
}

// Query returns a query builder for AttendanceDay.
func (c *AttendanceDayClient) Query() *AttendanceDayQuery {
	return &AttendanceDayQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttendanceDay},
		inters: c.Interceptors(),
	}
}

// Get returns a AttendanceDay entity by its id.
func (c *AttendanceDayClient) Get(ctx context.Context, id string) (*AttendanceDay, error) {
	return c.Query().Where(attendanceday.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttendanceDayClient) GetX(ctx context.Context, id string) *AttendanceDay {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttendances queries the attendances edge of a AttendanceDay.
func (c *AttendanceDayClient) QueryAttendances(ad *AttendanceDay) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendanceday.Table, attendanceday.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attendanceday.AttendancesTable, attendanceday.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassPeriod queries the classPeriod edge of a AttendanceDay.
func (c *AttendanceDayClient) QueryClassPeriod(ad *AttendanceDay) *ClassPeriodQuery {
	query := (&ClassPeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendanceday.Table, attendanceday.FieldID, id),
			sqlgraph.To(classperiod.Table, classperiod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendanceday.ClassPeriodTable, attendanceday.ClassPeriodColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttendanceDayClient) Hooks() []Hook {
	return c.hooks.AttendanceDay
}

// Interceptors returns the client interceptors.
func (c *AttendanceDayClient) Interceptors() []Interceptor {
	return c.inters.AttendanceDay
}

func (c *AttendanceDayClient) mutate(ctx context.Context, m *AttendanceDayMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttendanceDayCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttendanceDayUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttendanceDayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttendanceDayDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttendanceDay mutation op: %q", m.Op())
	}
}

// ClassClient is a client for the Class schema.
type ClassClient struct {
	config
}

// NewClassClient returns a client for the Class from the given config.
func NewClassClient(c config) *ClassClient {
	return &ClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `class.Hooks(f(g(h())))`.
func (c *ClassClient) Use(hooks ...Hook) {
	c.hooks.Class = append(c.hooks.Class, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `class.Intercept(f(g(h())))`.
func (c *ClassClient) Intercept(interceptors ...Interceptor) {
	c.inters.Class = append(c.inters.Class, interceptors...)
}

// Create returns a builder for creating a Class entity.
func (c *ClassClient) Create() *ClassCreate {
	mutation := newClassMutation(c.config, OpCreate)
	return &ClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Class entities.
func (c *ClassClient) CreateBulk(builders ...*ClassCreate) *ClassCreateBulk {
	return &ClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Class.
func (c *ClassClient) Update() *ClassUpdate {
	mutation := newClassMutation(c.config, OpUpdate)
	return &ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassClient) UpdateOne(cl *Class) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClass(cl))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassClient) UpdateOneID(id string) *ClassUpdateOne {
	mutation := newClassMutation(c.config, OpUpdateOne, withClassID(id))
	return &ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Class.
func (c *ClassClient) Delete() *ClassDelete {
	mutation := newClassMutation(c.config, OpDelete)
	return &ClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassClient) DeleteOne(cl *Class) *ClassDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassClient) DeleteOneID(id string) *ClassDeleteOne {
	builder := c.Delete().Where(class.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassDeleteOne{builder}
}

// Query returns a query builder for Class.
func (c *ClassClient) Query() *ClassQuery {
	return &ClassQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClass},
		inters: c.Interceptors(),
	}
}

// Get returns a Class entity by its id.
func (c *ClassClient) Get(ctx context.Context, id string) (*Class, error) {
	return c.Query().Where(class.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassClient) GetX(ctx context.Context, id string) *Class {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudents queries the students edge of a Class.
func (c *ClassClient) QueryStudents(cl *Class) *StudentQuery {
	query := (&StudentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, class.StudentsTable, class.StudentsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassPeriods queries the classPeriods edge of a Class.
func (c *ClassClient) QueryClassPeriods(cl *Class) *ClassPeriodQuery {
	query := (&ClassPeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(classperiod.Table, classperiod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, class.ClassPeriodsTable, class.ClassPeriodsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySchool queries the school edge of a Class.
func (c *ClassClient) QuerySchool(cl *Class) *SchoolQuery {
	query := (&SchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class.SchoolTable, class.SchoolColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacher queries the teacher edge of a Class.
func (c *ClassClient) QueryTeacher(cl *Class) *TeacherQuery {
	query := (&TeacherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class.TeacherTable, class.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a Class.
func (c *ClassClient) QuerySubject(cl *Class) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class.SubjectTable, class.SubjectColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrade queries the grade edge of a Class.
func (c *ClassClient) QueryGrade(cl *Class) *GradeQuery {
	query := (&GradeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(grade.Table, grade.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class.GradeTable, class.GradeColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryYear queries the year edge of a Class.
func (c *ClassClient) QueryYear(cl *Class) *YearQuery {
	query := (&YearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(class.Table, class.FieldID, id),
			sqlgraph.To(year.Table, year.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class.YearTable, class.YearColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassClient) Hooks() []Hook {
	return c.hooks.Class
}

// Interceptors returns the client interceptors.
func (c *ClassClient) Interceptors() []Interceptor {
	return c.inters.Class
}

func (c *ClassClient) mutate(ctx context.Context, m *ClassMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Class mutation op: %q", m.Op())
	}
}

// ClassPeriodClient is a client for the ClassPeriod schema.
type ClassPeriodClient struct {
	config
}

// NewClassPeriodClient returns a client for the ClassPeriod from the given config.
func NewClassPeriodClient(c config) *ClassPeriodClient {
	return &ClassPeriodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `classperiod.Hooks(f(g(h())))`.
func (c *ClassPeriodClient) Use(hooks ...Hook) {
	c.hooks.ClassPeriod = append(c.hooks.ClassPeriod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `classperiod.Intercept(f(g(h())))`.
func (c *ClassPeriodClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClassPeriod = append(c.inters.ClassPeriod, interceptors...)
}

// Create returns a builder for creating a ClassPeriod entity.
func (c *ClassPeriodClient) Create() *ClassPeriodCreate {
	mutation := newClassPeriodMutation(c.config, OpCreate)
	return &ClassPeriodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClassPeriod entities.
func (c *ClassPeriodClient) CreateBulk(builders ...*ClassPeriodCreate) *ClassPeriodCreateBulk {
	return &ClassPeriodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClassPeriod.
func (c *ClassPeriodClient) Update() *ClassPeriodUpdate {
	mutation := newClassPeriodMutation(c.config, OpUpdate)
	return &ClassPeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassPeriodClient) UpdateOne(cp *ClassPeriod) *ClassPeriodUpdateOne {
	mutation := newClassPeriodMutation(c.config, OpUpdateOne, withClassPeriod(cp))
	return &ClassPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassPeriodClient) UpdateOneID(id string) *ClassPeriodUpdateOne {
	mutation := newClassPeriodMutation(c.config, OpUpdateOne, withClassPeriodID(id))
	return &ClassPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClassPeriod.
func (c *ClassPeriodClient) Delete() *ClassPeriodDelete {
	mutation := newClassPeriodMutation(c.config, OpDelete)
	return &ClassPeriodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClassPeriodClient) DeleteOne(cp *ClassPeriod) *ClassPeriodDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClassPeriodClient) DeleteOneID(id string) *ClassPeriodDeleteOne {
	builder := c.Delete().Where(classperiod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassPeriodDeleteOne{builder}
}

// Query returns a query builder for ClassPeriod.
func (c *ClassPeriodClient) Query() *ClassPeriodQuery {
	return &ClassPeriodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClassPeriod},
		inters: c.Interceptors(),
	}
}

// Get returns a ClassPeriod entity by its id.
func (c *ClassPeriodClient) Get(ctx context.Context, id string) (*ClassPeriod, error) {
	return c.Query().Where(classperiod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassPeriodClient) GetX(ctx context.Context, id string) *ClassPeriod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttendanceDays queries the attendanceDays edge of a ClassPeriod.
func (c *ClassPeriodClient) QueryAttendanceDays(cp *ClassPeriod) *AttendanceDayQuery {
	query := (&AttendanceDayClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(classperiod.Table, classperiod.FieldID, id),
			sqlgraph.To(attendanceday.Table, attendanceday.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, classperiod.AttendanceDaysTable, classperiod.AttendanceDaysColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a ClassPeriod.
func (c *ClassPeriodClient) QueryActivities(cp *ClassPeriod) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(classperiod.Table, classperiod.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, classperiod.ActivitiesTable, classperiod.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a ClassPeriod.
func (c *ClassPeriodClient) QueryClass(cp *ClassPeriod) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(classperiod.Table, classperiod.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, classperiod.ClassTable, classperiod.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeriod queries the period edge of a ClassPeriod.
func (c *ClassPeriodClient) QueryPeriod(cp *ClassPeriod) *PeriodQuery {
	query := (&PeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(classperiod.Table, classperiod.FieldID, id),
			sqlgraph.To(period.Table, period.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, classperiod.PeriodTable, classperiod.PeriodColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClassPeriodClient) Hooks() []Hook {
	return c.hooks.ClassPeriod
}

// Interceptors returns the client interceptors.
func (c *ClassPeriodClient) Interceptors() []Interceptor {
	return c.inters.ClassPeriod
}

func (c *ClassPeriodClient) mutate(ctx context.Context, m *ClassPeriodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClassPeriodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClassPeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClassPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClassPeriodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ClassPeriod mutation op: %q", m.Op())
	}
}

// DptoClient is a client for the Dpto schema.
type DptoClient struct {
	config
}

// NewDptoClient returns a client for the Dpto from the given config.
func NewDptoClient(c config) *DptoClient {
	return &DptoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dpto.Hooks(f(g(h())))`.
func (c *DptoClient) Use(hooks ...Hook) {
	c.hooks.Dpto = append(c.hooks.Dpto, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dpto.Intercept(f(g(h())))`.
func (c *DptoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Dpto = append(c.inters.Dpto, interceptors...)
}

// Create returns a builder for creating a Dpto entity.
func (c *DptoClient) Create() *DptoCreate {
	mutation := newDptoMutation(c.config, OpCreate)
	return &DptoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dpto entities.
func (c *DptoClient) CreateBulk(builders ...*DptoCreate) *DptoCreateBulk {
	return &DptoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dpto.
func (c *DptoClient) Update() *DptoUpdate {
	mutation := newDptoMutation(c.config, OpUpdate)
	return &DptoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DptoClient) UpdateOne(d *Dpto) *DptoUpdateOne {
	mutation := newDptoMutation(c.config, OpUpdateOne, withDpto(d))
	return &DptoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DptoClient) UpdateOneID(id string) *DptoUpdateOne {
	mutation := newDptoMutation(c.config, OpUpdateOne, withDptoID(id))
	return &DptoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dpto.
func (c *DptoClient) Delete() *DptoDelete {
	mutation := newDptoMutation(c.config, OpDelete)
	return &DptoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DptoClient) DeleteOne(d *Dpto) *DptoDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DptoClient) DeleteOneID(id string) *DptoDeleteOne {
	builder := c.Delete().Where(dpto.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DptoDeleteOne{builder}
}

// Query returns a query builder for Dpto.
func (c *DptoClient) Query() *DptoQuery {
	return &DptoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDpto},
		inters: c.Interceptors(),
	}
}

// Get returns a Dpto entity by its id.
func (c *DptoClient) Get(ctx context.Context, id string) (*Dpto, error) {
	return c.Query().Where(dpto.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DptoClient) GetX(ctx context.Context, id string) *Dpto {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvincias queries the provincias edge of a Dpto.
func (c *DptoClient) QueryProvincias(d *Dpto) *ProvinciaQuery {
	query := (&ProvinciaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dpto.Table, dpto.FieldID, id),
			sqlgraph.To(provincia.Table, provincia.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dpto.ProvinciasTable, dpto.ProvinciasColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DptoClient) Hooks() []Hook {
	return c.hooks.Dpto
}

// Interceptors returns the client interceptors.
func (c *DptoClient) Interceptors() []Interceptor {
	return c.inters.Dpto
}

func (c *DptoClient) mutate(ctx context.Context, m *DptoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DptoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DptoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DptoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DptoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Dpto mutation op: %q", m.Op())
	}
}

// GradeClient is a client for the Grade schema.
type GradeClient struct {
	config
}

// NewGradeClient returns a client for the Grade from the given config.
func NewGradeClient(c config) *GradeClient {
	return &GradeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grade.Hooks(f(g(h())))`.
func (c *GradeClient) Use(hooks ...Hook) {
	c.hooks.Grade = append(c.hooks.Grade, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grade.Intercept(f(g(h())))`.
func (c *GradeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Grade = append(c.inters.Grade, interceptors...)
}

// Create returns a builder for creating a Grade entity.
func (c *GradeClient) Create() *GradeCreate {
	mutation := newGradeMutation(c.config, OpCreate)
	return &GradeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Grade entities.
func (c *GradeClient) CreateBulk(builders ...*GradeCreate) *GradeCreateBulk {
	return &GradeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Grade.
func (c *GradeClient) Update() *GradeUpdate {
	mutation := newGradeMutation(c.config, OpUpdate)
	return &GradeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GradeClient) UpdateOne(gr *Grade) *GradeUpdateOne {
	mutation := newGradeMutation(c.config, OpUpdateOne, withGrade(gr))
	return &GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GradeClient) UpdateOneID(id string) *GradeUpdateOne {
	mutation := newGradeMutation(c.config, OpUpdateOne, withGradeID(id))
	return &GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Grade.
func (c *GradeClient) Delete() *GradeDelete {
	mutation := newGradeMutation(c.config, OpDelete)
	return &GradeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GradeClient) DeleteOne(gr *Grade) *GradeDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GradeClient) DeleteOneID(id string) *GradeDeleteOne {
	builder := c.Delete().Where(grade.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GradeDeleteOne{builder}
}

// Query returns a query builder for Grade.
func (c *GradeClient) Query() *GradeQuery {
	return &GradeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrade},
		inters: c.Interceptors(),
	}
}

// Get returns a Grade entity by its id.
func (c *GradeClient) Get(ctx context.Context, id string) (*Grade, error) {
	return c.Query().Where(grade.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GradeClient) GetX(ctx context.Context, id string) *Grade {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a Grade.
func (c *GradeClient) QueryClasses(gr *Grade) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grade.Table, grade.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, grade.ClassesTable, grade.ClassesColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GradeClient) Hooks() []Hook {
	return c.hooks.Grade
}

// Interceptors returns the client interceptors.
func (c *GradeClient) Interceptors() []Interceptor {
	return c.inters.Grade
}

func (c *GradeClient) mutate(ctx context.Context, m *GradeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GradeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GradeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GradeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GradeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Grade mutation op: %q", m.Op())
	}
}

// MunicipioClient is a client for the Municipio schema.
type MunicipioClient struct {
	config
}

// NewMunicipioClient returns a client for the Municipio from the given config.
func NewMunicipioClient(c config) *MunicipioClient {
	return &MunicipioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `municipio.Hooks(f(g(h())))`.
func (c *MunicipioClient) Use(hooks ...Hook) {
	c.hooks.Municipio = append(c.hooks.Municipio, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `municipio.Intercept(f(g(h())))`.
func (c *MunicipioClient) Intercept(interceptors ...Interceptor) {
	c.inters.Municipio = append(c.inters.Municipio, interceptors...)
}

// Create returns a builder for creating a Municipio entity.
func (c *MunicipioClient) Create() *MunicipioCreate {
	mutation := newMunicipioMutation(c.config, OpCreate)
	return &MunicipioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Municipio entities.
func (c *MunicipioClient) CreateBulk(builders ...*MunicipioCreate) *MunicipioCreateBulk {
	return &MunicipioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Municipio.
func (c *MunicipioClient) Update() *MunicipioUpdate {
	mutation := newMunicipioMutation(c.config, OpUpdate)
	return &MunicipioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MunicipioClient) UpdateOne(m *Municipio) *MunicipioUpdateOne {
	mutation := newMunicipioMutation(c.config, OpUpdateOne, withMunicipio(m))
	return &MunicipioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MunicipioClient) UpdateOneID(id string) *MunicipioUpdateOne {
	mutation := newMunicipioMutation(c.config, OpUpdateOne, withMunicipioID(id))
	return &MunicipioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Municipio.
func (c *MunicipioClient) Delete() *MunicipioDelete {
	mutation := newMunicipioMutation(c.config, OpDelete)
	return &MunicipioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MunicipioClient) DeleteOne(m *Municipio) *MunicipioDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MunicipioClient) DeleteOneID(id string) *MunicipioDeleteOne {
	builder := c.Delete().Where(municipio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MunicipioDeleteOne{builder}
}

// Query returns a query builder for Municipio.
func (c *MunicipioClient) Query() *MunicipioQuery {
	return &MunicipioQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMunicipio},
		inters: c.Interceptors(),
	}
}

// Get returns a Municipio entity by its id.
func (c *MunicipioClient) Get(ctx context.Context, id string) (*Municipio, error) {
	return c.Query().Where(municipio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MunicipioClient) GetX(ctx context.Context, id string) *Municipio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySchools queries the schools edge of a Municipio.
func (c *MunicipioClient) QuerySchools(m *Municipio) *SchoolQuery {
	query := (&SchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(municipio.Table, municipio.FieldID, id),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, municipio.SchoolsTable, municipio.SchoolsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvincia queries the provincia edge of a Municipio.
func (c *MunicipioClient) QueryProvincia(m *Municipio) *ProvinciaQuery {
	query := (&ProvinciaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(municipio.Table, municipio.FieldID, id),
			sqlgraph.To(provincia.Table, provincia.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, municipio.ProvinciaTable, municipio.ProvinciaColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MunicipioClient) Hooks() []Hook {
	return c.hooks.Municipio
}

// Interceptors returns the client interceptors.
func (c *MunicipioClient) Interceptors() []Interceptor {
	return c.inters.Municipio
}

func (c *MunicipioClient) mutate(ctx context.Context, m *MunicipioMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MunicipioCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MunicipioUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MunicipioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MunicipioDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Municipio mutation op: %q", m.Op())
	}
}

// PeriodClient is a client for the Period schema.
type PeriodClient struct {
	config
}

// NewPeriodClient returns a client for the Period from the given config.
func NewPeriodClient(c config) *PeriodClient {
	return &PeriodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `period.Hooks(f(g(h())))`.
func (c *PeriodClient) Use(hooks ...Hook) {
	c.hooks.Period = append(c.hooks.Period, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `period.Intercept(f(g(h())))`.
func (c *PeriodClient) Intercept(interceptors ...Interceptor) {
	c.inters.Period = append(c.inters.Period, interceptors...)
}

// Create returns a builder for creating a Period entity.
func (c *PeriodClient) Create() *PeriodCreate {
	mutation := newPeriodMutation(c.config, OpCreate)
	return &PeriodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Period entities.
func (c *PeriodClient) CreateBulk(builders ...*PeriodCreate) *PeriodCreateBulk {
	return &PeriodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Period.
func (c *PeriodClient) Update() *PeriodUpdate {
	mutation := newPeriodMutation(c.config, OpUpdate)
	return &PeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PeriodClient) UpdateOne(pe *Period) *PeriodUpdateOne {
	mutation := newPeriodMutation(c.config, OpUpdateOne, withPeriod(pe))
	return &PeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PeriodClient) UpdateOneID(id string) *PeriodUpdateOne {
	mutation := newPeriodMutation(c.config, OpUpdateOne, withPeriodID(id))
	return &PeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Period.
func (c *PeriodClient) Delete() *PeriodDelete {
	mutation := newPeriodMutation(c.config, OpDelete)
	return &PeriodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PeriodClient) DeleteOne(pe *Period) *PeriodDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PeriodClient) DeleteOneID(id string) *PeriodDeleteOne {
	builder := c.Delete().Where(period.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PeriodDeleteOne{builder}
}

// Query returns a query builder for Period.
func (c *PeriodClient) Query() *PeriodQuery {
	return &PeriodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePeriod},
		inters: c.Interceptors(),
	}
}

// Get returns a Period entity by its id.
func (c *PeriodClient) Get(ctx context.Context, id string) (*Period, error) {
	return c.Query().Where(period.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PeriodClient) GetX(ctx context.Context, id string) *Period {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClassPeriods queries the classPeriods edge of a Period.
func (c *PeriodClient) QueryClassPeriods(pe *Period) *ClassPeriodQuery {
	query := (&ClassPeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(period.Table, period.FieldID, id),
			sqlgraph.To(classperiod.Table, classperiod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, period.ClassPeriodsTable, period.ClassPeriodsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryYear queries the year edge of a Period.
func (c *PeriodClient) QueryYear(pe *Period) *YearQuery {
	query := (&YearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(period.Table, period.FieldID, id),
			sqlgraph.To(year.Table, year.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, period.YearTable, period.YearColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PeriodClient) Hooks() []Hook {
	return c.hooks.Period
}

// Interceptors returns the client interceptors.
func (c *PeriodClient) Interceptors() []Interceptor {
	return c.inters.Period
}

func (c *PeriodClient) mutate(ctx context.Context, m *PeriodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PeriodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PeriodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Period mutation op: %q", m.Op())
	}
}

// ProvinciaClient is a client for the Provincia schema.
type ProvinciaClient struct {
	config
}

// NewProvinciaClient returns a client for the Provincia from the given config.
func NewProvinciaClient(c config) *ProvinciaClient {
	return &ProvinciaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provincia.Hooks(f(g(h())))`.
func (c *ProvinciaClient) Use(hooks ...Hook) {
	c.hooks.Provincia = append(c.hooks.Provincia, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `provincia.Intercept(f(g(h())))`.
func (c *ProvinciaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Provincia = append(c.inters.Provincia, interceptors...)
}

// Create returns a builder for creating a Provincia entity.
func (c *ProvinciaClient) Create() *ProvinciaCreate {
	mutation := newProvinciaMutation(c.config, OpCreate)
	return &ProvinciaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Provincia entities.
func (c *ProvinciaClient) CreateBulk(builders ...*ProvinciaCreate) *ProvinciaCreateBulk {
	return &ProvinciaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Provincia.
func (c *ProvinciaClient) Update() *ProvinciaUpdate {
	mutation := newProvinciaMutation(c.config, OpUpdate)
	return &ProvinciaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvinciaClient) UpdateOne(pr *Provincia) *ProvinciaUpdateOne {
	mutation := newProvinciaMutation(c.config, OpUpdateOne, withProvincia(pr))
	return &ProvinciaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvinciaClient) UpdateOneID(id string) *ProvinciaUpdateOne {
	mutation := newProvinciaMutation(c.config, OpUpdateOne, withProvinciaID(id))
	return &ProvinciaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Provincia.
func (c *ProvinciaClient) Delete() *ProvinciaDelete {
	mutation := newProvinciaMutation(c.config, OpDelete)
	return &ProvinciaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProvinciaClient) DeleteOne(pr *Provincia) *ProvinciaDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProvinciaClient) DeleteOneID(id string) *ProvinciaDeleteOne {
	builder := c.Delete().Where(provincia.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvinciaDeleteOne{builder}
}

// Query returns a query builder for Provincia.
func (c *ProvinciaClient) Query() *ProvinciaQuery {
	return &ProvinciaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProvincia},
		inters: c.Interceptors(),
	}
}

// Get returns a Provincia entity by its id.
func (c *ProvinciaClient) Get(ctx context.Context, id string) (*Provincia, error) {
	return c.Query().Where(provincia.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvinciaClient) GetX(ctx context.Context, id string) *Provincia {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMunicipios queries the municipios edge of a Provincia.
func (c *ProvinciaClient) QueryMunicipios(pr *Provincia) *MunicipioQuery {
	query := (&MunicipioClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provincia.Table, provincia.FieldID, id),
			sqlgraph.To(municipio.Table, municipio.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provincia.MunicipiosTable, provincia.MunicipiosColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartamento queries the departamento edge of a Provincia.
func (c *ProvinciaClient) QueryDepartamento(pr *Provincia) *DptoQuery {
	query := (&DptoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provincia.Table, provincia.FieldID, id),
			sqlgraph.To(dpto.Table, dpto.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, provincia.DepartamentoTable, provincia.DepartamentoColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvinciaClient) Hooks() []Hook {
	return c.hooks.Provincia
}

// Interceptors returns the client interceptors.
func (c *ProvinciaClient) Interceptors() []Interceptor {
	return c.inters.Provincia
}

func (c *ProvinciaClient) mutate(ctx context.Context, m *ProvinciaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProvinciaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProvinciaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProvinciaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProvinciaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Provincia mutation op: %q", m.Op())
	}
}

// SchoolClient is a client for the School schema.
type SchoolClient struct {
	config
}

// NewSchoolClient returns a client for the School from the given config.
func NewSchoolClient(c config) *SchoolClient {
	return &SchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `school.Hooks(f(g(h())))`.
func (c *SchoolClient) Use(hooks ...Hook) {
	c.hooks.School = append(c.hooks.School, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `school.Intercept(f(g(h())))`.
func (c *SchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.School = append(c.inters.School, interceptors...)
}

// Create returns a builder for creating a School entity.
func (c *SchoolClient) Create() *SchoolCreate {
	mutation := newSchoolMutation(c.config, OpCreate)
	return &SchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of School entities.
func (c *SchoolClient) CreateBulk(builders ...*SchoolCreate) *SchoolCreateBulk {
	return &SchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for School.
func (c *SchoolClient) Update() *SchoolUpdate {
	mutation := newSchoolMutation(c.config, OpUpdate)
	return &SchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchoolClient) UpdateOne(s *School) *SchoolUpdateOne {
	mutation := newSchoolMutation(c.config, OpUpdateOne, withSchool(s))
	return &SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchoolClient) UpdateOneID(id string) *SchoolUpdateOne {
	mutation := newSchoolMutation(c.config, OpUpdateOne, withSchoolID(id))
	return &SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for School.
func (c *SchoolClient) Delete() *SchoolDelete {
	mutation := newSchoolMutation(c.config, OpDelete)
	return &SchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchoolClient) DeleteOne(s *School) *SchoolDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchoolClient) DeleteOneID(id string) *SchoolDeleteOne {
	builder := c.Delete().Where(school.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchoolDeleteOne{builder}
}

// Query returns a query builder for School.
func (c *SchoolClient) Query() *SchoolQuery {
	return &SchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a School entity by its id.
func (c *SchoolClient) Get(ctx context.Context, id string) (*School, error) {
	return c.Query().Where(school.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchoolClient) GetX(ctx context.Context, id string) *School {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a School.
func (c *SchoolClient) QueryClasses(s *School) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(school.Table, school.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, school.ClassesTable, school.ClassesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMunicipio queries the municipio edge of a School.
func (c *SchoolClient) QueryMunicipio(s *School) *MunicipioQuery {
	query := (&MunicipioClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(school.Table, school.FieldID, id),
			sqlgraph.To(municipio.Table, municipio.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, school.MunicipioTable, school.MunicipioColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SchoolClient) Hooks() []Hook {
	return c.hooks.School
}

// Interceptors returns the client interceptors.
func (c *SchoolClient) Interceptors() []Interceptor {
	return c.inters.School
}

func (c *SchoolClient) mutate(ctx context.Context, m *SchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown School mutation op: %q", m.Op())
	}
}

// ScoreClient is a client for the Score schema.
type ScoreClient struct {
	config
}

// NewScoreClient returns a client for the Score from the given config.
func NewScoreClient(c config) *ScoreClient {
	return &ScoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `score.Hooks(f(g(h())))`.
func (c *ScoreClient) Use(hooks ...Hook) {
	c.hooks.Score = append(c.hooks.Score, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `score.Intercept(f(g(h())))`.
func (c *ScoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.Score = append(c.inters.Score, interceptors...)
}

// Create returns a builder for creating a Score entity.
func (c *ScoreClient) Create() *ScoreCreate {
	mutation := newScoreMutation(c.config, OpCreate)
	return &ScoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Score entities.
func (c *ScoreClient) CreateBulk(builders ...*ScoreCreate) *ScoreCreateBulk {
	return &ScoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Score.
func (c *ScoreClient) Update() *ScoreUpdate {
	mutation := newScoreMutation(c.config, OpUpdate)
	return &ScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoreClient) UpdateOne(s *Score) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScore(s))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoreClient) UpdateOneID(id string) *ScoreUpdateOne {
	mutation := newScoreMutation(c.config, OpUpdateOne, withScoreID(id))
	return &ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Score.
func (c *ScoreClient) Delete() *ScoreDelete {
	mutation := newScoreMutation(c.config, OpDelete)
	return &ScoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoreClient) DeleteOne(s *Score) *ScoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScoreClient) DeleteOneID(id string) *ScoreDeleteOne {
	builder := c.Delete().Where(score.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoreDeleteOne{builder}
}

// Query returns a query builder for Score.
func (c *ScoreClient) Query() *ScoreQuery {
	return &ScoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScore},
		inters: c.Interceptors(),
	}
}

// Get returns a Score entity by its id.
func (c *ScoreClient) Get(ctx context.Context, id string) (*Score, error) {
	return c.Query().Where(score.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoreClient) GetX(ctx context.Context, id string) *Score {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActivity queries the activity edge of a Score.
func (c *ScoreClient) QueryActivity(s *Score) *ActivityQuery {
	query := (&ActivityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(score.Table, score.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, score.ActivityTable, score.ActivityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudent queries the student edge of a Score.
func (c *ScoreClient) QueryStudent(s *Score) *StudentQuery {
	query := (&StudentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(score.Table, score.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, score.StudentTable, score.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScoreClient) Hooks() []Hook {
	return c.hooks.Score
}

// Interceptors returns the client interceptors.
func (c *ScoreClient) Interceptors() []Interceptor {
	return c.inters.Score
}

func (c *ScoreClient) mutate(ctx context.Context, m *ScoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Score mutation op: %q", m.Op())
	}
}

// StudentClient is a client for the Student schema.
type StudentClient struct {
	config
}

// NewStudentClient returns a client for the Student from the given config.
func NewStudentClient(c config) *StudentClient {
	return &StudentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `student.Hooks(f(g(h())))`.
func (c *StudentClient) Use(hooks ...Hook) {
	c.hooks.Student = append(c.hooks.Student, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `student.Intercept(f(g(h())))`.
func (c *StudentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Student = append(c.inters.Student, interceptors...)
}

// Create returns a builder for creating a Student entity.
func (c *StudentClient) Create() *StudentCreate {
	mutation := newStudentMutation(c.config, OpCreate)
	return &StudentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Student entities.
func (c *StudentClient) CreateBulk(builders ...*StudentCreate) *StudentCreateBulk {
	return &StudentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Student.
func (c *StudentClient) Update() *StudentUpdate {
	mutation := newStudentMutation(c.config, OpUpdate)
	return &StudentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentClient) UpdateOne(s *Student) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudent(s))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentClient) UpdateOneID(id string) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudentID(id))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Student.
func (c *StudentClient) Delete() *StudentDelete {
	mutation := newStudentMutation(c.config, OpDelete)
	return &StudentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudentClient) DeleteOne(s *Student) *StudentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudentClient) DeleteOneID(id string) *StudentDeleteOne {
	builder := c.Delete().Where(student.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentDeleteOne{builder}
}

// Query returns a query builder for Student.
func (c *StudentClient) Query() *StudentQuery {
	return &StudentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudent},
		inters: c.Interceptors(),
	}
}

// Get returns a Student entity by its id.
func (c *StudentClient) Get(ctx context.Context, id string) (*Student, error) {
	return c.Query().Where(student.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentClient) GetX(ctx context.Context, id string) *Student {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttendances queries the attendances edge of a Student.
func (c *StudentClient) QueryAttendances(s *Student) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.AttendancesTable, student.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScores queries the scores edge of a Student.
func (c *StudentClient) QueryScores(s *Student) *ScoreQuery {
	query := (&ScoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(score.Table, score.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.ScoresTable, student.ScoresColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Student.
func (c *StudentClient) QueryClass(s *Student) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, student.ClassTable, student.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentClient) Hooks() []Hook {
	return c.hooks.Student
}

// Interceptors returns the client interceptors.
func (c *StudentClient) Interceptors() []Interceptor {
	return c.inters.Student
}

func (c *StudentClient) mutate(ctx context.Context, m *StudentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Student mutation op: %q", m.Op())
	}
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subject.Intercept(f(g(h())))`.
func (c *SubjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subject = append(c.inters.Subject, interceptors...)
}

// Create returns a builder for creating a Subject entity.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id string) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectClient) DeleteOneID(id string) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubject},
		inters: c.Interceptors(),
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id string) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id string) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a Subject.
func (c *SubjectClient) QueryClasses(s *Subject) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.ClassesTable, subject.ClassesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	return c.hooks.Subject
}

// Interceptors returns the client interceptors.
func (c *SubjectClient) Interceptors() []Interceptor {
	return c.inters.Subject
}

func (c *SubjectClient) mutate(ctx context.Context, m *SubjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subject mutation op: %q", m.Op())
	}
}

// SubscriptionClient is a client for the Subscription schema.
type SubscriptionClient struct {
	config
}

// NewSubscriptionClient returns a client for the Subscription from the given config.
func NewSubscriptionClient(c config) *SubscriptionClient {
	return &SubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscription.Hooks(f(g(h())))`.
func (c *SubscriptionClient) Use(hooks ...Hook) {
	c.hooks.Subscription = append(c.hooks.Subscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscription.Intercept(f(g(h())))`.
func (c *SubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscription = append(c.inters.Subscription, interceptors...)
}

// Create returns a builder for creating a Subscription entity.
func (c *SubscriptionClient) Create() *SubscriptionCreate {
	mutation := newSubscriptionMutation(c.config, OpCreate)
	return &SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscription entities.
func (c *SubscriptionClient) CreateBulk(builders ...*SubscriptionCreate) *SubscriptionCreateBulk {
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscription.
func (c *SubscriptionClient) Update() *SubscriptionUpdate {
	mutation := newSubscriptionMutation(c.config, OpUpdate)
	return &SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionClient) UpdateOne(s *Subscription) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscription(s))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionClient) UpdateOneID(id string) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscriptionID(id))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscription.
func (c *SubscriptionClient) Delete() *SubscriptionDelete {
	mutation := newSubscriptionMutation(c.config, OpDelete)
	return &SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionClient) DeleteOne(s *Subscription) *SubscriptionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionClient) DeleteOneID(id string) *SubscriptionDeleteOne {
	builder := c.Delete().Where(subscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionDeleteOne{builder}
}

// Query returns a query builder for Subscription.
func (c *SubscriptionClient) Query() *SubscriptionQuery {
	return &SubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscription entity by its id.
func (c *SubscriptionClient) Get(ctx context.Context, id string) (*Subscription, error) {
	return c.Query().Where(subscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionClient) GetX(ctx context.Context, id string) *Subscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a Subscription.
func (c *SubscriptionClient) QueryTeacher(s *Subscription) *TeacherQuery {
	query := (&TeacherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscription.TeacherTable, subscription.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryYear queries the year edge of a Subscription.
func (c *SubscriptionClient) QueryYear(s *Subscription) *YearQuery {
	query := (&YearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(year.Table, year.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscription.YearTable, subscription.YearColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionClient) Hooks() []Hook {
	return c.hooks.Subscription
}

// Interceptors returns the client interceptors.
func (c *SubscriptionClient) Interceptors() []Interceptor {
	return c.inters.Subscription
}

func (c *SubscriptionClient) mutate(ctx context.Context, m *SubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscription mutation op: %q", m.Op())
	}
}

// TeacherClient is a client for the Teacher schema.
type TeacherClient struct {
	config
}

// NewTeacherClient returns a client for the Teacher from the given config.
func NewTeacherClient(c config) *TeacherClient {
	return &TeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teacher.Hooks(f(g(h())))`.
func (c *TeacherClient) Use(hooks ...Hook) {
	c.hooks.Teacher = append(c.hooks.Teacher, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teacher.Intercept(f(g(h())))`.
func (c *TeacherClient) Intercept(interceptors ...Interceptor) {
	c.inters.Teacher = append(c.inters.Teacher, interceptors...)
}

// Create returns a builder for creating a Teacher entity.
func (c *TeacherClient) Create() *TeacherCreate {
	mutation := newTeacherMutation(c.config, OpCreate)
	return &TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teacher entities.
func (c *TeacherClient) CreateBulk(builders ...*TeacherCreate) *TeacherCreateBulk {
	return &TeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teacher.
func (c *TeacherClient) Update() *TeacherUpdate {
	mutation := newTeacherMutation(c.config, OpUpdate)
	return &TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeacherClient) UpdateOne(t *Teacher) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacher(t))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeacherClient) UpdateOneID(id string) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacherID(id))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teacher.
func (c *TeacherClient) Delete() *TeacherDelete {
	mutation := newTeacherMutation(c.config, OpDelete)
	return &TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeacherClient) DeleteOne(t *Teacher) *TeacherDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeacherClient) DeleteOneID(id string) *TeacherDeleteOne {
	builder := c.Delete().Where(teacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeacherDeleteOne{builder}
}

// Query returns a query builder for Teacher.
func (c *TeacherClient) Query() *TeacherQuery {
	return &TeacherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeacher},
		inters: c.Interceptors(),
	}
}

// Get returns a Teacher entity by its id.
func (c *TeacherClient) Get(ctx context.Context, id string) (*Teacher, error) {
	return c.Query().Where(teacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeacherClient) GetX(ctx context.Context, id string) *Teacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a Teacher.
func (c *TeacherClient) QueryClasses(t *Teacher) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.ClassesTable, teacher.ClassesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActions queries the actions edge of a Teacher.
func (c *TeacherClient) QueryActions(t *Teacher) *AdminActionQuery {
	query := (&AdminActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(adminaction.Table, adminaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.ActionsTable, teacher.ActionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptions queries the subscriptions edge of a Teacher.
func (c *TeacherClient) QuerySubscriptions(t *Teacher) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.SubscriptionsTable, teacher.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeacherClient) Hooks() []Hook {
	return c.hooks.Teacher
}

// Interceptors returns the client interceptors.
func (c *TeacherClient) Interceptors() []Interceptor {
	return c.inters.Teacher
}

func (c *TeacherClient) mutate(ctx context.Context, m *TeacherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Teacher mutation op: %q", m.Op())
	}
}

// YearClient is a client for the Year schema.
type YearClient struct {
	config
}

// NewYearClient returns a client for the Year from the given config.
func NewYearClient(c config) *YearClient {
	return &YearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `year.Hooks(f(g(h())))`.
func (c *YearClient) Use(hooks ...Hook) {
	c.hooks.Year = append(c.hooks.Year, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `year.Intercept(f(g(h())))`.
func (c *YearClient) Intercept(interceptors ...Interceptor) {
	c.inters.Year = append(c.inters.Year, interceptors...)
}

// Create returns a builder for creating a Year entity.
func (c *YearClient) Create() *YearCreate {
	mutation := newYearMutation(c.config, OpCreate)
	return &YearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Year entities.
func (c *YearClient) CreateBulk(builders ...*YearCreate) *YearCreateBulk {
	return &YearCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Year.
func (c *YearClient) Update() *YearUpdate {
	mutation := newYearMutation(c.config, OpUpdate)
	return &YearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *YearClient) UpdateOne(y *Year) *YearUpdateOne {
	mutation := newYearMutation(c.config, OpUpdateOne, withYear(y))
	return &YearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *YearClient) UpdateOneID(id string) *YearUpdateOne {
	mutation := newYearMutation(c.config, OpUpdateOne, withYearID(id))
	return &YearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Year.
func (c *YearClient) Delete() *YearDelete {
	mutation := newYearMutation(c.config, OpDelete)
	return &YearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *YearClient) DeleteOne(y *Year) *YearDeleteOne {
	return c.DeleteOneID(y.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *YearClient) DeleteOneID(id string) *YearDeleteOne {
	builder := c.Delete().Where(year.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &YearDeleteOne{builder}
}

// Query returns a query builder for Year.
func (c *YearClient) Query() *YearQuery {
	return &YearQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeYear},
		inters: c.Interceptors(),
	}
}

// Get returns a Year entity by its id.
func (c *YearClient) Get(ctx context.Context, id string) (*Year, error) {
	return c.Query().Where(year.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *YearClient) GetX(ctx context.Context, id string) *Year {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClasses queries the classes edge of a Year.
func (c *YearClient) QueryClasses(y *Year) *ClassQuery {
	query := (&ClassClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := y.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, id),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.ClassesTable, year.ClassesColumn),
		)
		fromV = sqlgraph.Neighbors(y.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeriods queries the periods edge of a Year.
func (c *YearClient) QueryPeriods(y *Year) *PeriodQuery {
	query := (&PeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := y.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, id),
			sqlgraph.To(period.Table, period.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.PeriodsTable, year.PeriodsColumn),
		)
		fromV = sqlgraph.Neighbors(y.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAreas queries the areas edge of a Year.
func (c *YearClient) QueryAreas(y *Year) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := y.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.AreasTable, year.AreasColumn),
		)
		fromV = sqlgraph.Neighbors(y.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptions queries the subscriptions edge of a Year.
func (c *YearClient) QuerySubscriptions(y *Year) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := y.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.SubscriptionsTable, year.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(y.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *YearClient) Hooks() []Hook {
	return c.hooks.Year
}

// Interceptors returns the client interceptors.
func (c *YearClient) Interceptors() []Interceptor {
	return c.inters.Year
}

func (c *YearClient) mutate(ctx context.Context, m *YearMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&YearCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&YearUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&YearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&YearDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Year mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Activity, AdminAction, AppError, Area, Attendance, AttendanceDay, Class,
		ClassPeriod, Dpto, Grade, Municipio, Period, Provincia, School, Score, Student,
		Subject, Subscription, Teacher, Year []ent.Hook
	}
	inters struct {
		Activity, AdminAction, AppError, Area, Attendance, AttendanceDay, Class,
		ClassPeriod, Dpto, Grade, Municipio, Period, Provincia, School, Score, Student,
		Subject, Subscription, Teacher, Year []ent.Interceptor
	}
)
