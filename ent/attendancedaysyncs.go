// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/attendancedaysyncs"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// AttendanceDaySyncs is the model entity for the AttendanceDaySyncs schema.
type AttendanceDaySyncs struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// LastSyncID holds the value of the "last_sync_id" field.
	LastSyncID string `json:"last_sync_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceDaySyncsQuery when eager-loading is set.
	Edges                        AttendanceDaySyncsEdges `json:"edges"`
	teacher_attendance_day_syncs *string
}

// AttendanceDaySyncsEdges holds the relations/edges for other nodes in the graph.
type AttendanceDaySyncsEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceDaySyncsEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttendanceDaySyncs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendancedaysyncs.FieldID, attendancedaysyncs.FieldLastSyncID:
			values[i] = new(sql.NullString)
		case attendancedaysyncs.ForeignKeys[0]: // teacher_attendance_day_syncs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AttendanceDaySyncs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttendanceDaySyncs fields.
func (ads *AttendanceDaySyncs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendancedaysyncs.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ads.ID = value.String
			}
		case attendancedaysyncs.FieldLastSyncID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_sync_id", values[i])
			} else if value.Valid {
				ads.LastSyncID = value.String
			}
		case attendancedaysyncs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_attendance_day_syncs", values[i])
			} else if value.Valid {
				ads.teacher_attendance_day_syncs = new(string)
				*ads.teacher_attendance_day_syncs = value.String
			}
		}
	}
	return nil
}

// QueryTeacher queries the "teacher" edge of the AttendanceDaySyncs entity.
func (ads *AttendanceDaySyncs) QueryTeacher() *TeacherQuery {
	return (&AttendanceDaySyncsClient{config: ads.config}).QueryTeacher(ads)
}

// Update returns a builder for updating this AttendanceDaySyncs.
// Note that you need to call AttendanceDaySyncs.Unwrap() before calling this method if this AttendanceDaySyncs
// was returned from a transaction, and the transaction was committed or rolled back.
func (ads *AttendanceDaySyncs) Update() *AttendanceDaySyncsUpdateOne {
	return (&AttendanceDaySyncsClient{config: ads.config}).UpdateOne(ads)
}

// Unwrap unwraps the AttendanceDaySyncs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ads *AttendanceDaySyncs) Unwrap() *AttendanceDaySyncs {
	_tx, ok := ads.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttendanceDaySyncs is not a transactional entity")
	}
	ads.config.driver = _tx.drv
	return ads
}

// String implements the fmt.Stringer.
func (ads *AttendanceDaySyncs) String() string {
	var builder strings.Builder
	builder.WriteString("AttendanceDaySyncs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ads.ID))
	builder.WriteString("last_sync_id=")
	builder.WriteString(ads.LastSyncID)
	builder.WriteByte(')')
	return builder.String()
}

// AttendanceDaySyncsSlice is a parsable slice of AttendanceDaySyncs.
type AttendanceDaySyncsSlice []*AttendanceDaySyncs

func (ads AttendanceDaySyncsSlice) config(cfg config) {
	for _i := range ads {
		ads[_i].config = cfg
	}
}
