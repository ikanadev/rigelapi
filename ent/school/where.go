// Code generated by ent, DO NOT EDIT.

package school

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vmkevv/rigelapi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.School {
	return predicate.School(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.School {
	return predicate.School(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldName, v))
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLat, v))
}

// Lon applies equality check predicate on the "lon" field. It's identical to LonEQ.
func Lon(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLon, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldName, v))
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLat, v))
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldLat, v))
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldLat, vs...))
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldLat, vs...))
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldLat, v))
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldLat, v))
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldLat, v))
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldLat, v))
}

// LatContains applies the Contains predicate on the "lat" field.
func LatContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldLat, v))
}

// LatHasPrefix applies the HasPrefix predicate on the "lat" field.
func LatHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldLat, v))
}

// LatHasSuffix applies the HasSuffix predicate on the "lat" field.
func LatHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldLat, v))
}

// LatEqualFold applies the EqualFold predicate on the "lat" field.
func LatEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldLat, v))
}

// LatContainsFold applies the ContainsFold predicate on the "lat" field.
func LatContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldLat, v))
}

// LonEQ applies the EQ predicate on the "lon" field.
func LonEQ(v string) predicate.School {
	return predicate.School(sql.FieldEQ(FieldLon, v))
}

// LonNEQ applies the NEQ predicate on the "lon" field.
func LonNEQ(v string) predicate.School {
	return predicate.School(sql.FieldNEQ(FieldLon, v))
}

// LonIn applies the In predicate on the "lon" field.
func LonIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldIn(FieldLon, vs...))
}

// LonNotIn applies the NotIn predicate on the "lon" field.
func LonNotIn(vs ...string) predicate.School {
	return predicate.School(sql.FieldNotIn(FieldLon, vs...))
}

// LonGT applies the GT predicate on the "lon" field.
func LonGT(v string) predicate.School {
	return predicate.School(sql.FieldGT(FieldLon, v))
}

// LonGTE applies the GTE predicate on the "lon" field.
func LonGTE(v string) predicate.School {
	return predicate.School(sql.FieldGTE(FieldLon, v))
}

// LonLT applies the LT predicate on the "lon" field.
func LonLT(v string) predicate.School {
	return predicate.School(sql.FieldLT(FieldLon, v))
}

// LonLTE applies the LTE predicate on the "lon" field.
func LonLTE(v string) predicate.School {
	return predicate.School(sql.FieldLTE(FieldLon, v))
}

// LonContains applies the Contains predicate on the "lon" field.
func LonContains(v string) predicate.School {
	return predicate.School(sql.FieldContains(FieldLon, v))
}

// LonHasPrefix applies the HasPrefix predicate on the "lon" field.
func LonHasPrefix(v string) predicate.School {
	return predicate.School(sql.FieldHasPrefix(FieldLon, v))
}

// LonHasSuffix applies the HasSuffix predicate on the "lon" field.
func LonHasSuffix(v string) predicate.School {
	return predicate.School(sql.FieldHasSuffix(FieldLon, v))
}

// LonEqualFold applies the EqualFold predicate on the "lon" field.
func LonEqualFold(v string) predicate.School {
	return predicate.School(sql.FieldEqualFold(FieldLon, v))
}

// LonContainsFold applies the ContainsFold predicate on the "lon" field.
func LonContainsFold(v string) predicate.School {
	return predicate.School(sql.FieldContainsFold(FieldLon, v))
}

// HasClasses applies the HasEdge predicate on the "classes" edge.
func HasClasses() predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassesTable, ClassesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassesWith applies the HasEdge predicate on the "classes" edge with a given conditions (other predicates).
func HasClassesWith(preds ...predicate.Class) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := newClassesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMunicipio applies the HasEdge predicate on the "municipio" edge.
func HasMunicipio() predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MunicipioTable, MunicipioColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMunicipioWith applies the HasEdge predicate on the "municipio" edge with a given conditions (other predicates).
func HasMunicipioWith(preds ...predicate.Municipio) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := newMunicipioStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		p(s.Not())
	})
}
