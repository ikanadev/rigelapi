// Code generated by ent, DO NOT EDIT.

package school

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the school type in the database.
	Label = "school"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLon holds the string denoting the lon field in the database.
	FieldLon = "lon"
	// EdgeClasses holds the string denoting the classes edge name in mutations.
	EdgeClasses = "classes"
	// EdgeMunicipio holds the string denoting the municipio edge name in mutations.
	EdgeMunicipio = "municipio"
	// Table holds the table name of the school in the database.
	Table = "schools"
	// ClassesTable is the table that holds the classes relation/edge.
	ClassesTable = "classes"
	// ClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassesInverseTable = "classes"
	// ClassesColumn is the table column denoting the classes relation/edge.
	ClassesColumn = "school_classes"
	// MunicipioTable is the table that holds the municipio relation/edge.
	MunicipioTable = "schools"
	// MunicipioInverseTable is the table name for the Municipio entity.
	// It exists in this package in order to avoid circular dependency with the "municipio" package.
	MunicipioInverseTable = "municipios"
	// MunicipioColumn is the table column denoting the municipio relation/edge.
	MunicipioColumn = "municipio_schools"
)

// Columns holds all SQL columns for school fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLat,
	FieldLon,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "schools"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"municipio_schools",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the School queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByLon orders the results by the lon field.
func ByLon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLon, opts...).ToFunc()
}

// ByClassesCount orders the results by classes count.
func ByClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassesStep(), opts...)
	}
}

// ByClasses orders the results by classes terms.
func ByClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMunicipioField orders the results by municipio field.
func ByMunicipioField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMunicipioStep(), sql.OrderByField(field, opts...))
	}
}
func newClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassesTable, ClassesColumn),
	)
}
func newMunicipioStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MunicipioInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MunicipioTable, MunicipioColumn),
	)
}
