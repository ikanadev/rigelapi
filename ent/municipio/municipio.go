// Code generated by ent, DO NOT EDIT.

package municipio

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the municipio type in the database.
	Label = "municipio"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSchools holds the string denoting the schools edge name in mutations.
	EdgeSchools = "schools"
	// EdgeProvincia holds the string denoting the provincia edge name in mutations.
	EdgeProvincia = "provincia"
	// Table holds the table name of the municipio in the database.
	Table = "municipios"
	// SchoolsTable is the table that holds the schools relation/edge.
	SchoolsTable = "schools"
	// SchoolsInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolsInverseTable = "schools"
	// SchoolsColumn is the table column denoting the schools relation/edge.
	SchoolsColumn = "municipio_schools"
	// ProvinciaTable is the table that holds the provincia relation/edge.
	ProvinciaTable = "municipios"
	// ProvinciaInverseTable is the table name for the Provincia entity.
	// It exists in this package in order to avoid circular dependency with the "provincia" package.
	ProvinciaInverseTable = "provincia"
	// ProvinciaColumn is the table column denoting the provincia relation/edge.
	ProvinciaColumn = "provincia_municipios"
)

// Columns holds all SQL columns for municipio fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "municipios"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provincia_municipios",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Municipio queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySchoolsCount orders the results by schools count.
func BySchoolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSchoolsStep(), opts...)
	}
}

// BySchools orders the results by schools terms.
func BySchools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchoolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProvinciaField orders the results by provincia field.
func ByProvinciaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvinciaStep(), sql.OrderByField(field, opts...))
	}
}
func newSchoolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchoolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SchoolsTable, SchoolsColumn),
	)
}
func newProvinciaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvinciaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProvinciaTable, ProvinciaColumn),
	)
}
