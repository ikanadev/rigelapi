// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/activity"
	"github.com/vmkevv/rigelapi/ent/score"
	"github.com/vmkevv/rigelapi/ent/student"
)

// Score is the model entity for the Score schema.
type Score struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScoreQuery when eager-loading is set.
	Edges           ScoreEdges `json:"edges"`
	activity_scores *string
	student_scores  *string
	selectValues    sql.SelectValues
}

// ScoreEdges holds the relations/edges for other nodes in the graph.
type ScoreEdges struct {
	// Activity holds the value of the activity edge.
	Activity *Activity `json:"activity,omitempty"`
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoreEdges) ActivityOrErr() (*Activity, error) {
	if e.loadedTypes[0] {
		if e.Activity == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: activity.Label}
		}
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoreEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[1] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Score) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case score.FieldPoints:
			values[i] = new(sql.NullInt64)
		case score.FieldID:
			values[i] = new(sql.NullString)
		case score.ForeignKeys[0]: // activity_scores
			values[i] = new(sql.NullString)
		case score.ForeignKeys[1]: // student_scores
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Score fields.
func (s *Score) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case score.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case score.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				s.Points = int(value.Int64)
			}
		case score.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_scores", values[i])
			} else if value.Valid {
				s.activity_scores = new(string)
				*s.activity_scores = value.String
			}
		case score.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_scores", values[i])
			} else if value.Valid {
				s.student_scores = new(string)
				*s.student_scores = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Score.
// This includes values selected through modifiers, order, etc.
func (s *Score) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryActivity queries the "activity" edge of the Score entity.
func (s *Score) QueryActivity() *ActivityQuery {
	return NewScoreClient(s.config).QueryActivity(s)
}

// QueryStudent queries the "student" edge of the Score entity.
func (s *Score) QueryStudent() *StudentQuery {
	return NewScoreClient(s.config).QueryStudent(s)
}

// Update returns a builder for updating this Score.
// Note that you need to call Score.Unwrap() before calling this method if this Score
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Score) Update() *ScoreUpdateOne {
	return NewScoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Score entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Score) Unwrap() *Score {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Score is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Score) String() string {
	var builder strings.Builder
	builder.WriteString("Score(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", s.Points))
	builder.WriteByte(')')
	return builder.String()
}

// Scores is a parsable slice of Score.
type Scores []*Score
