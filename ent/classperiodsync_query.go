// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/classperiodsync"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// ClassPeriodSyncQuery is the builder for querying ClassPeriodSync entities.
type ClassPeriodSyncQuery struct {
	config
	limit       *int
	offset      *int
	unique      *bool
	order       []OrderFunc
	fields      []string
	predicates  []predicate.ClassPeriodSync
	withTeacher *TeacherQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassPeriodSyncQuery builder.
func (cpsq *ClassPeriodSyncQuery) Where(ps ...predicate.ClassPeriodSync) *ClassPeriodSyncQuery {
	cpsq.predicates = append(cpsq.predicates, ps...)
	return cpsq
}

// Limit adds a limit step to the query.
func (cpsq *ClassPeriodSyncQuery) Limit(limit int) *ClassPeriodSyncQuery {
	cpsq.limit = &limit
	return cpsq
}

// Offset adds an offset step to the query.
func (cpsq *ClassPeriodSyncQuery) Offset(offset int) *ClassPeriodSyncQuery {
	cpsq.offset = &offset
	return cpsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cpsq *ClassPeriodSyncQuery) Unique(unique bool) *ClassPeriodSyncQuery {
	cpsq.unique = &unique
	return cpsq
}

// Order adds an order step to the query.
func (cpsq *ClassPeriodSyncQuery) Order(o ...OrderFunc) *ClassPeriodSyncQuery {
	cpsq.order = append(cpsq.order, o...)
	return cpsq
}

// QueryTeacher chains the current query on the "teacher" edge.
func (cpsq *ClassPeriodSyncQuery) QueryTeacher() *TeacherQuery {
	query := &TeacherQuery{config: cpsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cpsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cpsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(classperiodsync.Table, classperiodsync.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, classperiodsync.TeacherTable, classperiodsync.TeacherColumn),
		)
		fromU = sqlgraph.SetNeighbors(cpsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ClassPeriodSync entity from the query.
// Returns a *NotFoundError when no ClassPeriodSync was found.
func (cpsq *ClassPeriodSyncQuery) First(ctx context.Context) (*ClassPeriodSync, error) {
	nodes, err := cpsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{classperiodsync.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) FirstX(ctx context.Context) *ClassPeriodSync {
	node, err := cpsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ClassPeriodSync ID from the query.
// Returns a *NotFoundError when no ClassPeriodSync ID was found.
func (cpsq *ClassPeriodSyncQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cpsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{classperiodsync.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) FirstIDX(ctx context.Context) string {
	id, err := cpsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ClassPeriodSync entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ClassPeriodSync entity is found.
// Returns a *NotFoundError when no ClassPeriodSync entities are found.
func (cpsq *ClassPeriodSyncQuery) Only(ctx context.Context) (*ClassPeriodSync, error) {
	nodes, err := cpsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{classperiodsync.Label}
	default:
		return nil, &NotSingularError{classperiodsync.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) OnlyX(ctx context.Context) *ClassPeriodSync {
	node, err := cpsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ClassPeriodSync ID in the query.
// Returns a *NotSingularError when more than one ClassPeriodSync ID is found.
// Returns a *NotFoundError when no entities are found.
func (cpsq *ClassPeriodSyncQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = cpsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{classperiodsync.Label}
	default:
		err = &NotSingularError{classperiodsync.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) OnlyIDX(ctx context.Context) string {
	id, err := cpsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ClassPeriodSyncs.
func (cpsq *ClassPeriodSyncQuery) All(ctx context.Context) ([]*ClassPeriodSync, error) {
	if err := cpsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cpsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) AllX(ctx context.Context) []*ClassPeriodSync {
	nodes, err := cpsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ClassPeriodSync IDs.
func (cpsq *ClassPeriodSyncQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := cpsq.Select(classperiodsync.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) IDsX(ctx context.Context) []string {
	ids, err := cpsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cpsq *ClassPeriodSyncQuery) Count(ctx context.Context) (int, error) {
	if err := cpsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cpsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) CountX(ctx context.Context) int {
	count, err := cpsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cpsq *ClassPeriodSyncQuery) Exist(ctx context.Context) (bool, error) {
	if err := cpsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cpsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cpsq *ClassPeriodSyncQuery) ExistX(ctx context.Context) bool {
	exist, err := cpsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassPeriodSyncQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cpsq *ClassPeriodSyncQuery) Clone() *ClassPeriodSyncQuery {
	if cpsq == nil {
		return nil
	}
	return &ClassPeriodSyncQuery{
		config:      cpsq.config,
		limit:       cpsq.limit,
		offset:      cpsq.offset,
		order:       append([]OrderFunc{}, cpsq.order...),
		predicates:  append([]predicate.ClassPeriodSync{}, cpsq.predicates...),
		withTeacher: cpsq.withTeacher.Clone(),
		// clone intermediate query.
		sql:    cpsq.sql.Clone(),
		path:   cpsq.path,
		unique: cpsq.unique,
	}
}

// WithTeacher tells the query-builder to eager-load the nodes that are connected to
// the "teacher" edge. The optional arguments are used to configure the query builder of the edge.
func (cpsq *ClassPeriodSyncQuery) WithTeacher(opts ...func(*TeacherQuery)) *ClassPeriodSyncQuery {
	query := &TeacherQuery{config: cpsq.config}
	for _, opt := range opts {
		opt(query)
	}
	cpsq.withTeacher = query
	return cpsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastSyncID string `json:"last_sync_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClassPeriodSync.Query().
//		GroupBy(classperiodsync.FieldLastSyncID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cpsq *ClassPeriodSyncQuery) GroupBy(field string, fields ...string) *ClassPeriodSyncGroupBy {
	grbuild := &ClassPeriodSyncGroupBy{config: cpsq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cpsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cpsq.sqlQuery(ctx), nil
	}
	grbuild.label = classperiodsync.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastSyncID string `json:"last_sync_id,omitempty"`
//	}
//
//	client.ClassPeriodSync.Query().
//		Select(classperiodsync.FieldLastSyncID).
//		Scan(ctx, &v)
func (cpsq *ClassPeriodSyncQuery) Select(fields ...string) *ClassPeriodSyncSelect {
	cpsq.fields = append(cpsq.fields, fields...)
	selbuild := &ClassPeriodSyncSelect{ClassPeriodSyncQuery: cpsq}
	selbuild.label = classperiodsync.Label
	selbuild.flds, selbuild.scan = &cpsq.fields, selbuild.Scan
	return selbuild
}

func (cpsq *ClassPeriodSyncQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cpsq.fields {
		if !classperiodsync.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cpsq.path != nil {
		prev, err := cpsq.path(ctx)
		if err != nil {
			return err
		}
		cpsq.sql = prev
	}
	return nil
}

func (cpsq *ClassPeriodSyncQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ClassPeriodSync, error) {
	var (
		nodes       = []*ClassPeriodSync{}
		withFKs     = cpsq.withFKs
		_spec       = cpsq.querySpec()
		loadedTypes = [1]bool{
			cpsq.withTeacher != nil,
		}
	)
	if cpsq.withTeacher != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, classperiodsync.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ClassPeriodSync).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ClassPeriodSync{config: cpsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cpsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cpsq.withTeacher; query != nil {
		if err := cpsq.loadTeacher(ctx, query, nodes, nil,
			func(n *ClassPeriodSync, e *Teacher) { n.Edges.Teacher = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cpsq *ClassPeriodSyncQuery) loadTeacher(ctx context.Context, query *TeacherQuery, nodes []*ClassPeriodSync, init func(*ClassPeriodSync), assign func(*ClassPeriodSync, *Teacher)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ClassPeriodSync)
	for i := range nodes {
		if nodes[i].teacher_class_period_syncs == nil {
			continue
		}
		fk := *nodes[i].teacher_class_period_syncs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(teacher.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "teacher_class_period_syncs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cpsq *ClassPeriodSyncQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cpsq.querySpec()
	_spec.Node.Columns = cpsq.fields
	if len(cpsq.fields) > 0 {
		_spec.Unique = cpsq.unique != nil && *cpsq.unique
	}
	return sqlgraph.CountNodes(ctx, cpsq.driver, _spec)
}

func (cpsq *ClassPeriodSyncQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cpsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cpsq *ClassPeriodSyncQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classperiodsync.Table,
			Columns: classperiodsync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: classperiodsync.FieldID,
			},
		},
		From:   cpsq.sql,
		Unique: true,
	}
	if unique := cpsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cpsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classperiodsync.FieldID)
		for i := range fields {
			if fields[i] != classperiodsync.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cpsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cpsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cpsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cpsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cpsq *ClassPeriodSyncQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cpsq.driver.Dialect())
	t1 := builder.Table(classperiodsync.Table)
	columns := cpsq.fields
	if len(columns) == 0 {
		columns = classperiodsync.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cpsq.sql != nil {
		selector = cpsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cpsq.unique != nil && *cpsq.unique {
		selector.Distinct()
	}
	for _, p := range cpsq.predicates {
		p(selector)
	}
	for _, p := range cpsq.order {
		p(selector)
	}
	if offset := cpsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cpsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassPeriodSyncGroupBy is the group-by builder for ClassPeriodSync entities.
type ClassPeriodSyncGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cpsgb *ClassPeriodSyncGroupBy) Aggregate(fns ...AggregateFunc) *ClassPeriodSyncGroupBy {
	cpsgb.fns = append(cpsgb.fns, fns...)
	return cpsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cpsgb *ClassPeriodSyncGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cpsgb.path(ctx)
	if err != nil {
		return err
	}
	cpsgb.sql = query
	return cpsgb.sqlScan(ctx, v)
}

func (cpsgb *ClassPeriodSyncGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cpsgb.fields {
		if !classperiodsync.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cpsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cpsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cpsgb *ClassPeriodSyncGroupBy) sqlQuery() *sql.Selector {
	selector := cpsgb.sql.Select()
	aggregation := make([]string, 0, len(cpsgb.fns))
	for _, fn := range cpsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cpsgb.fields)+len(cpsgb.fns))
		for _, f := range cpsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cpsgb.fields...)...)
}

// ClassPeriodSyncSelect is the builder for selecting fields of ClassPeriodSync entities.
type ClassPeriodSyncSelect struct {
	*ClassPeriodSyncQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cpss *ClassPeriodSyncSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cpss.prepareQuery(ctx); err != nil {
		return err
	}
	cpss.sql = cpss.ClassPeriodSyncQuery.sqlQuery(ctx)
	return cpss.sqlScan(ctx, v)
}

func (cpss *ClassPeriodSyncSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cpss.sql.Query()
	if err := cpss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
