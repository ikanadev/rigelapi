// Code generated by ent, DO NOT EDIT.

package attendanceday

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attendanceday type in the database.
	Label = "attendance_day"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDay holds the string denoting the day field in the database.
	FieldDay = "day"
	// EdgeAttendances holds the string denoting the attendances edge name in mutations.
	EdgeAttendances = "attendances"
	// EdgeClassPeriod holds the string denoting the classperiod edge name in mutations.
	EdgeClassPeriod = "classPeriod"
	// Table holds the table name of the attendanceday in the database.
	Table = "attendance_days"
	// AttendancesTable is the table that holds the attendances relation/edge.
	AttendancesTable = "attendances"
	// AttendancesInverseTable is the table name for the Attendance entity.
	// It exists in this package in order to avoid circular dependency with the "attendance" package.
	AttendancesInverseTable = "attendances"
	// AttendancesColumn is the table column denoting the attendances relation/edge.
	AttendancesColumn = "attendance_day_attendances"
	// ClassPeriodTable is the table that holds the classPeriod relation/edge.
	ClassPeriodTable = "attendance_days"
	// ClassPeriodInverseTable is the table name for the ClassPeriod entity.
	// It exists in this package in order to avoid circular dependency with the "classperiod" package.
	ClassPeriodInverseTable = "class_periods"
	// ClassPeriodColumn is the table column denoting the classPeriod relation/edge.
	ClassPeriodColumn = "class_period_attendance_days"
)

// Columns holds all SQL columns for attendanceday fields.
var Columns = []string{
	FieldID,
	FieldDay,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attendance_days"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"class_period_attendance_days",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AttendanceDay queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDay orders the results by the day field.
func ByDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDay, opts...).ToFunc()
}

// ByAttendancesCount orders the results by attendances count.
func ByAttendancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttendancesStep(), opts...)
	}
}

// ByAttendances orders the results by attendances terms.
func ByAttendances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttendancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClassPeriodField orders the results by classPeriod field.
func ByClassPeriodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassPeriodStep(), sql.OrderByField(field, opts...))
	}
}
func newAttendancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttendancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttendancesTable, AttendancesColumn),
	)
}
func newClassPeriodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassPeriodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassPeriodTable, ClassPeriodColumn),
	)
}
