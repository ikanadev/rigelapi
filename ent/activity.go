// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/activity"
	"github.com/vmkevv/rigelapi/ent/area"
	"github.com/vmkevv/rigelapi/ent/classperiod"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityQuery when eager-loading is set.
	Edges                   ActivityEdges `json:"edges"`
	area_activities         *string
	class_period_activities *string
	selectValues            sql.SelectValues
}

// ActivityEdges holds the relations/edges for other nodes in the graph.
type ActivityEdges struct {
	// Scores holds the value of the scores edge.
	Scores []*Score `json:"scores,omitempty"`
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// ClassPeriod holds the value of the classPeriod edge.
	ClassPeriod *ClassPeriod `json:"classPeriod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ScoresOrErr returns the Scores value or an error if the edge
// was not loaded in eager-loading.
func (e ActivityEdges) ScoresOrErr() ([]*Score, error) {
	if e.loadedTypes[0] {
		return e.Scores, nil
	}
	return nil, &NotLoadedError{edge: "scores"}
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) AreaOrErr() (*Area, error) {
	if e.loadedTypes[1] {
		if e.Area == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: area.Label}
		}
		return e.Area, nil
	}
	return nil, &NotLoadedError{edge: "area"}
}

// ClassPeriodOrErr returns the ClassPeriod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) ClassPeriodOrErr() (*ClassPeriod, error) {
	if e.loadedTypes[2] {
		if e.ClassPeriod == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: classperiod.Label}
		}
		return e.ClassPeriod, nil
	}
	return nil, &NotLoadedError{edge: "classPeriod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldID, activity.FieldName:
			values[i] = new(sql.NullString)
		case activity.FieldDate:
			values[i] = new(sql.NullTime)
		case activity.ForeignKeys[0]: // area_activities
			values[i] = new(sql.NullString)
		case activity.ForeignKeys[1]: // class_period_activities
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case activity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case activity.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				a.Date = value.Time
			}
		case activity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area_activities", values[i])
			} else if value.Valid {
				a.area_activities = new(string)
				*a.area_activities = value.String
			}
		case activity.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_period_activities", values[i])
			} else if value.Valid {
				a.class_period_activities = new(string)
				*a.class_period_activities = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Activity.
// This includes values selected through modifiers, order, etc.
func (a *Activity) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryScores queries the "scores" edge of the Activity entity.
func (a *Activity) QueryScores() *ScoreQuery {
	return NewActivityClient(a.config).QueryScores(a)
}

// QueryArea queries the "area" edge of the Activity entity.
func (a *Activity) QueryArea() *AreaQuery {
	return NewActivityClient(a.config).QueryArea(a)
}

// QueryClassPeriod queries the "classPeriod" edge of the Activity entity.
func (a *Activity) QueryClassPeriod() *ClassPeriodQuery {
	return NewActivityClient(a.config).QueryClassPeriod(a)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return NewActivityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(a.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity
