// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/adminaction"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// AdminAction is the model entity for the AdminAction schema.
type AdminAction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Info holds the value of the "info" field.
	Info string `json:"info,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminActionQuery when eager-loading is set.
	Edges           AdminActionEdges `json:"edges"`
	teacher_actions *string
	selectValues    sql.SelectValues
}

// AdminActionEdges holds the relations/edges for other nodes in the graph.
type AdminActionEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminActionEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminaction.FieldID, adminaction.FieldAction, adminaction.FieldInfo:
			values[i] = new(sql.NullString)
		case adminaction.ForeignKeys[0]: // teacher_actions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminAction fields.
func (aa *AdminAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aa.ID = value.String
			}
		case adminaction.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				aa.Action = value.String
			}
		case adminaction.FieldInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value.Valid {
				aa.Info = value.String
			}
		case adminaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher_actions", values[i])
			} else if value.Valid {
				aa.teacher_actions = new(string)
				*aa.teacher_actions = value.String
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminAction.
// This includes values selected through modifiers, order, etc.
func (aa *AdminAction) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// QueryTeacher queries the "teacher" edge of the AdminAction entity.
func (aa *AdminAction) QueryTeacher() *TeacherQuery {
	return NewAdminActionClient(aa.config).QueryTeacher(aa)
}

// Update returns a builder for updating this AdminAction.
// Note that you need to call AdminAction.Unwrap() before calling this method if this AdminAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AdminAction) Update() *AdminActionUpdateOne {
	return NewAdminActionClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AdminAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AdminAction) Unwrap() *AdminAction {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminAction is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AdminAction) String() string {
	var builder strings.Builder
	builder.WriteString("AdminAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("action=")
	builder.WriteString(aa.Action)
	builder.WriteString(", ")
	builder.WriteString("info=")
	builder.WriteString(aa.Info)
	builder.WriteByte(')')
	return builder.String()
}

// AdminActions is a parsable slice of AdminAction.
type AdminActions []*AdminAction
