// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/activity"
	"github.com/vmkevv/rigelapi/ent/area"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/year"
)

// AreaUpdate is the builder for updating Area entities.
type AreaUpdate struct {
	config
	hooks    []Hook
	mutation *AreaMutation
}

// Where appends a list predicates to the AreaUpdate builder.
func (au *AreaUpdate) Where(ps ...predicate.Area) *AreaUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AreaUpdate) SetName(s string) *AreaUpdate {
	au.mutation.SetName(s)
	return au
}

// SetPoints sets the "points" field.
func (au *AreaUpdate) SetPoints(i int) *AreaUpdate {
	au.mutation.ResetPoints()
	au.mutation.SetPoints(i)
	return au
}

// AddPoints adds i to the "points" field.
func (au *AreaUpdate) AddPoints(i int) *AreaUpdate {
	au.mutation.AddPoints(i)
	return au
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (au *AreaUpdate) AddActivityIDs(ids ...string) *AreaUpdate {
	au.mutation.AddActivityIDs(ids...)
	return au
}

// AddActivities adds the "activities" edges to the Activity entity.
func (au *AreaUpdate) AddActivities(a ...*Activity) *AreaUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddActivityIDs(ids...)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (au *AreaUpdate) SetYearID(id string) *AreaUpdate {
	au.mutation.SetYearID(id)
	return au
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (au *AreaUpdate) SetNillableYearID(id *string) *AreaUpdate {
	if id != nil {
		au = au.SetYearID(*id)
	}
	return au
}

// SetYear sets the "year" edge to the Year entity.
func (au *AreaUpdate) SetYear(y *Year) *AreaUpdate {
	return au.SetYearID(y.ID)
}

// Mutation returns the AreaMutation object of the builder.
func (au *AreaUpdate) Mutation() *AreaMutation {
	return au.mutation
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (au *AreaUpdate) ClearActivities() *AreaUpdate {
	au.mutation.ClearActivities()
	return au
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (au *AreaUpdate) RemoveActivityIDs(ids ...string) *AreaUpdate {
	au.mutation.RemoveActivityIDs(ids...)
	return au
}

// RemoveActivities removes "activities" edges to Activity entities.
func (au *AreaUpdate) RemoveActivities(a ...*Activity) *AreaUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveActivityIDs(ids...)
}

// ClearYear clears the "year" edge to the Year entity.
func (au *AreaUpdate) ClearYear() *AreaUpdate {
	au.mutation.ClearYear()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AreaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AreaUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AreaUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AreaUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Points(); ok {
		_spec.SetField(area.FieldPoints, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedPoints(); ok {
		_spec.AddField(area.FieldPoints, field.TypeInt, value)
	}
	if au.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !au.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.YearTable,
			Columns: []string{area.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.YearTable,
			Columns: []string{area.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AreaUpdateOne is the builder for updating a single Area entity.
type AreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaMutation
}

// SetName sets the "name" field.
func (auo *AreaUpdateOne) SetName(s string) *AreaUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetPoints sets the "points" field.
func (auo *AreaUpdateOne) SetPoints(i int) *AreaUpdateOne {
	auo.mutation.ResetPoints()
	auo.mutation.SetPoints(i)
	return auo
}

// AddPoints adds i to the "points" field.
func (auo *AreaUpdateOne) AddPoints(i int) *AreaUpdateOne {
	auo.mutation.AddPoints(i)
	return auo
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (auo *AreaUpdateOne) AddActivityIDs(ids ...string) *AreaUpdateOne {
	auo.mutation.AddActivityIDs(ids...)
	return auo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (auo *AreaUpdateOne) AddActivities(a ...*Activity) *AreaUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddActivityIDs(ids...)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (auo *AreaUpdateOne) SetYearID(id string) *AreaUpdateOne {
	auo.mutation.SetYearID(id)
	return auo
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableYearID(id *string) *AreaUpdateOne {
	if id != nil {
		auo = auo.SetYearID(*id)
	}
	return auo
}

// SetYear sets the "year" edge to the Year entity.
func (auo *AreaUpdateOne) SetYear(y *Year) *AreaUpdateOne {
	return auo.SetYearID(y.ID)
}

// Mutation returns the AreaMutation object of the builder.
func (auo *AreaUpdateOne) Mutation() *AreaMutation {
	return auo.mutation
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (auo *AreaUpdateOne) ClearActivities() *AreaUpdateOne {
	auo.mutation.ClearActivities()
	return auo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (auo *AreaUpdateOne) RemoveActivityIDs(ids ...string) *AreaUpdateOne {
	auo.mutation.RemoveActivityIDs(ids...)
	return auo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (auo *AreaUpdateOne) RemoveActivities(a ...*Activity) *AreaUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveActivityIDs(ids...)
}

// ClearYear clears the "year" edge to the Year entity.
func (auo *AreaUpdateOne) ClearYear() *AreaUpdateOne {
	auo.mutation.ClearYear()
	return auo
}

// Where appends a list predicates to the AreaUpdate builder.
func (auo *AreaUpdateOne) Where(ps ...predicate.Area) *AreaUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AreaUpdateOne) Select(field string, fields ...string) *AreaUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Area entity.
func (auo *AreaUpdateOne) Save(ctx context.Context) (*Area, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AreaUpdateOne) SaveX(ctx context.Context) *Area {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AreaUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AreaUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AreaUpdateOne) sqlSave(ctx context.Context) (_node *Area, err error) {
	_spec := sqlgraph.NewUpdateSpec(area.Table, area.Columns, sqlgraph.NewFieldSpec(area.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Area.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, area.FieldID)
		for _, f := range fields {
			if !area.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != area.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(area.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Points(); ok {
		_spec.SetField(area.FieldPoints, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedPoints(); ok {
		_spec.AddField(area.FieldPoints, field.TypeInt, value)
	}
	if auo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !auo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   area.ActivitiesTable,
			Columns: []string{area.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.YearTable,
			Columns: []string{area.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.YearTable,
			Columns: []string{area.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Area{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
