// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/grade"
	"github.com/vmkevv/rigelapi/ent/school"
	"github.com/vmkevv/rigelapi/ent/student"
	"github.com/vmkevv/rigelapi/ent/subject"
	"github.com/vmkevv/rigelapi/ent/teacher"
	"github.com/vmkevv/rigelapi/ent/year"
)

// ClassCreate is the builder for creating a Class entity.
type ClassCreate struct {
	config
	mutation *ClassMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetParallel sets the "parallel" field.
func (cc *ClassCreate) SetParallel(s string) *ClassCreate {
	cc.mutation.SetParallel(s)
	return cc
}

// SetID sets the "id" field.
func (cc *ClassCreate) SetID(s string) *ClassCreate {
	cc.mutation.SetID(s)
	return cc
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (cc *ClassCreate) AddStudentIDs(ids ...string) *ClassCreate {
	cc.mutation.AddStudentIDs(ids...)
	return cc
}

// AddStudents adds the "students" edges to the Student entity.
func (cc *ClassCreate) AddStudents(s ...*Student) *ClassCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddStudentIDs(ids...)
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (cc *ClassCreate) AddClassPeriodIDs(ids ...string) *ClassCreate {
	cc.mutation.AddClassPeriodIDs(ids...)
	return cc
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (cc *ClassCreate) AddClassPeriods(c ...*ClassPeriod) *ClassCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClassPeriodIDs(ids...)
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (cc *ClassCreate) SetSchoolID(id string) *ClassCreate {
	cc.mutation.SetSchoolID(id)
	return cc
}

// SetNillableSchoolID sets the "school" edge to the School entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableSchoolID(id *string) *ClassCreate {
	if id != nil {
		cc = cc.SetSchoolID(*id)
	}
	return cc
}

// SetSchool sets the "school" edge to the School entity.
func (cc *ClassCreate) SetSchool(s *School) *ClassCreate {
	return cc.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (cc *ClassCreate) SetTeacherID(id string) *ClassCreate {
	cc.mutation.SetTeacherID(id)
	return cc
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableTeacherID(id *string) *ClassCreate {
	if id != nil {
		cc = cc.SetTeacherID(*id)
	}
	return cc
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (cc *ClassCreate) SetTeacher(t *Teacher) *ClassCreate {
	return cc.SetTeacherID(t.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cc *ClassCreate) SetSubjectID(id string) *ClassCreate {
	cc.mutation.SetSubjectID(id)
	return cc
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableSubjectID(id *string) *ClassCreate {
	if id != nil {
		cc = cc.SetSubjectID(*id)
	}
	return cc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cc *ClassCreate) SetSubject(s *Subject) *ClassCreate {
	return cc.SetSubjectID(s.ID)
}

// SetGradeID sets the "grade" edge to the Grade entity by ID.
func (cc *ClassCreate) SetGradeID(id string) *ClassCreate {
	cc.mutation.SetGradeID(id)
	return cc
}

// SetNillableGradeID sets the "grade" edge to the Grade entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableGradeID(id *string) *ClassCreate {
	if id != nil {
		cc = cc.SetGradeID(*id)
	}
	return cc
}

// SetGrade sets the "grade" edge to the Grade entity.
func (cc *ClassCreate) SetGrade(g *Grade) *ClassCreate {
	return cc.SetGradeID(g.ID)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (cc *ClassCreate) SetYearID(id string) *ClassCreate {
	cc.mutation.SetYearID(id)
	return cc
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (cc *ClassCreate) SetNillableYearID(id *string) *ClassCreate {
	if id != nil {
		cc = cc.SetYearID(*id)
	}
	return cc
}

// SetYear sets the "year" edge to the Year entity.
func (cc *ClassCreate) SetYear(y *Year) *ClassCreate {
	return cc.SetYearID(y.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cc *ClassCreate) Mutation() *ClassMutation {
	return cc.mutation
}

// Save creates the Class in the database.
func (cc *ClassCreate) Save(ctx context.Context) (*Class, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClassCreate) SaveX(ctx context.Context) *Class {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClassCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClassCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClassCreate) check() error {
	if _, ok := cc.mutation.Parallel(); !ok {
		return &ValidationError{Name: "parallel", err: errors.New(`ent: missing required field "Class.parallel"`)}
	}
	return nil
}

func (cc *ClassCreate) sqlSave(ctx context.Context) (*Class, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Class.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClassCreate) createSpec() (*Class, *sqlgraph.CreateSpec) {
	var (
		_node = &Class{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(class.Table, sqlgraph.NewFieldSpec(class.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Parallel(); ok {
		_spec.SetField(class.FieldParallel, field.TypeString, value)
		_node.Parallel = value
	}
	if nodes := cc.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SchoolTable,
			Columns: []string{class.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(school.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.school_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.TeacherTable,
			Columns: []string{class.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teacher.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.teacher_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SubjectTable,
			Columns: []string{class.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GradeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.GradeTable,
			Columns: []string{class.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grade.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.grade_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.YearTable,
			Columns: []string{class.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.year_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Class.Create().
//		SetParallel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClassUpsert) {
//			SetParallel(v+v).
//		}).
//		Exec(ctx)
func (cc *ClassCreate) OnConflict(opts ...sql.ConflictOption) *ClassUpsertOne {
	cc.conflict = opts
	return &ClassUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Class.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ClassCreate) OnConflictColumns(columns ...string) *ClassUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ClassUpsertOne{
		create: cc,
	}
}

type (
	// ClassUpsertOne is the builder for "upsert"-ing
	//  one Class node.
	ClassUpsertOne struct {
		create *ClassCreate
	}

	// ClassUpsert is the "OnConflict" setter.
	ClassUpsert struct {
		*sql.UpdateSet
	}
)

// SetParallel sets the "parallel" field.
func (u *ClassUpsert) SetParallel(v string) *ClassUpsert {
	u.Set(class.FieldParallel, v)
	return u
}

// UpdateParallel sets the "parallel" field to the value that was provided on create.
func (u *ClassUpsert) UpdateParallel() *ClassUpsert {
	u.SetExcluded(class.FieldParallel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Class.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(class.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClassUpsertOne) UpdateNewValues() *ClassUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(class.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Class.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ClassUpsertOne) Ignore() *ClassUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClassUpsertOne) DoNothing() *ClassUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClassCreate.OnConflict
// documentation for more info.
func (u *ClassUpsertOne) Update(set func(*ClassUpsert)) *ClassUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClassUpsert{UpdateSet: update})
	}))
	return u
}

// SetParallel sets the "parallel" field.
func (u *ClassUpsertOne) SetParallel(v string) *ClassUpsertOne {
	return u.Update(func(s *ClassUpsert) {
		s.SetParallel(v)
	})
}

// UpdateParallel sets the "parallel" field to the value that was provided on create.
func (u *ClassUpsertOne) UpdateParallel() *ClassUpsertOne {
	return u.Update(func(s *ClassUpsert) {
		s.UpdateParallel()
	})
}

// Exec executes the query.
func (u *ClassUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClassCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClassUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ClassUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ClassUpsertOne.ID is not supported by MySQL driver. Use ClassUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ClassUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ClassCreateBulk is the builder for creating many Class entities in bulk.
type ClassCreateBulk struct {
	config
	builders []*ClassCreate
	conflict []sql.ConflictOption
}

// Save creates the Class entities in the database.
func (ccb *ClassCreateBulk) Save(ctx context.Context) ([]*Class, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Class, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClassCreateBulk) SaveX(ctx context.Context) []*Class {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClassCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClassCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Class.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClassUpsert) {
//			SetParallel(v+v).
//		}).
//		Exec(ctx)
func (ccb *ClassCreateBulk) OnConflict(opts ...sql.ConflictOption) *ClassUpsertBulk {
	ccb.conflict = opts
	return &ClassUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Class.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ClassCreateBulk) OnConflictColumns(columns ...string) *ClassUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ClassUpsertBulk{
		create: ccb,
	}
}

// ClassUpsertBulk is the builder for "upsert"-ing
// a bulk of Class nodes.
type ClassUpsertBulk struct {
	create *ClassCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Class.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(class.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClassUpsertBulk) UpdateNewValues() *ClassUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(class.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Class.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ClassUpsertBulk) Ignore() *ClassUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClassUpsertBulk) DoNothing() *ClassUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClassCreateBulk.OnConflict
// documentation for more info.
func (u *ClassUpsertBulk) Update(set func(*ClassUpsert)) *ClassUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClassUpsert{UpdateSet: update})
	}))
	return u
}

// SetParallel sets the "parallel" field.
func (u *ClassUpsertBulk) SetParallel(v string) *ClassUpsertBulk {
	return u.Update(func(s *ClassUpsert) {
		s.SetParallel(v)
	})
}

// UpdateParallel sets the "parallel" field to the value that was provided on create.
func (u *ClassUpsertBulk) UpdateParallel() *ClassUpsertBulk {
	return u.Update(func(s *ClassUpsert) {
		s.UpdateParallel()
	})
}

// Exec executes the query.
func (u *ClassUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ClassCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ClassCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClassUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
