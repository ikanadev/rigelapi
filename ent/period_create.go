// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/period"
	"github.com/vmkevv/rigelapi/ent/year"
)

// PeriodCreate is the builder for creating a Period entity.
type PeriodCreate struct {
	config
	mutation *PeriodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pc *PeriodCreate) SetName(s string) *PeriodCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PeriodCreate) SetID(s string) *PeriodCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (pc *PeriodCreate) AddClassPeriodIDs(ids ...string) *PeriodCreate {
	pc.mutation.AddClassPeriodIDs(ids...)
	return pc
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (pc *PeriodCreate) AddClassPeriods(c ...*ClassPeriod) *PeriodCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddClassPeriodIDs(ids...)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (pc *PeriodCreate) SetYearID(id string) *PeriodCreate {
	pc.mutation.SetYearID(id)
	return pc
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (pc *PeriodCreate) SetNillableYearID(id *string) *PeriodCreate {
	if id != nil {
		pc = pc.SetYearID(*id)
	}
	return pc
}

// SetYear sets the "year" edge to the Year entity.
func (pc *PeriodCreate) SetYear(y *Year) *PeriodCreate {
	return pc.SetYearID(y.ID)
}

// Mutation returns the PeriodMutation object of the builder.
func (pc *PeriodCreate) Mutation() *PeriodMutation {
	return pc.mutation
}

// Save creates the Period in the database.
func (pc *PeriodCreate) Save(ctx context.Context) (*Period, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PeriodCreate) SaveX(ctx context.Context) *Period {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PeriodCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PeriodCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PeriodCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Period.name"`)}
	}
	return nil
}

func (pc *PeriodCreate) sqlSave(ctx context.Context) (*Period, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Period.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PeriodCreate) createSpec() (*Period, *sqlgraph.CreateSpec) {
	var (
		_node = &Period{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(period.Table, sqlgraph.NewFieldSpec(period.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(period.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := pc.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   period.YearTable,
			Columns: []string{period.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.year_periods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Period.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pc *PeriodCreate) OnConflict(opts ...sql.ConflictOption) *PeriodUpsertOne {
	pc.conflict = opts
	return &PeriodUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Period.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PeriodCreate) OnConflictColumns(columns ...string) *PeriodUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PeriodUpsertOne{
		create: pc,
	}
}

type (
	// PeriodUpsertOne is the builder for "upsert"-ing
	//  one Period node.
	PeriodUpsertOne struct {
		create *PeriodCreate
	}

	// PeriodUpsert is the "OnConflict" setter.
	PeriodUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PeriodUpsert) SetName(v string) *PeriodUpsert {
	u.Set(period.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodUpsert) UpdateName() *PeriodUpsert {
	u.SetExcluded(period.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Period.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(period.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PeriodUpsertOne) UpdateNewValues() *PeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(period.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Period.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PeriodUpsertOne) Ignore() *PeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodUpsertOne) DoNothing() *PeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodCreate.OnConflict
// documentation for more info.
func (u *PeriodUpsertOne) Update(set func(*PeriodUpsert)) *PeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PeriodUpsertOne) SetName(v string) *PeriodUpsertOne {
	return u.Update(func(s *PeriodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodUpsertOne) UpdateName() *PeriodUpsertOne {
	return u.Update(func(s *PeriodUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PeriodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PeriodUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PeriodUpsertOne.ID is not supported by MySQL driver. Use PeriodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PeriodUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PeriodCreateBulk is the builder for creating many Period entities in bulk.
type PeriodCreateBulk struct {
	config
	builders []*PeriodCreate
	conflict []sql.ConflictOption
}

// Save creates the Period entities in the database.
func (pcb *PeriodCreateBulk) Save(ctx context.Context) ([]*Period, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Period, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeriodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PeriodCreateBulk) SaveX(ctx context.Context) []*Period {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PeriodCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PeriodCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Period.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pcb *PeriodCreateBulk) OnConflict(opts ...sql.ConflictOption) *PeriodUpsertBulk {
	pcb.conflict = opts
	return &PeriodUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Period.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PeriodCreateBulk) OnConflictColumns(columns ...string) *PeriodUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PeriodUpsertBulk{
		create: pcb,
	}
}

// PeriodUpsertBulk is the builder for "upsert"-ing
// a bulk of Period nodes.
type PeriodUpsertBulk struct {
	create *PeriodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Period.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(period.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PeriodUpsertBulk) UpdateNewValues() *PeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(period.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Period.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PeriodUpsertBulk) Ignore() *PeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodUpsertBulk) DoNothing() *PeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodCreateBulk.OnConflict
// documentation for more info.
func (u *PeriodUpsertBulk) Update(set func(*PeriodUpsert)) *PeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PeriodUpsertBulk) SetName(v string) *PeriodUpsertBulk {
	return u.Update(func(s *PeriodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodUpsertBulk) UpdateName() *PeriodUpsertBulk {
	return u.Update(func(s *PeriodUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PeriodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PeriodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
