// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/adminaction"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// AdminActionQuery is the builder for querying AdminAction entities.
type AdminActionQuery struct {
	config
	limit       *int
	offset      *int
	unique      *bool
	order       []OrderFunc
	fields      []string
	predicates  []predicate.AdminAction
	withTeacher *TeacherQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminActionQuery builder.
func (aaq *AdminActionQuery) Where(ps ...predicate.AdminAction) *AdminActionQuery {
	aaq.predicates = append(aaq.predicates, ps...)
	return aaq
}

// Limit adds a limit step to the query.
func (aaq *AdminActionQuery) Limit(limit int) *AdminActionQuery {
	aaq.limit = &limit
	return aaq
}

// Offset adds an offset step to the query.
func (aaq *AdminActionQuery) Offset(offset int) *AdminActionQuery {
	aaq.offset = &offset
	return aaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aaq *AdminActionQuery) Unique(unique bool) *AdminActionQuery {
	aaq.unique = &unique
	return aaq
}

// Order adds an order step to the query.
func (aaq *AdminActionQuery) Order(o ...OrderFunc) *AdminActionQuery {
	aaq.order = append(aaq.order, o...)
	return aaq
}

// QueryTeacher chains the current query on the "teacher" edge.
func (aaq *AdminActionQuery) QueryTeacher() *TeacherQuery {
	query := &TeacherQuery{config: aaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminaction.Table, adminaction.FieldID, selector),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminaction.TeacherTable, adminaction.TeacherColumn),
		)
		fromU = sqlgraph.SetNeighbors(aaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminAction entity from the query.
// Returns a *NotFoundError when no AdminAction was found.
func (aaq *AdminActionQuery) First(ctx context.Context) (*AdminAction, error) {
	nodes, err := aaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adminaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aaq *AdminActionQuery) FirstX(ctx context.Context) *AdminAction {
	node, err := aaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminAction ID from the query.
// Returns a *NotFoundError when no AdminAction ID was found.
func (aaq *AdminActionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = aaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adminaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aaq *AdminActionQuery) FirstIDX(ctx context.Context) string {
	id, err := aaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminAction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AdminAction entity is found.
// Returns a *NotFoundError when no AdminAction entities are found.
func (aaq *AdminActionQuery) Only(ctx context.Context) (*AdminAction, error) {
	nodes, err := aaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adminaction.Label}
	default:
		return nil, &NotSingularError{adminaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aaq *AdminActionQuery) OnlyX(ctx context.Context) *AdminAction {
	node, err := aaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminAction ID in the query.
// Returns a *NotSingularError when more than one AdminAction ID is found.
// Returns a *NotFoundError when no entities are found.
func (aaq *AdminActionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = aaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adminaction.Label}
	default:
		err = &NotSingularError{adminaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aaq *AdminActionQuery) OnlyIDX(ctx context.Context) string {
	id, err := aaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminActions.
func (aaq *AdminActionQuery) All(ctx context.Context) ([]*AdminAction, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aaq *AdminActionQuery) AllX(ctx context.Context) []*AdminAction {
	nodes, err := aaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminAction IDs.
func (aaq *AdminActionQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := aaq.Select(adminaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aaq *AdminActionQuery) IDsX(ctx context.Context) []string {
	ids, err := aaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aaq *AdminActionQuery) Count(ctx context.Context) (int, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aaq *AdminActionQuery) CountX(ctx context.Context) int {
	count, err := aaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aaq *AdminActionQuery) Exist(ctx context.Context) (bool, error) {
	if err := aaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aaq *AdminActionQuery) ExistX(ctx context.Context) bool {
	exist, err := aaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminActionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aaq *AdminActionQuery) Clone() *AdminActionQuery {
	if aaq == nil {
		return nil
	}
	return &AdminActionQuery{
		config:      aaq.config,
		limit:       aaq.limit,
		offset:      aaq.offset,
		order:       append([]OrderFunc{}, aaq.order...),
		predicates:  append([]predicate.AdminAction{}, aaq.predicates...),
		withTeacher: aaq.withTeacher.Clone(),
		// clone intermediate query.
		sql:    aaq.sql.Clone(),
		path:   aaq.path,
		unique: aaq.unique,
	}
}

// WithTeacher tells the query-builder to eager-load the nodes that are connected to
// the "teacher" edge. The optional arguments are used to configure the query builder of the edge.
func (aaq *AdminActionQuery) WithTeacher(opts ...func(*TeacherQuery)) *AdminActionQuery {
	query := &TeacherQuery{config: aaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aaq.withTeacher = query
	return aaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Action string `json:"action,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AdminAction.Query().
//		GroupBy(adminaction.FieldAction).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aaq *AdminActionQuery) GroupBy(field string, fields ...string) *AdminActionGroupBy {
	grbuild := &AdminActionGroupBy{config: aaq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aaq.sqlQuery(ctx), nil
	}
	grbuild.label = adminaction.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Action string `json:"action,omitempty"`
//	}
//
//	client.AdminAction.Query().
//		Select(adminaction.FieldAction).
//		Scan(ctx, &v)
func (aaq *AdminActionQuery) Select(fields ...string) *AdminActionSelect {
	aaq.fields = append(aaq.fields, fields...)
	selbuild := &AdminActionSelect{AdminActionQuery: aaq}
	selbuild.label = adminaction.Label
	selbuild.flds, selbuild.scan = &aaq.fields, selbuild.Scan
	return selbuild
}

func (aaq *AdminActionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aaq.fields {
		if !adminaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aaq.path != nil {
		prev, err := aaq.path(ctx)
		if err != nil {
			return err
		}
		aaq.sql = prev
	}
	return nil
}

func (aaq *AdminActionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AdminAction, error) {
	var (
		nodes       = []*AdminAction{}
		withFKs     = aaq.withFKs
		_spec       = aaq.querySpec()
		loadedTypes = [1]bool{
			aaq.withTeacher != nil,
		}
	)
	if aaq.withTeacher != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adminaction.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*AdminAction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &AdminAction{config: aaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aaq.withTeacher; query != nil {
		if err := aaq.loadTeacher(ctx, query, nodes, nil,
			func(n *AdminAction, e *Teacher) { n.Edges.Teacher = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aaq *AdminActionQuery) loadTeacher(ctx context.Context, query *TeacherQuery, nodes []*AdminAction, init func(*AdminAction), assign func(*AdminAction, *Teacher)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AdminAction)
	for i := range nodes {
		if nodes[i].teacher_actions == nil {
			continue
		}
		fk := *nodes[i].teacher_actions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(teacher.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "teacher_actions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aaq *AdminActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aaq.querySpec()
	_spec.Node.Columns = aaq.fields
	if len(aaq.fields) > 0 {
		_spec.Unique = aaq.unique != nil && *aaq.unique
	}
	return sqlgraph.CountNodes(ctx, aaq.driver, _spec)
}

func (aaq *AdminActionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aaq *AdminActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminaction.Table,
			Columns: adminaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: adminaction.FieldID,
			},
		},
		From:   aaq.sql,
		Unique: true,
	}
	if unique := aaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminaction.FieldID)
		for i := range fields {
			if fields[i] != adminaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aaq *AdminActionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aaq.driver.Dialect())
	t1 := builder.Table(adminaction.Table)
	columns := aaq.fields
	if len(columns) == 0 {
		columns = adminaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aaq.sql != nil {
		selector = aaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aaq.unique != nil && *aaq.unique {
		selector.Distinct()
	}
	for _, p := range aaq.predicates {
		p(selector)
	}
	for _, p := range aaq.order {
		p(selector)
	}
	if offset := aaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminActionGroupBy is the group-by builder for AdminAction entities.
type AdminActionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aagb *AdminActionGroupBy) Aggregate(fns ...AggregateFunc) *AdminActionGroupBy {
	aagb.fns = append(aagb.fns, fns...)
	return aagb
}

// Scan applies the group-by query and scans the result into the given value.
func (aagb *AdminActionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aagb.path(ctx)
	if err != nil {
		return err
	}
	aagb.sql = query
	return aagb.sqlScan(ctx, v)
}

func (aagb *AdminActionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aagb.fields {
		if !adminaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aagb *AdminActionGroupBy) sqlQuery() *sql.Selector {
	selector := aagb.sql.Select()
	aggregation := make([]string, 0, len(aagb.fns))
	for _, fn := range aagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aagb.fields)+len(aagb.fns))
		for _, f := range aagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aagb.fields...)...)
}

// AdminActionSelect is the builder for selecting fields of AdminAction entities.
type AdminActionSelect struct {
	*AdminActionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aas *AdminActionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aas.prepareQuery(ctx); err != nil {
		return err
	}
	aas.sql = aas.AdminActionQuery.sqlQuery(ctx)
	return aas.sqlScan(ctx, v)
}

func (aas *AdminActionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aas.sql.Query()
	if err := aas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
