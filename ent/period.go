// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/period"
	"github.com/vmkevv/rigelapi/ent/year"
)

// Period is the model entity for the Period schema.
type Period struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PeriodQuery when eager-loading is set.
	Edges        PeriodEdges `json:"edges"`
	year_periods *string
	selectValues sql.SelectValues
}

// PeriodEdges holds the relations/edges for other nodes in the graph.
type PeriodEdges struct {
	// ClassPeriods holds the value of the classPeriods edge.
	ClassPeriods []*ClassPeriod `json:"classPeriods,omitempty"`
	// Year holds the value of the year edge.
	Year *Year `json:"year,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClassPeriodsOrErr returns the ClassPeriods value or an error if the edge
// was not loaded in eager-loading.
func (e PeriodEdges) ClassPeriodsOrErr() ([]*ClassPeriod, error) {
	if e.loadedTypes[0] {
		return e.ClassPeriods, nil
	}
	return nil, &NotLoadedError{edge: "classPeriods"}
}

// YearOrErr returns the Year value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PeriodEdges) YearOrErr() (*Year, error) {
	if e.loadedTypes[1] {
		if e.Year == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: year.Label}
		}
		return e.Year, nil
	}
	return nil, &NotLoadedError{edge: "year"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Period) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case period.FieldID, period.FieldName:
			values[i] = new(sql.NullString)
		case period.ForeignKeys[0]: // year_periods
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Period fields.
func (pe *Period) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case period.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pe.ID = value.String
			}
		case period.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case period.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field year_periods", values[i])
			} else if value.Valid {
				pe.year_periods = new(string)
				*pe.year_periods = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Period.
// This includes values selected through modifiers, order, etc.
func (pe *Period) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryClassPeriods queries the "classPeriods" edge of the Period entity.
func (pe *Period) QueryClassPeriods() *ClassPeriodQuery {
	return NewPeriodClient(pe.config).QueryClassPeriods(pe)
}

// QueryYear queries the "year" edge of the Period entity.
func (pe *Period) QueryYear() *YearQuery {
	return NewPeriodClient(pe.config).QueryYear(pe)
}

// Update returns a builder for updating this Period.
// Note that you need to call Period.Unwrap() before calling this method if this Period
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Period) Update() *PeriodUpdateOne {
	return NewPeriodClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Period entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Period) Unwrap() *Period {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Period is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Period) String() string {
	var builder strings.Builder
	builder.WriteString("Period(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Periods is a parsable slice of Period.
type Periods []*Period
