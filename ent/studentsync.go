// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/studentsync"
)

// StudentSync is the model entity for the StudentSync schema.
type StudentSync struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// LastSyncID holds the value of the "last_sync_id" field.
	LastSyncID string `json:"last_sync_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentSyncQuery when eager-loading is set.
	Edges               StudentSyncEdges `json:"edges"`
	class_student_syncs *string
}

// StudentSyncEdges holds the relations/edges for other nodes in the graph.
type StudentSyncEdges struct {
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentSyncEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[0] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudentSync) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case studentsync.FieldID, studentsync.FieldLastSyncID:
			values[i] = new(sql.NullString)
		case studentsync.ForeignKeys[0]: // class_student_syncs
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StudentSync", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudentSync fields.
func (ss *StudentSync) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studentsync.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = value.String
			}
		case studentsync.FieldLastSyncID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_sync_id", values[i])
			} else if value.Valid {
				ss.LastSyncID = value.String
			}
		case studentsync.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_student_syncs", values[i])
			} else if value.Valid {
				ss.class_student_syncs = new(string)
				*ss.class_student_syncs = value.String
			}
		}
	}
	return nil
}

// QueryClass queries the "class" edge of the StudentSync entity.
func (ss *StudentSync) QueryClass() *ClassQuery {
	return (&StudentSyncClient{config: ss.config}).QueryClass(ss)
}

// Update returns a builder for updating this StudentSync.
// Note that you need to call StudentSync.Unwrap() before calling this method if this StudentSync
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *StudentSync) Update() *StudentSyncUpdateOne {
	return (&StudentSyncClient{config: ss.config}).UpdateOne(ss)
}

// Unwrap unwraps the StudentSync entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *StudentSync) Unwrap() *StudentSync {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudentSync is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *StudentSync) String() string {
	var builder strings.Builder
	builder.WriteString("StudentSync(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("last_sync_id=")
	builder.WriteString(ss.LastSyncID)
	builder.WriteByte(')')
	return builder.String()
}

// StudentSyncs is a parsable slice of StudentSync.
type StudentSyncs []*StudentSync

func (ss StudentSyncs) config(cfg config) {
	for _i := range ss {
		ss[_i].config = cfg
	}
}
