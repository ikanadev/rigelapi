// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/adminaction"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// AdminActionCreate is the builder for creating a AdminAction entity.
type AdminActionCreate struct {
	config
	mutation *AdminActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAction sets the "action" field.
func (aac *AdminActionCreate) SetAction(s string) *AdminActionCreate {
	aac.mutation.SetAction(s)
	return aac
}

// SetInfo sets the "info" field.
func (aac *AdminActionCreate) SetInfo(s string) *AdminActionCreate {
	aac.mutation.SetInfo(s)
	return aac
}

// SetID sets the "id" field.
func (aac *AdminActionCreate) SetID(s string) *AdminActionCreate {
	aac.mutation.SetID(s)
	return aac
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (aac *AdminActionCreate) SetTeacherID(id string) *AdminActionCreate {
	aac.mutation.SetTeacherID(id)
	return aac
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (aac *AdminActionCreate) SetNillableTeacherID(id *string) *AdminActionCreate {
	if id != nil {
		aac = aac.SetTeacherID(*id)
	}
	return aac
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (aac *AdminActionCreate) SetTeacher(t *Teacher) *AdminActionCreate {
	return aac.SetTeacherID(t.ID)
}

// Mutation returns the AdminActionMutation object of the builder.
func (aac *AdminActionCreate) Mutation() *AdminActionMutation {
	return aac.mutation
}

// Save creates the AdminAction in the database.
func (aac *AdminActionCreate) Save(ctx context.Context) (*AdminAction, error) {
	var (
		err  error
		node *AdminAction
	)
	if len(aac.hooks) == 0 {
		if err = aac.check(); err != nil {
			return nil, err
		}
		node, err = aac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aac.check(); err != nil {
				return nil, err
			}
			aac.mutation = mutation
			if node, err = aac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aac.hooks) - 1; i >= 0; i-- {
			if aac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AdminAction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AdminActionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AdminActionCreate) SaveX(ctx context.Context) *AdminAction {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AdminActionCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AdminActionCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AdminActionCreate) check() error {
	if _, ok := aac.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AdminAction.action"`)}
	}
	if _, ok := aac.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "AdminAction.info"`)}
	}
	return nil
}

func (aac *AdminActionCreate) sqlSave(ctx context.Context) (*AdminAction, error) {
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AdminAction.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (aac *AdminActionCreate) createSpec() (*AdminAction, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminAction{config: aac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adminaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: adminaction.FieldID,
			},
		}
	)
	_spec.OnConflict = aac.conflict
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aac.mutation.Action(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldAction,
		})
		_node.Action = value
	}
	if value, ok := aac.mutation.Info(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldInfo,
		})
		_node.Info = value
	}
	if nodes := aac.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminaction.TeacherTable,
			Columns: []string{adminaction.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.teacher_actions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdminAction.Create().
//		SetAction(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdminActionUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (aac *AdminActionCreate) OnConflict(opts ...sql.ConflictOption) *AdminActionUpsertOne {
	aac.conflict = opts
	return &AdminActionUpsertOne{
		create: aac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aac *AdminActionCreate) OnConflictColumns(columns ...string) *AdminActionUpsertOne {
	aac.conflict = append(aac.conflict, sql.ConflictColumns(columns...))
	return &AdminActionUpsertOne{
		create: aac,
	}
}

type (
	// AdminActionUpsertOne is the builder for "upsert"-ing
	//  one AdminAction node.
	AdminActionUpsertOne struct {
		create *AdminActionCreate
	}

	// AdminActionUpsert is the "OnConflict" setter.
	AdminActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetAction sets the "action" field.
func (u *AdminActionUpsert) SetAction(v string) *AdminActionUpsert {
	u.Set(adminaction.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AdminActionUpsert) UpdateAction() *AdminActionUpsert {
	u.SetExcluded(adminaction.FieldAction)
	return u
}

// SetInfo sets the "info" field.
func (u *AdminActionUpsert) SetInfo(v string) *AdminActionUpsert {
	u.Set(adminaction.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AdminActionUpsert) UpdateInfo() *AdminActionUpsert {
	u.SetExcluded(adminaction.FieldInfo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(adminaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AdminActionUpsertOne) UpdateNewValues() *AdminActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(adminaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AdminActionUpsertOne) Ignore() *AdminActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdminActionUpsertOne) DoNothing() *AdminActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdminActionCreate.OnConflict
// documentation for more info.
func (u *AdminActionUpsertOne) Update(set func(*AdminActionUpsert)) *AdminActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdminActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *AdminActionUpsertOne) SetAction(v string) *AdminActionUpsertOne {
	return u.Update(func(s *AdminActionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AdminActionUpsertOne) UpdateAction() *AdminActionUpsertOne {
	return u.Update(func(s *AdminActionUpsert) {
		s.UpdateAction()
	})
}

// SetInfo sets the "info" field.
func (u *AdminActionUpsertOne) SetInfo(v string) *AdminActionUpsertOne {
	return u.Update(func(s *AdminActionUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AdminActionUpsertOne) UpdateInfo() *AdminActionUpsertOne {
	return u.Update(func(s *AdminActionUpsert) {
		s.UpdateInfo()
	})
}

// Exec executes the query.
func (u *AdminActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdminActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdminActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AdminActionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AdminActionUpsertOne.ID is not supported by MySQL driver. Use AdminActionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AdminActionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AdminActionCreateBulk is the builder for creating many AdminAction entities in bulk.
type AdminActionCreateBulk struct {
	config
	builders []*AdminActionCreate
	conflict []sql.ConflictOption
}

// Save creates the AdminAction entities in the database.
func (aacb *AdminActionCreateBulk) Save(ctx context.Context) ([]*AdminAction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AdminAction, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AdminActionCreateBulk) SaveX(ctx context.Context) []*AdminAction {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AdminActionCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AdminActionCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdminAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdminActionUpsert) {
//			SetAction(v+v).
//		}).
//		Exec(ctx)
func (aacb *AdminActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AdminActionUpsertBulk {
	aacb.conflict = opts
	return &AdminActionUpsertBulk{
		create: aacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aacb *AdminActionCreateBulk) OnConflictColumns(columns ...string) *AdminActionUpsertBulk {
	aacb.conflict = append(aacb.conflict, sql.ConflictColumns(columns...))
	return &AdminActionUpsertBulk{
		create: aacb,
	}
}

// AdminActionUpsertBulk is the builder for "upsert"-ing
// a bulk of AdminAction nodes.
type AdminActionUpsertBulk struct {
	create *AdminActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(adminaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AdminActionUpsertBulk) UpdateNewValues() *AdminActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(adminaction.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdminAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AdminActionUpsertBulk) Ignore() *AdminActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdminActionUpsertBulk) DoNothing() *AdminActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdminActionCreateBulk.OnConflict
// documentation for more info.
func (u *AdminActionUpsertBulk) Update(set func(*AdminActionUpsert)) *AdminActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdminActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAction sets the "action" field.
func (u *AdminActionUpsertBulk) SetAction(v string) *AdminActionUpsertBulk {
	return u.Update(func(s *AdminActionUpsert) {
		s.SetAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *AdminActionUpsertBulk) UpdateAction() *AdminActionUpsertBulk {
	return u.Update(func(s *AdminActionUpsert) {
		s.UpdateAction()
	})
}

// SetInfo sets the "info" field.
func (u *AdminActionUpsertBulk) SetInfo(v string) *AdminActionUpsertBulk {
	return u.Update(func(s *AdminActionUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AdminActionUpsertBulk) UpdateInfo() *AdminActionUpsertBulk {
	return u.Update(func(s *AdminActionUpsert) {
		s.UpdateInfo()
	})
}

// Exec executes the query.
func (u *AdminActionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AdminActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdminActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdminActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
