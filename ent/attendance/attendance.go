// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"fmt"
)

const (
	// Label holds the string label denoting the attendance type in the database.
	Label = "attendance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeClassPeriod holds the string denoting the classperiod edge name in mutations.
	EdgeClassPeriod = "classPeriod"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the attendance in the database.
	Table = "attendances"
	// ClassPeriodTable is the table that holds the classPeriod relation/edge.
	ClassPeriodTable = "attendances"
	// ClassPeriodInverseTable is the table name for the ClassPeriod entity.
	// It exists in this package in order to avoid circular dependency with the "classperiod" package.
	ClassPeriodInverseTable = "class_periods"
	// ClassPeriodColumn is the table column denoting the classPeriod relation/edge.
	ClassPeriodColumn = "class_period_attendances"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "attendances"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_attendances"
)

// Columns holds all SQL columns for attendance fields.
var Columns = []string{
	FieldID,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attendances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"class_period_attendances",
	"student_attendances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Value defines the type for the "value" enum field.
type Value string

// Value values.
const (
	ValueAsistencia Value = "Asistencia"
	ValueFalta      Value = "Falta"
	ValueAtraso     Value = "Atraso"
	ValueLicencia   Value = "Licencia"
)

func (v Value) String() string {
	return string(v)
}

// ValueValidator is a validator for the "value" field enum values. It is called by the builders before save.
func ValueValidator(v Value) error {
	switch v {
	case ValueAsistencia, ValueFalta, ValueAtraso, ValueLicencia:
		return nil
	default:
		return fmt.Errorf("attendance: invalid enum value for value field: %q", v)
	}
}
