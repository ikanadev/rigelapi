// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/classperiodsync"
)

// ClassPeriodSyncCreate is the builder for creating a ClassPeriodSync entity.
type ClassPeriodSyncCreate struct {
	config
	mutation *ClassPeriodSyncMutation
	hooks    []Hook
}

// SetLastSyncID sets the "last_sync_id" field.
func (cpsc *ClassPeriodSyncCreate) SetLastSyncID(s string) *ClassPeriodSyncCreate {
	cpsc.mutation.SetLastSyncID(s)
	return cpsc
}

// SetID sets the "id" field.
func (cpsc *ClassPeriodSyncCreate) SetID(s string) *ClassPeriodSyncCreate {
	cpsc.mutation.SetID(s)
	return cpsc
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (cpsc *ClassPeriodSyncCreate) SetClassID(id string) *ClassPeriodSyncCreate {
	cpsc.mutation.SetClassID(id)
	return cpsc
}

// SetNillableClassID sets the "class" edge to the Class entity by ID if the given value is not nil.
func (cpsc *ClassPeriodSyncCreate) SetNillableClassID(id *string) *ClassPeriodSyncCreate {
	if id != nil {
		cpsc = cpsc.SetClassID(*id)
	}
	return cpsc
}

// SetClass sets the "class" edge to the Class entity.
func (cpsc *ClassPeriodSyncCreate) SetClass(c *Class) *ClassPeriodSyncCreate {
	return cpsc.SetClassID(c.ID)
}

// Mutation returns the ClassPeriodSyncMutation object of the builder.
func (cpsc *ClassPeriodSyncCreate) Mutation() *ClassPeriodSyncMutation {
	return cpsc.mutation
}

// Save creates the ClassPeriodSync in the database.
func (cpsc *ClassPeriodSyncCreate) Save(ctx context.Context) (*ClassPeriodSync, error) {
	var (
		err  error
		node *ClassPeriodSync
	)
	if len(cpsc.hooks) == 0 {
		if err = cpsc.check(); err != nil {
			return nil, err
		}
		node, err = cpsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassPeriodSyncMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpsc.check(); err != nil {
				return nil, err
			}
			cpsc.mutation = mutation
			if node, err = cpsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpsc.hooks) - 1; i >= 0; i-- {
			if cpsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cpsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ClassPeriodSync)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ClassPeriodSyncMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpsc *ClassPeriodSyncCreate) SaveX(ctx context.Context) *ClassPeriodSync {
	v, err := cpsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpsc *ClassPeriodSyncCreate) Exec(ctx context.Context) error {
	_, err := cpsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpsc *ClassPeriodSyncCreate) ExecX(ctx context.Context) {
	if err := cpsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpsc *ClassPeriodSyncCreate) check() error {
	if _, ok := cpsc.mutation.LastSyncID(); !ok {
		return &ValidationError{Name: "last_sync_id", err: errors.New(`ent: missing required field "ClassPeriodSync.last_sync_id"`)}
	}
	return nil
}

func (cpsc *ClassPeriodSyncCreate) sqlSave(ctx context.Context) (*ClassPeriodSync, error) {
	_node, _spec := cpsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ClassPeriodSync.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (cpsc *ClassPeriodSyncCreate) createSpec() (*ClassPeriodSync, *sqlgraph.CreateSpec) {
	var (
		_node = &ClassPeriodSync{config: cpsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: classperiodsync.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: classperiodsync.FieldID,
			},
		}
	)
	if id, ok := cpsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpsc.mutation.LastSyncID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: classperiodsync.FieldLastSyncID,
		})
		_node.LastSyncID = value
	}
	if nodes := cpsc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classperiodsync.ClassTable,
			Columns: []string{classperiodsync.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.class_class_period_syncs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassPeriodSyncCreateBulk is the builder for creating many ClassPeriodSync entities in bulk.
type ClassPeriodSyncCreateBulk struct {
	config
	builders []*ClassPeriodSyncCreate
}

// Save creates the ClassPeriodSync entities in the database.
func (cpscb *ClassPeriodSyncCreateBulk) Save(ctx context.Context) ([]*ClassPeriodSync, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpscb.builders))
	nodes := make([]*ClassPeriodSync, len(cpscb.builders))
	mutators := make([]Mutator, len(cpscb.builders))
	for i := range cpscb.builders {
		func(i int, root context.Context) {
			builder := cpscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassPeriodSyncMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpscb *ClassPeriodSyncCreateBulk) SaveX(ctx context.Context) []*ClassPeriodSync {
	v, err := cpscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpscb *ClassPeriodSyncCreateBulk) Exec(ctx context.Context) error {
	_, err := cpscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpscb *ClassPeriodSyncCreateBulk) ExecX(ctx context.Context) {
	if err := cpscb.Exec(ctx); err != nil {
		panic(err)
	}
}
