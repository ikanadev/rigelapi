// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/attendance"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/student"
)

// AttendanceUpdate is the builder for updating Attendance entities.
type AttendanceUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (au *AttendanceUpdate) Where(ps ...predicate.Attendance) *AttendanceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetValue sets the "value" field.
func (au *AttendanceUpdate) SetValue(a attendance.Value) *AttendanceUpdate {
	au.mutation.SetValue(a)
	return au
}

// SetClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID.
func (au *AttendanceUpdate) SetClassPeriodID(id string) *AttendanceUpdate {
	au.mutation.SetClassPeriodID(id)
	return au
}

// SetNillableClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID if the given value is not nil.
func (au *AttendanceUpdate) SetNillableClassPeriodID(id *string) *AttendanceUpdate {
	if id != nil {
		au = au.SetClassPeriodID(*id)
	}
	return au
}

// SetClassPeriod sets the "classPeriod" edge to the ClassPeriod entity.
func (au *AttendanceUpdate) SetClassPeriod(c *ClassPeriod) *AttendanceUpdate {
	return au.SetClassPeriodID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (au *AttendanceUpdate) SetStudentID(id string) *AttendanceUpdate {
	au.mutation.SetStudentID(id)
	return au
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (au *AttendanceUpdate) SetNillableStudentID(id *string) *AttendanceUpdate {
	if id != nil {
		au = au.SetStudentID(*id)
	}
	return au
}

// SetStudent sets the "student" edge to the Student entity.
func (au *AttendanceUpdate) SetStudent(s *Student) *AttendanceUpdate {
	return au.SetStudentID(s.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (au *AttendanceUpdate) Mutation() *AttendanceMutation {
	return au.mutation
}

// ClearClassPeriod clears the "classPeriod" edge to the ClassPeriod entity.
func (au *AttendanceUpdate) ClearClassPeriod() *AttendanceUpdate {
	au.mutation.ClearClassPeriod()
	return au
}

// ClearStudent clears the "student" edge to the Student entity.
func (au *AttendanceUpdate) ClearStudent() *AttendanceUpdate {
	au.mutation.ClearStudent()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttendanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttendanceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttendanceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttendanceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttendanceUpdate) check() error {
	if v, ok := au.mutation.Value(); ok {
		if err := attendance.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Attendance.value": %w`, err)}
		}
	}
	return nil
}

func (au *AttendanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: attendance.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: attendance.FieldValue,
		})
	}
	if au.mutation.ClassPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.ClassPeriodTable,
			Columns: []string{attendance.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClassPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.ClassPeriodTable,
			Columns: []string{attendance.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StudentTable,
			Columns: []string{attendance.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StudentTable,
			Columns: []string{attendance.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AttendanceUpdateOne is the builder for updating a single Attendance entity.
type AttendanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMutation
}

// SetValue sets the "value" field.
func (auo *AttendanceUpdateOne) SetValue(a attendance.Value) *AttendanceUpdateOne {
	auo.mutation.SetValue(a)
	return auo
}

// SetClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID.
func (auo *AttendanceUpdateOne) SetClassPeriodID(id string) *AttendanceUpdateOne {
	auo.mutation.SetClassPeriodID(id)
	return auo
}

// SetNillableClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableClassPeriodID(id *string) *AttendanceUpdateOne {
	if id != nil {
		auo = auo.SetClassPeriodID(*id)
	}
	return auo
}

// SetClassPeriod sets the "classPeriod" edge to the ClassPeriod entity.
func (auo *AttendanceUpdateOne) SetClassPeriod(c *ClassPeriod) *AttendanceUpdateOne {
	return auo.SetClassPeriodID(c.ID)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (auo *AttendanceUpdateOne) SetStudentID(id string) *AttendanceUpdateOne {
	auo.mutation.SetStudentID(id)
	return auo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableStudentID(id *string) *AttendanceUpdateOne {
	if id != nil {
		auo = auo.SetStudentID(*id)
	}
	return auo
}

// SetStudent sets the "student" edge to the Student entity.
func (auo *AttendanceUpdateOne) SetStudent(s *Student) *AttendanceUpdateOne {
	return auo.SetStudentID(s.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (auo *AttendanceUpdateOne) Mutation() *AttendanceMutation {
	return auo.mutation
}

// ClearClassPeriod clears the "classPeriod" edge to the ClassPeriod entity.
func (auo *AttendanceUpdateOne) ClearClassPeriod() *AttendanceUpdateOne {
	auo.mutation.ClearClassPeriod()
	return auo
}

// ClearStudent clears the "student" edge to the Student entity.
func (auo *AttendanceUpdateOne) ClearStudent() *AttendanceUpdateOne {
	auo.mutation.ClearStudent()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttendanceUpdateOne) Select(field string, fields ...string) *AttendanceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attendance entity.
func (auo *AttendanceUpdateOne) Save(ctx context.Context) (*Attendance, error) {
	var (
		err  error
		node *Attendance
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attendance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttendanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttendanceUpdateOne) SaveX(ctx context.Context) *Attendance {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttendanceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttendanceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttendanceUpdateOne) check() error {
	if v, ok := auo.mutation.Value(); ok {
		if err := attendance.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Attendance.value": %w`, err)}
		}
	}
	return nil
}

func (auo *AttendanceUpdateOne) sqlSave(ctx context.Context) (_node *Attendance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: attendance.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attendance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendance.FieldID)
		for _, f := range fields {
			if !attendance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: attendance.FieldValue,
		})
	}
	if auo.mutation.ClassPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.ClassPeriodTable,
			Columns: []string{attendance.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClassPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.ClassPeriodTable,
			Columns: []string{attendance.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StudentTable,
			Columns: []string{attendance.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StudentTable,
			Columns: []string{attendance.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attendance{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
