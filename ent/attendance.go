// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/attendance"
	"github.com/vmkevv/rigelapi/ent/attendanceday"
	"github.com/vmkevv/rigelapi/ent/student"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value attendance.Value `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceQuery when eager-loading is set.
	Edges                      AttendanceEdges `json:"edges"`
	attendance_day_attendances *string
	student_attendances        *string
}

// AttendanceEdges holds the relations/edges for other nodes in the graph.
type AttendanceEdges struct {
	// AttendanceDay holds the value of the attendanceDay edge.
	AttendanceDay *AttendanceDay `json:"attendanceDay,omitempty"`
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttendanceDayOrErr returns the AttendanceDay value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) AttendanceDayOrErr() (*AttendanceDay, error) {
	if e.loadedTypes[0] {
		if e.AttendanceDay == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: attendanceday.Label}
		}
		return e.AttendanceDay, nil
	}
	return nil, &NotLoadedError{edge: "attendanceDay"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[1] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID, attendance.FieldValue:
			values[i] = new(sql.NullString)
		case attendance.ForeignKeys[0]: // attendance_day_attendances
			values[i] = new(sql.NullString)
		case attendance.ForeignKeys[1]: // student_attendances
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attendance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case attendance.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				a.Value = attendance.Value(value.String)
			}
		case attendance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attendance_day_attendances", values[i])
			} else if value.Valid {
				a.attendance_day_attendances = new(string)
				*a.attendance_day_attendances = value.String
			}
		case attendance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field student_attendances", values[i])
			} else if value.Valid {
				a.student_attendances = new(string)
				*a.student_attendances = value.String
			}
		}
	}
	return nil
}

// QueryAttendanceDay queries the "attendanceDay" edge of the Attendance entity.
func (a *Attendance) QueryAttendanceDay() *AttendanceDayQuery {
	return (&AttendanceClient{config: a.config}).QueryAttendanceDay(a)
}

// QueryStudent queries the "student" edge of the Attendance entity.
func (a *Attendance) QueryStudent() *StudentQuery {
	return (&AttendanceClient{config: a.config}).QueryStudent(a)
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return (&AttendanceClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendance is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", a.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance

func (a Attendances) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
