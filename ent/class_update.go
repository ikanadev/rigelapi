// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/classperiodsync"
	"github.com/vmkevv/rigelapi/ent/grade"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/school"
	"github.com/vmkevv/rigelapi/ent/student"
	"github.com/vmkevv/rigelapi/ent/subject"
	"github.com/vmkevv/rigelapi/ent/teacher"
	"github.com/vmkevv/rigelapi/ent/year"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetParallel sets the "parallel" field.
func (cu *ClassUpdate) SetParallel(s string) *ClassUpdate {
	cu.mutation.SetParallel(s)
	return cu
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (cu *ClassUpdate) AddStudentIDs(ids ...string) *ClassUpdate {
	cu.mutation.AddStudentIDs(ids...)
	return cu
}

// AddStudents adds the "students" edges to the Student entity.
func (cu *ClassUpdate) AddStudents(s ...*Student) *ClassUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStudentIDs(ids...)
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (cu *ClassUpdate) AddClassPeriodIDs(ids ...string) *ClassUpdate {
	cu.mutation.AddClassPeriodIDs(ids...)
	return cu
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (cu *ClassUpdate) AddClassPeriods(c ...*ClassPeriod) *ClassUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClassPeriodIDs(ids...)
}

// AddClassPeriodSyncIDs adds the "classPeriodSyncs" edge to the ClassPeriodSync entity by IDs.
func (cu *ClassUpdate) AddClassPeriodSyncIDs(ids ...string) *ClassUpdate {
	cu.mutation.AddClassPeriodSyncIDs(ids...)
	return cu
}

// AddClassPeriodSyncs adds the "classPeriodSyncs" edges to the ClassPeriodSync entity.
func (cu *ClassUpdate) AddClassPeriodSyncs(c ...*ClassPeriodSync) *ClassUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClassPeriodSyncIDs(ids...)
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (cu *ClassUpdate) SetSchoolID(id string) *ClassUpdate {
	cu.mutation.SetSchoolID(id)
	return cu
}

// SetNillableSchoolID sets the "school" edge to the School entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableSchoolID(id *string) *ClassUpdate {
	if id != nil {
		cu = cu.SetSchoolID(*id)
	}
	return cu
}

// SetSchool sets the "school" edge to the School entity.
func (cu *ClassUpdate) SetSchool(s *School) *ClassUpdate {
	return cu.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (cu *ClassUpdate) SetTeacherID(id string) *ClassUpdate {
	cu.mutation.SetTeacherID(id)
	return cu
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableTeacherID(id *string) *ClassUpdate {
	if id != nil {
		cu = cu.SetTeacherID(*id)
	}
	return cu
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (cu *ClassUpdate) SetTeacher(t *Teacher) *ClassUpdate {
	return cu.SetTeacherID(t.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cu *ClassUpdate) SetSubjectID(id string) *ClassUpdate {
	cu.mutation.SetSubjectID(id)
	return cu
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableSubjectID(id *string) *ClassUpdate {
	if id != nil {
		cu = cu.SetSubjectID(*id)
	}
	return cu
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cu *ClassUpdate) SetSubject(s *Subject) *ClassUpdate {
	return cu.SetSubjectID(s.ID)
}

// SetGradeID sets the "grade" edge to the Grade entity by ID.
func (cu *ClassUpdate) SetGradeID(id string) *ClassUpdate {
	cu.mutation.SetGradeID(id)
	return cu
}

// SetNillableGradeID sets the "grade" edge to the Grade entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableGradeID(id *string) *ClassUpdate {
	if id != nil {
		cu = cu.SetGradeID(*id)
	}
	return cu
}

// SetGrade sets the "grade" edge to the Grade entity.
func (cu *ClassUpdate) SetGrade(g *Grade) *ClassUpdate {
	return cu.SetGradeID(g.ID)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (cu *ClassUpdate) SetYearID(id string) *ClassUpdate {
	cu.mutation.SetYearID(id)
	return cu
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (cu *ClassUpdate) SetNillableYearID(id *string) *ClassUpdate {
	if id != nil {
		cu = cu.SetYearID(*id)
	}
	return cu
}

// SetYear sets the "year" edge to the Year entity.
func (cu *ClassUpdate) SetYear(y *Year) *ClassUpdate {
	return cu.SetYearID(y.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (cu *ClassUpdate) ClearStudents() *ClassUpdate {
	cu.mutation.ClearStudents()
	return cu
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (cu *ClassUpdate) RemoveStudentIDs(ids ...string) *ClassUpdate {
	cu.mutation.RemoveStudentIDs(ids...)
	return cu
}

// RemoveStudents removes "students" edges to Student entities.
func (cu *ClassUpdate) RemoveStudents(s ...*Student) *ClassUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStudentIDs(ids...)
}

// ClearClassPeriods clears all "classPeriods" edges to the ClassPeriod entity.
func (cu *ClassUpdate) ClearClassPeriods() *ClassUpdate {
	cu.mutation.ClearClassPeriods()
	return cu
}

// RemoveClassPeriodIDs removes the "classPeriods" edge to ClassPeriod entities by IDs.
func (cu *ClassUpdate) RemoveClassPeriodIDs(ids ...string) *ClassUpdate {
	cu.mutation.RemoveClassPeriodIDs(ids...)
	return cu
}

// RemoveClassPeriods removes "classPeriods" edges to ClassPeriod entities.
func (cu *ClassUpdate) RemoveClassPeriods(c ...*ClassPeriod) *ClassUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClassPeriodIDs(ids...)
}

// ClearClassPeriodSyncs clears all "classPeriodSyncs" edges to the ClassPeriodSync entity.
func (cu *ClassUpdate) ClearClassPeriodSyncs() *ClassUpdate {
	cu.mutation.ClearClassPeriodSyncs()
	return cu
}

// RemoveClassPeriodSyncIDs removes the "classPeriodSyncs" edge to ClassPeriodSync entities by IDs.
func (cu *ClassUpdate) RemoveClassPeriodSyncIDs(ids ...string) *ClassUpdate {
	cu.mutation.RemoveClassPeriodSyncIDs(ids...)
	return cu
}

// RemoveClassPeriodSyncs removes "classPeriodSyncs" edges to ClassPeriodSync entities.
func (cu *ClassUpdate) RemoveClassPeriodSyncs(c ...*ClassPeriodSync) *ClassUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClassPeriodSyncIDs(ids...)
}

// ClearSchool clears the "school" edge to the School entity.
func (cu *ClassUpdate) ClearSchool() *ClassUpdate {
	cu.mutation.ClearSchool()
	return cu
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (cu *ClassUpdate) ClearTeacher() *ClassUpdate {
	cu.mutation.ClearTeacher()
	return cu
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cu *ClassUpdate) ClearSubject() *ClassUpdate {
	cu.mutation.ClearSubject()
	return cu
}

// ClearGrade clears the "grade" edge to the Grade entity.
func (cu *ClassUpdate) ClearGrade() *ClassUpdate {
	cu.mutation.ClearGrade()
	return cu
}

// ClearYear clears the "year" edge to the Year entity.
func (cu *ClassUpdate) ClearYear() *ClassUpdate {
	cu.mutation.ClearYear()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   class.Table,
			Columns: class.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: class.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Parallel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: class.FieldParallel,
		})
	}
	if cu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !cu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClassPeriodsIDs(); len(nodes) > 0 && !cu.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassPeriodSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClassPeriodSyncsIDs(); len(nodes) > 0 && !cu.mutation.ClassPeriodSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassPeriodSyncsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SchoolTable,
			Columns: []string{class.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SchoolTable,
			Columns: []string{class.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.TeacherTable,
			Columns: []string{class.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.TeacherTable,
			Columns: []string{class.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SubjectTable,
			Columns: []string{class.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SubjectTable,
			Columns: []string{class.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GradeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.GradeTable,
			Columns: []string{class.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: grade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GradeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.GradeTable,
			Columns: []string{class.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.YearTable,
			Columns: []string{class.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.YearTable,
			Columns: []string{class.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetParallel sets the "parallel" field.
func (cuo *ClassUpdateOne) SetParallel(s string) *ClassUpdateOne {
	cuo.mutation.SetParallel(s)
	return cuo
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (cuo *ClassUpdateOne) AddStudentIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.AddStudentIDs(ids...)
	return cuo
}

// AddStudents adds the "students" edges to the Student entity.
func (cuo *ClassUpdateOne) AddStudents(s ...*Student) *ClassUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStudentIDs(ids...)
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (cuo *ClassUpdateOne) AddClassPeriodIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.AddClassPeriodIDs(ids...)
	return cuo
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (cuo *ClassUpdateOne) AddClassPeriods(c ...*ClassPeriod) *ClassUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClassPeriodIDs(ids...)
}

// AddClassPeriodSyncIDs adds the "classPeriodSyncs" edge to the ClassPeriodSync entity by IDs.
func (cuo *ClassUpdateOne) AddClassPeriodSyncIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.AddClassPeriodSyncIDs(ids...)
	return cuo
}

// AddClassPeriodSyncs adds the "classPeriodSyncs" edges to the ClassPeriodSync entity.
func (cuo *ClassUpdateOne) AddClassPeriodSyncs(c ...*ClassPeriodSync) *ClassUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClassPeriodSyncIDs(ids...)
}

// SetSchoolID sets the "school" edge to the School entity by ID.
func (cuo *ClassUpdateOne) SetSchoolID(id string) *ClassUpdateOne {
	cuo.mutation.SetSchoolID(id)
	return cuo
}

// SetNillableSchoolID sets the "school" edge to the School entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableSchoolID(id *string) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetSchoolID(*id)
	}
	return cuo
}

// SetSchool sets the "school" edge to the School entity.
func (cuo *ClassUpdateOne) SetSchool(s *School) *ClassUpdateOne {
	return cuo.SetSchoolID(s.ID)
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (cuo *ClassUpdateOne) SetTeacherID(id string) *ClassUpdateOne {
	cuo.mutation.SetTeacherID(id)
	return cuo
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableTeacherID(id *string) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetTeacherID(*id)
	}
	return cuo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (cuo *ClassUpdateOne) SetTeacher(t *Teacher) *ClassUpdateOne {
	return cuo.SetTeacherID(t.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cuo *ClassUpdateOne) SetSubjectID(id string) *ClassUpdateOne {
	cuo.mutation.SetSubjectID(id)
	return cuo
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableSubjectID(id *string) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetSubjectID(*id)
	}
	return cuo
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cuo *ClassUpdateOne) SetSubject(s *Subject) *ClassUpdateOne {
	return cuo.SetSubjectID(s.ID)
}

// SetGradeID sets the "grade" edge to the Grade entity by ID.
func (cuo *ClassUpdateOne) SetGradeID(id string) *ClassUpdateOne {
	cuo.mutation.SetGradeID(id)
	return cuo
}

// SetNillableGradeID sets the "grade" edge to the Grade entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableGradeID(id *string) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetGradeID(*id)
	}
	return cuo
}

// SetGrade sets the "grade" edge to the Grade entity.
func (cuo *ClassUpdateOne) SetGrade(g *Grade) *ClassUpdateOne {
	return cuo.SetGradeID(g.ID)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (cuo *ClassUpdateOne) SetYearID(id string) *ClassUpdateOne {
	cuo.mutation.SetYearID(id)
	return cuo
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableYearID(id *string) *ClassUpdateOne {
	if id != nil {
		cuo = cuo.SetYearID(*id)
	}
	return cuo
}

// SetYear sets the "year" edge to the Year entity.
func (cuo *ClassUpdateOne) SetYear(y *Year) *ClassUpdateOne {
	return cuo.SetYearID(y.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (cuo *ClassUpdateOne) ClearStudents() *ClassUpdateOne {
	cuo.mutation.ClearStudents()
	return cuo
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (cuo *ClassUpdateOne) RemoveStudentIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.RemoveStudentIDs(ids...)
	return cuo
}

// RemoveStudents removes "students" edges to Student entities.
func (cuo *ClassUpdateOne) RemoveStudents(s ...*Student) *ClassUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStudentIDs(ids...)
}

// ClearClassPeriods clears all "classPeriods" edges to the ClassPeriod entity.
func (cuo *ClassUpdateOne) ClearClassPeriods() *ClassUpdateOne {
	cuo.mutation.ClearClassPeriods()
	return cuo
}

// RemoveClassPeriodIDs removes the "classPeriods" edge to ClassPeriod entities by IDs.
func (cuo *ClassUpdateOne) RemoveClassPeriodIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.RemoveClassPeriodIDs(ids...)
	return cuo
}

// RemoveClassPeriods removes "classPeriods" edges to ClassPeriod entities.
func (cuo *ClassUpdateOne) RemoveClassPeriods(c ...*ClassPeriod) *ClassUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClassPeriodIDs(ids...)
}

// ClearClassPeriodSyncs clears all "classPeriodSyncs" edges to the ClassPeriodSync entity.
func (cuo *ClassUpdateOne) ClearClassPeriodSyncs() *ClassUpdateOne {
	cuo.mutation.ClearClassPeriodSyncs()
	return cuo
}

// RemoveClassPeriodSyncIDs removes the "classPeriodSyncs" edge to ClassPeriodSync entities by IDs.
func (cuo *ClassUpdateOne) RemoveClassPeriodSyncIDs(ids ...string) *ClassUpdateOne {
	cuo.mutation.RemoveClassPeriodSyncIDs(ids...)
	return cuo
}

// RemoveClassPeriodSyncs removes "classPeriodSyncs" edges to ClassPeriodSync entities.
func (cuo *ClassUpdateOne) RemoveClassPeriodSyncs(c ...*ClassPeriodSync) *ClassUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClassPeriodSyncIDs(ids...)
}

// ClearSchool clears the "school" edge to the School entity.
func (cuo *ClassUpdateOne) ClearSchool() *ClassUpdateOne {
	cuo.mutation.ClearSchool()
	return cuo
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (cuo *ClassUpdateOne) ClearTeacher() *ClassUpdateOne {
	cuo.mutation.ClearTeacher()
	return cuo
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cuo *ClassUpdateOne) ClearSubject() *ClassUpdateOne {
	cuo.mutation.ClearSubject()
	return cuo
}

// ClearGrade clears the "grade" edge to the Grade entity.
func (cuo *ClassUpdateOne) ClearGrade() *ClassUpdateOne {
	cuo.mutation.ClearGrade()
	return cuo
}

// ClearYear clears the "year" edge to the Year entity.
func (cuo *ClassUpdateOne) ClearYear() *ClassUpdateOne {
	cuo.mutation.ClearYear()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	var (
		err  error
		node *Class
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Class)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ClassMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   class.Table,
			Columns: class.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: class.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Parallel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: class.FieldParallel,
		})
	}
	if cuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !cuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.StudentsTable,
			Columns: []string{class.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClassPeriodsIDs(); len(nodes) > 0 && !cuo.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodsTable,
			Columns: []string{class.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassPeriodSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClassPeriodSyncsIDs(); len(nodes) > 0 && !cuo.mutation.ClassPeriodSyncsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassPeriodSyncsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassPeriodSyncsTable,
			Columns: []string{class.ClassPeriodSyncsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiodsync.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SchoolTable,
			Columns: []string{class.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SchoolTable,
			Columns: []string{class.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.TeacherTable,
			Columns: []string{class.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.TeacherTable,
			Columns: []string{class.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SubjectTable,
			Columns: []string{class.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.SubjectTable,
			Columns: []string{class.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GradeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.GradeTable,
			Columns: []string{class.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: grade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GradeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.GradeTable,
			Columns: []string{class.GradeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: grade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.YearTable,
			Columns: []string{class.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.YearTable,
			Columns: []string{class.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
