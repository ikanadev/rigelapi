// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/adminaction"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// AdminActionUpdate is the builder for updating AdminAction entities.
type AdminActionUpdate struct {
	config
	hooks    []Hook
	mutation *AdminActionMutation
}

// Where appends a list predicates to the AdminActionUpdate builder.
func (aau *AdminActionUpdate) Where(ps ...predicate.AdminAction) *AdminActionUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetAction sets the "action" field.
func (aau *AdminActionUpdate) SetAction(s string) *AdminActionUpdate {
	aau.mutation.SetAction(s)
	return aau
}

// SetInfo sets the "info" field.
func (aau *AdminActionUpdate) SetInfo(s string) *AdminActionUpdate {
	aau.mutation.SetInfo(s)
	return aau
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (aau *AdminActionUpdate) SetTeacherID(id string) *AdminActionUpdate {
	aau.mutation.SetTeacherID(id)
	return aau
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (aau *AdminActionUpdate) SetNillableTeacherID(id *string) *AdminActionUpdate {
	if id != nil {
		aau = aau.SetTeacherID(*id)
	}
	return aau
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (aau *AdminActionUpdate) SetTeacher(t *Teacher) *AdminActionUpdate {
	return aau.SetTeacherID(t.ID)
}

// Mutation returns the AdminActionMutation object of the builder.
func (aau *AdminActionUpdate) Mutation() *AdminActionMutation {
	return aau.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (aau *AdminActionUpdate) ClearTeacher() *AdminActionUpdate {
	aau.mutation.ClearTeacher()
	return aau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AdminActionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aau.hooks) == 0 {
		affected, err = aau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aau.mutation = mutation
			affected, err = aau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aau.hooks) - 1; i >= 0; i-- {
			if aau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AdminActionUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AdminActionUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AdminActionUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aau *AdminActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminaction.Table,
			Columns: adminaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: adminaction.FieldID,
			},
		},
	}
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldAction,
		})
	}
	if value, ok := aau.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldInfo,
		})
	}
	if aau.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminaction.TeacherTable,
			Columns: []string{adminaction.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminaction.TeacherTable,
			Columns: []string{adminaction.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AdminActionUpdateOne is the builder for updating a single AdminAction entity.
type AdminActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminActionMutation
}

// SetAction sets the "action" field.
func (aauo *AdminActionUpdateOne) SetAction(s string) *AdminActionUpdateOne {
	aauo.mutation.SetAction(s)
	return aauo
}

// SetInfo sets the "info" field.
func (aauo *AdminActionUpdateOne) SetInfo(s string) *AdminActionUpdateOne {
	aauo.mutation.SetInfo(s)
	return aauo
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (aauo *AdminActionUpdateOne) SetTeacherID(id string) *AdminActionUpdateOne {
	aauo.mutation.SetTeacherID(id)
	return aauo
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (aauo *AdminActionUpdateOne) SetNillableTeacherID(id *string) *AdminActionUpdateOne {
	if id != nil {
		aauo = aauo.SetTeacherID(*id)
	}
	return aauo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (aauo *AdminActionUpdateOne) SetTeacher(t *Teacher) *AdminActionUpdateOne {
	return aauo.SetTeacherID(t.ID)
}

// Mutation returns the AdminActionMutation object of the builder.
func (aauo *AdminActionUpdateOne) Mutation() *AdminActionMutation {
	return aauo.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (aauo *AdminActionUpdateOne) ClearTeacher() *AdminActionUpdateOne {
	aauo.mutation.ClearTeacher()
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AdminActionUpdateOne) Select(field string, fields ...string) *AdminActionUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AdminAction entity.
func (aauo *AdminActionUpdateOne) Save(ctx context.Context) (*AdminAction, error) {
	var (
		err  error
		node *AdminAction
	)
	if len(aauo.hooks) == 0 {
		node, err = aauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aauo.mutation = mutation
			node, err = aauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aauo.hooks) - 1; i >= 0; i-- {
			if aauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AdminAction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AdminActionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AdminActionUpdateOne) SaveX(ctx context.Context) *AdminAction {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AdminActionUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AdminActionUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aauo *AdminActionUpdateOne) sqlSave(ctx context.Context) (_node *AdminAction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminaction.Table,
			Columns: adminaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: adminaction.FieldID,
			},
		},
	}
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminaction.FieldID)
		for _, f := range fields {
			if !adminaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldAction,
		})
	}
	if value, ok := aauo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminaction.FieldInfo,
		})
	}
	if aauo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminaction.TeacherTable,
			Columns: []string{adminaction.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminaction.TeacherTable,
			Columns: []string{adminaction.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminAction{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
