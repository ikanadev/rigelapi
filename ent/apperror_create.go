// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/apperror"
)

// AppErrorCreate is the builder for creating a AppError entity.
type AppErrorCreate struct {
	config
	mutation *AppErrorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (aec *AppErrorCreate) SetUserID(s string) *AppErrorCreate {
	aec.mutation.SetUserID(s)
	return aec
}

// SetCause sets the "cause" field.
func (aec *AppErrorCreate) SetCause(s string) *AppErrorCreate {
	aec.mutation.SetCause(s)
	return aec
}

// SetErrorMsg sets the "error_msg" field.
func (aec *AppErrorCreate) SetErrorMsg(s string) *AppErrorCreate {
	aec.mutation.SetErrorMsg(s)
	return aec
}

// SetErrorStack sets the "error_stack" field.
func (aec *AppErrorCreate) SetErrorStack(s string) *AppErrorCreate {
	aec.mutation.SetErrorStack(s)
	return aec
}

// SetID sets the "id" field.
func (aec *AppErrorCreate) SetID(s string) *AppErrorCreate {
	aec.mutation.SetID(s)
	return aec
}

// Mutation returns the AppErrorMutation object of the builder.
func (aec *AppErrorCreate) Mutation() *AppErrorMutation {
	return aec.mutation
}

// Save creates the AppError in the database.
func (aec *AppErrorCreate) Save(ctx context.Context) (*AppError, error) {
	return withHooks(ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AppErrorCreate) SaveX(ctx context.Context) *AppError {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AppErrorCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AppErrorCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AppErrorCreate) check() error {
	if _, ok := aec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppError.user_id"`)}
	}
	if _, ok := aec.mutation.Cause(); !ok {
		return &ValidationError{Name: "cause", err: errors.New(`ent: missing required field "AppError.cause"`)}
	}
	if _, ok := aec.mutation.ErrorMsg(); !ok {
		return &ValidationError{Name: "error_msg", err: errors.New(`ent: missing required field "AppError.error_msg"`)}
	}
	if _, ok := aec.mutation.ErrorStack(); !ok {
		return &ValidationError{Name: "error_stack", err: errors.New(`ent: missing required field "AppError.error_stack"`)}
	}
	return nil
}

func (aec *AppErrorCreate) sqlSave(ctx context.Context) (*AppError, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppError.ID type: %T", _spec.ID.Value)
		}
	}
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AppErrorCreate) createSpec() (*AppError, *sqlgraph.CreateSpec) {
	var (
		_node = &AppError{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(apperror.Table, sqlgraph.NewFieldSpec(apperror.FieldID, field.TypeString))
	)
	_spec.OnConflict = aec.conflict
	if id, ok := aec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aec.mutation.UserID(); ok {
		_spec.SetField(apperror.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := aec.mutation.Cause(); ok {
		_spec.SetField(apperror.FieldCause, field.TypeString, value)
		_node.Cause = value
	}
	if value, ok := aec.mutation.ErrorMsg(); ok {
		_spec.SetField(apperror.FieldErrorMsg, field.TypeString, value)
		_node.ErrorMsg = value
	}
	if value, ok := aec.mutation.ErrorStack(); ok {
		_spec.SetField(apperror.FieldErrorStack, field.TypeString, value)
		_node.ErrorStack = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppError.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppErrorUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (aec *AppErrorCreate) OnConflict(opts ...sql.ConflictOption) *AppErrorUpsertOne {
	aec.conflict = opts
	return &AppErrorUpsertOne{
		create: aec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aec *AppErrorCreate) OnConflictColumns(columns ...string) *AppErrorUpsertOne {
	aec.conflict = append(aec.conflict, sql.ConflictColumns(columns...))
	return &AppErrorUpsertOne{
		create: aec,
	}
}

type (
	// AppErrorUpsertOne is the builder for "upsert"-ing
	//  one AppError node.
	AppErrorUpsertOne struct {
		create *AppErrorCreate
	}

	// AppErrorUpsert is the "OnConflict" setter.
	AppErrorUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *AppErrorUpsert) SetUserID(v string) *AppErrorUpsert {
	u.Set(apperror.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppErrorUpsert) UpdateUserID() *AppErrorUpsert {
	u.SetExcluded(apperror.FieldUserID)
	return u
}

// SetCause sets the "cause" field.
func (u *AppErrorUpsert) SetCause(v string) *AppErrorUpsert {
	u.Set(apperror.FieldCause, v)
	return u
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *AppErrorUpsert) UpdateCause() *AppErrorUpsert {
	u.SetExcluded(apperror.FieldCause)
	return u
}

// SetErrorMsg sets the "error_msg" field.
func (u *AppErrorUpsert) SetErrorMsg(v string) *AppErrorUpsert {
	u.Set(apperror.FieldErrorMsg, v)
	return u
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *AppErrorUpsert) UpdateErrorMsg() *AppErrorUpsert {
	u.SetExcluded(apperror.FieldErrorMsg)
	return u
}

// SetErrorStack sets the "error_stack" field.
func (u *AppErrorUpsert) SetErrorStack(v string) *AppErrorUpsert {
	u.Set(apperror.FieldErrorStack, v)
	return u
}

// UpdateErrorStack sets the "error_stack" field to the value that was provided on create.
func (u *AppErrorUpsert) UpdateErrorStack() *AppErrorUpsert {
	u.SetExcluded(apperror.FieldErrorStack)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apperror.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppErrorUpsertOne) UpdateNewValues() *AppErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apperror.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppError.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppErrorUpsertOne) Ignore() *AppErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppErrorUpsertOne) DoNothing() *AppErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppErrorCreate.OnConflict
// documentation for more info.
func (u *AppErrorUpsertOne) Update(set func(*AppErrorUpsert)) *AppErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppErrorUpsertOne) SetUserID(v string) *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppErrorUpsertOne) UpdateUserID() *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateUserID()
	})
}

// SetCause sets the "cause" field.
func (u *AppErrorUpsertOne) SetCause(v string) *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetCause(v)
	})
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *AppErrorUpsertOne) UpdateCause() *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateCause()
	})
}

// SetErrorMsg sets the "error_msg" field.
func (u *AppErrorUpsertOne) SetErrorMsg(v string) *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetErrorMsg(v)
	})
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *AppErrorUpsertOne) UpdateErrorMsg() *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateErrorMsg()
	})
}

// SetErrorStack sets the "error_stack" field.
func (u *AppErrorUpsertOne) SetErrorStack(v string) *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetErrorStack(v)
	})
}

// UpdateErrorStack sets the "error_stack" field to the value that was provided on create.
func (u *AppErrorUpsertOne) UpdateErrorStack() *AppErrorUpsertOne {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateErrorStack()
	})
}

// Exec executes the query.
func (u *AppErrorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppErrorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppErrorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppErrorUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppErrorUpsertOne.ID is not supported by MySQL driver. Use AppErrorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppErrorUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppErrorCreateBulk is the builder for creating many AppError entities in bulk.
type AppErrorCreateBulk struct {
	config
	builders []*AppErrorCreate
	conflict []sql.ConflictOption
}

// Save creates the AppError entities in the database.
func (aecb *AppErrorCreateBulk) Save(ctx context.Context) ([]*AppError, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AppError, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppErrorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AppErrorCreateBulk) SaveX(ctx context.Context) []*AppError {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AppErrorCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AppErrorCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppError.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppErrorUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (aecb *AppErrorCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppErrorUpsertBulk {
	aecb.conflict = opts
	return &AppErrorUpsertBulk{
		create: aecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aecb *AppErrorCreateBulk) OnConflictColumns(columns ...string) *AppErrorUpsertBulk {
	aecb.conflict = append(aecb.conflict, sql.ConflictColumns(columns...))
	return &AppErrorUpsertBulk{
		create: aecb,
	}
}

// AppErrorUpsertBulk is the builder for "upsert"-ing
// a bulk of AppError nodes.
type AppErrorUpsertBulk struct {
	create *AppErrorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apperror.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppErrorUpsertBulk) UpdateNewValues() *AppErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apperror.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppError.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppErrorUpsertBulk) Ignore() *AppErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppErrorUpsertBulk) DoNothing() *AppErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppErrorCreateBulk.OnConflict
// documentation for more info.
func (u *AppErrorUpsertBulk) Update(set func(*AppErrorUpsert)) *AppErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppErrorUpsertBulk) SetUserID(v string) *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppErrorUpsertBulk) UpdateUserID() *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateUserID()
	})
}

// SetCause sets the "cause" field.
func (u *AppErrorUpsertBulk) SetCause(v string) *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetCause(v)
	})
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *AppErrorUpsertBulk) UpdateCause() *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateCause()
	})
}

// SetErrorMsg sets the "error_msg" field.
func (u *AppErrorUpsertBulk) SetErrorMsg(v string) *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetErrorMsg(v)
	})
}

// UpdateErrorMsg sets the "error_msg" field to the value that was provided on create.
func (u *AppErrorUpsertBulk) UpdateErrorMsg() *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateErrorMsg()
	})
}

// SetErrorStack sets the "error_stack" field.
func (u *AppErrorUpsertBulk) SetErrorStack(v string) *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.SetErrorStack(v)
	})
}

// UpdateErrorStack sets the "error_stack" field to the value that was provided on create.
func (u *AppErrorUpsertBulk) UpdateErrorStack() *AppErrorUpsertBulk {
	return u.Update(func(s *AppErrorUpsert) {
		s.UpdateErrorStack()
	})
}

// Exec executes the query.
func (u *AppErrorUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppErrorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppErrorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppErrorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
