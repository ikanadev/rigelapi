// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/area"
	"github.com/vmkevv/rigelapi/ent/year"
)

// Area is the model entity for the Area schema.
type Area struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Points holds the value of the "points" field.
	Points int `json:"points,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AreaQuery when eager-loading is set.
	Edges      AreaEdges `json:"edges"`
	year_areas *string
}

// AreaEdges holds the relations/edges for other nodes in the graph.
type AreaEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*Activity `json:"activities,omitempty"`
	// Year holds the value of the year edge.
	Year *Year `json:"year,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e AreaEdges) ActivitiesOrErr() ([]*Activity, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// YearOrErr returns the Year value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AreaEdges) YearOrErr() (*Year, error) {
	if e.loadedTypes[1] {
		if e.Year == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: year.Label}
		}
		return e.Year, nil
	}
	return nil, &NotLoadedError{edge: "year"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Area) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case area.FieldPoints:
			values[i] = new(sql.NullInt64)
		case area.FieldID, area.FieldName:
			values[i] = new(sql.NullString)
		case area.ForeignKeys[0]: // year_areas
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Area", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Area fields.
func (a *Area) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case area.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case area.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case area.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				a.Points = int(value.Int64)
			}
		case area.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field year_areas", values[i])
			} else if value.Valid {
				a.year_areas = new(string)
				*a.year_areas = value.String
			}
		}
	}
	return nil
}

// QueryActivities queries the "activities" edge of the Area entity.
func (a *Area) QueryActivities() *ActivityQuery {
	return (&AreaClient{config: a.config}).QueryActivities(a)
}

// QueryYear queries the "year" edge of the Area entity.
func (a *Area) QueryYear() *YearQuery {
	return (&AreaClient{config: a.config}).QueryYear(a)
}

// Update returns a builder for updating this Area.
// Note that you need to call Area.Unwrap() before calling this method if this Area
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Area) Update() *AreaUpdateOne {
	return (&AreaClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Area entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Area) Unwrap() *Area {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Area is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Area) String() string {
	var builder strings.Builder
	builder.WriteString("Area(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", a.Points))
	builder.WriteByte(')')
	return builder.String()
}

// Areas is a parsable slice of Area.
type Areas []*Area

func (a Areas) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
