// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/municipio"
	"github.com/vmkevv/rigelapi/ent/provincia"
	"github.com/vmkevv/rigelapi/ent/school"
)

// MunicipioCreate is the builder for creating a Municipio entity.
type MunicipioCreate struct {
	config
	mutation *MunicipioMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MunicipioCreate) SetName(s string) *MunicipioCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MunicipioCreate) SetID(s string) *MunicipioCreate {
	mc.mutation.SetID(s)
	return mc
}

// AddSchoolIDs adds the "schools" edge to the School entity by IDs.
func (mc *MunicipioCreate) AddSchoolIDs(ids ...string) *MunicipioCreate {
	mc.mutation.AddSchoolIDs(ids...)
	return mc
}

// AddSchools adds the "schools" edges to the School entity.
func (mc *MunicipioCreate) AddSchools(s ...*School) *MunicipioCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddSchoolIDs(ids...)
}

// SetProvinciaID sets the "provincia" edge to the Provincia entity by ID.
func (mc *MunicipioCreate) SetProvinciaID(id string) *MunicipioCreate {
	mc.mutation.SetProvinciaID(id)
	return mc
}

// SetNillableProvinciaID sets the "provincia" edge to the Provincia entity by ID if the given value is not nil.
func (mc *MunicipioCreate) SetNillableProvinciaID(id *string) *MunicipioCreate {
	if id != nil {
		mc = mc.SetProvinciaID(*id)
	}
	return mc
}

// SetProvincia sets the "provincia" edge to the Provincia entity.
func (mc *MunicipioCreate) SetProvincia(p *Provincia) *MunicipioCreate {
	return mc.SetProvinciaID(p.ID)
}

// Mutation returns the MunicipioMutation object of the builder.
func (mc *MunicipioCreate) Mutation() *MunicipioMutation {
	return mc.mutation
}

// Save creates the Municipio in the database.
func (mc *MunicipioCreate) Save(ctx context.Context) (*Municipio, error) {
	var (
		err  error
		node *Municipio
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MunicipioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Municipio)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MunicipioMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MunicipioCreate) SaveX(ctx context.Context) *Municipio {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MunicipioCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MunicipioCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MunicipioCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Municipio.name"`)}
	}
	return nil
}

func (mc *MunicipioCreate) sqlSave(ctx context.Context) (*Municipio, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Municipio.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (mc *MunicipioCreate) createSpec() (*Municipio, *sqlgraph.CreateSpec) {
	var (
		_node = &Municipio{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: municipio.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: municipio.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: municipio.FieldName,
		})
		_node.Name = value
	}
	if nodes := mc.mutation.SchoolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   municipio.SchoolsTable,
			Columns: []string{municipio.SchoolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProvinciaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   municipio.ProvinciaTable,
			Columns: []string{municipio.ProvinciaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: provincia.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provincia_municipios = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MunicipioCreateBulk is the builder for creating many Municipio entities in bulk.
type MunicipioCreateBulk struct {
	config
	builders []*MunicipioCreate
}

// Save creates the Municipio entities in the database.
func (mcb *MunicipioCreateBulk) Save(ctx context.Context) ([]*Municipio, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Municipio, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MunicipioMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MunicipioCreateBulk) SaveX(ctx context.Context) []*Municipio {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MunicipioCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MunicipioCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
