// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/dpto"
)

// Dpto is the model entity for the Dpto schema.
type Dpto struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DptoQuery when eager-loading is set.
	Edges DptoEdges `json:"edges"`
}

// DptoEdges holds the relations/edges for other nodes in the graph.
type DptoEdges struct {
	// Provincias holds the value of the provincias edge.
	Provincias []*Provincia `json:"provincias,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProvinciasOrErr returns the Provincias value or an error if the edge
// was not loaded in eager-loading.
func (e DptoEdges) ProvinciasOrErr() ([]*Provincia, error) {
	if e.loadedTypes[0] {
		return e.Provincias, nil
	}
	return nil, &NotLoadedError{edge: "provincias"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dpto) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dpto.FieldID, dpto.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dpto", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dpto fields.
func (d *Dpto) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dpto.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case dpto.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		}
	}
	return nil
}

// QueryProvincias queries the "provincias" edge of the Dpto entity.
func (d *Dpto) QueryProvincias() *ProvinciaQuery {
	return (&DptoClient{config: d.config}).QueryProvincias(d)
}

// Update returns a builder for updating this Dpto.
// Note that you need to call Dpto.Unwrap() before calling this method if this Dpto
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dpto) Update() *DptoUpdateOne {
	return (&DptoClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dpto entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dpto) Unwrap() *Dpto {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dpto is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dpto) String() string {
	var builder strings.Builder
	builder.WriteString("Dpto(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Dptos is a parsable slice of Dpto.
type Dptos []*Dpto

func (d Dptos) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
