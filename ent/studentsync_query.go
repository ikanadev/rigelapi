// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/studentsync"
)

// StudentSyncQuery is the builder for querying StudentSync entities.
type StudentSyncQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.StudentSync
	withClass  *ClassQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StudentSyncQuery builder.
func (ssq *StudentSyncQuery) Where(ps ...predicate.StudentSync) *StudentSyncQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit adds a limit step to the query.
func (ssq *StudentSyncQuery) Limit(limit int) *StudentSyncQuery {
	ssq.limit = &limit
	return ssq
}

// Offset adds an offset step to the query.
func (ssq *StudentSyncQuery) Offset(offset int) *StudentSyncQuery {
	ssq.offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *StudentSyncQuery) Unique(unique bool) *StudentSyncQuery {
	ssq.unique = &unique
	return ssq
}

// Order adds an order step to the query.
func (ssq *StudentSyncQuery) Order(o ...OrderFunc) *StudentSyncQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryClass chains the current query on the "class" edge.
func (ssq *StudentSyncQuery) QueryClass() *ClassQuery {
	query := &ClassQuery{config: ssq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(studentsync.Table, studentsync.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studentsync.ClassTable, studentsync.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StudentSync entity from the query.
// Returns a *NotFoundError when no StudentSync was found.
func (ssq *StudentSyncQuery) First(ctx context.Context) (*StudentSync, error) {
	nodes, err := ssq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{studentsync.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *StudentSyncQuery) FirstX(ctx context.Context) *StudentSync {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StudentSync ID from the query.
// Returns a *NotFoundError when no StudentSync ID was found.
func (ssq *StudentSyncQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ssq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{studentsync.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *StudentSyncQuery) FirstIDX(ctx context.Context) string {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StudentSync entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StudentSync entity is found.
// Returns a *NotFoundError when no StudentSync entities are found.
func (ssq *StudentSyncQuery) Only(ctx context.Context) (*StudentSync, error) {
	nodes, err := ssq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{studentsync.Label}
	default:
		return nil, &NotSingularError{studentsync.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *StudentSyncQuery) OnlyX(ctx context.Context) *StudentSync {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StudentSync ID in the query.
// Returns a *NotSingularError when more than one StudentSync ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *StudentSyncQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ssq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{studentsync.Label}
	default:
		err = &NotSingularError{studentsync.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *StudentSyncQuery) OnlyIDX(ctx context.Context) string {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StudentSyncs.
func (ssq *StudentSyncQuery) All(ctx context.Context) ([]*StudentSync, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ssq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ssq *StudentSyncQuery) AllX(ctx context.Context) []*StudentSync {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StudentSync IDs.
func (ssq *StudentSyncQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := ssq.Select(studentsync.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *StudentSyncQuery) IDsX(ctx context.Context) []string {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *StudentSyncQuery) Count(ctx context.Context) (int, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ssq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *StudentSyncQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *StudentSyncQuery) Exist(ctx context.Context) (bool, error) {
	if err := ssq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ssq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *StudentSyncQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StudentSyncQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *StudentSyncQuery) Clone() *StudentSyncQuery {
	if ssq == nil {
		return nil
	}
	return &StudentSyncQuery{
		config:     ssq.config,
		limit:      ssq.limit,
		offset:     ssq.offset,
		order:      append([]OrderFunc{}, ssq.order...),
		predicates: append([]predicate.StudentSync{}, ssq.predicates...),
		withClass:  ssq.withClass.Clone(),
		// clone intermediate query.
		sql:    ssq.sql.Clone(),
		path:   ssq.path,
		unique: ssq.unique,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *StudentSyncQuery) WithClass(opts ...func(*ClassQuery)) *StudentSyncQuery {
	query := &ClassQuery{config: ssq.config}
	for _, opt := range opts {
		opt(query)
	}
	ssq.withClass = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LastSyncID string `json:"last_sync_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StudentSync.Query().
//		GroupBy(studentsync.FieldLastSyncID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *StudentSyncQuery) GroupBy(field string, fields ...string) *StudentSyncGroupBy {
	grbuild := &StudentSyncGroupBy{config: ssq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ssq.sqlQuery(ctx), nil
	}
	grbuild.label = studentsync.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LastSyncID string `json:"last_sync_id,omitempty"`
//	}
//
//	client.StudentSync.Query().
//		Select(studentsync.FieldLastSyncID).
//		Scan(ctx, &v)
func (ssq *StudentSyncQuery) Select(fields ...string) *StudentSyncSelect {
	ssq.fields = append(ssq.fields, fields...)
	selbuild := &StudentSyncSelect{StudentSyncQuery: ssq}
	selbuild.label = studentsync.Label
	selbuild.flds, selbuild.scan = &ssq.fields, selbuild.Scan
	return selbuild
}

func (ssq *StudentSyncQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ssq.fields {
		if !studentsync.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *StudentSyncQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*StudentSync, error) {
	var (
		nodes       = []*StudentSync{}
		withFKs     = ssq.withFKs
		_spec       = ssq.querySpec()
		loadedTypes = [1]bool{
			ssq.withClass != nil,
		}
	)
	if ssq.withClass != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, studentsync.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*StudentSync).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &StudentSync{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withClass; query != nil {
		if err := ssq.loadClass(ctx, query, nodes, nil,
			func(n *StudentSync, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *StudentSyncQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*StudentSync, init func(*StudentSync), assign func(*StudentSync, *Class)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*StudentSync)
	for i := range nodes {
		if nodes[i].class_student_syncs == nil {
			continue
		}
		fk := *nodes[i].class_student_syncs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_student_syncs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssq *StudentSyncQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	_spec.Node.Columns = ssq.fields
	if len(ssq.fields) > 0 {
		_spec.Unique = ssq.unique != nil && *ssq.unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *StudentSyncQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ssq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ssq *StudentSyncQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   studentsync.Table,
			Columns: studentsync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: studentsync.FieldID,
			},
		},
		From:   ssq.sql,
		Unique: true,
	}
	if unique := ssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studentsync.FieldID)
		for i := range fields {
			if fields[i] != studentsync.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *StudentSyncQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(studentsync.Table)
	columns := ssq.fields
	if len(columns) == 0 {
		columns = studentsync.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.unique != nil && *ssq.unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StudentSyncGroupBy is the group-by builder for StudentSync entities.
type StudentSyncGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *StudentSyncGroupBy) Aggregate(fns ...AggregateFunc) *StudentSyncGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ssgb *StudentSyncGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ssgb.path(ctx)
	if err != nil {
		return err
	}
	ssgb.sql = query
	return ssgb.sqlScan(ctx, v)
}

func (ssgb *StudentSyncGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ssgb.fields {
		if !studentsync.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ssgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ssgb *StudentSyncGroupBy) sqlQuery() *sql.Selector {
	selector := ssgb.sql.Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ssgb.fields)+len(ssgb.fns))
		for _, f := range ssgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ssgb.fields...)...)
}

// StudentSyncSelect is the builder for selecting fields of StudentSync entities.
type StudentSyncSelect struct {
	*StudentSyncQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sss *StudentSyncSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	sss.sql = sss.StudentSyncQuery.sqlQuery(ctx)
	return sss.sqlScan(ctx, v)
}

func (sss *StudentSyncSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sss.sql.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
