// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/attendancedaysyncs"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/predicate"
)

// AttendanceDaySyncsUpdate is the builder for updating AttendanceDaySyncs entities.
type AttendanceDaySyncsUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceDaySyncsMutation
}

// Where appends a list predicates to the AttendanceDaySyncsUpdate builder.
func (adsu *AttendanceDaySyncsUpdate) Where(ps ...predicate.AttendanceDaySyncs) *AttendanceDaySyncsUpdate {
	adsu.mutation.Where(ps...)
	return adsu
}

// SetLastSyncID sets the "last_sync_id" field.
func (adsu *AttendanceDaySyncsUpdate) SetLastSyncID(s string) *AttendanceDaySyncsUpdate {
	adsu.mutation.SetLastSyncID(s)
	return adsu
}

// SetClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID.
func (adsu *AttendanceDaySyncsUpdate) SetClassPeriodID(id string) *AttendanceDaySyncsUpdate {
	adsu.mutation.SetClassPeriodID(id)
	return adsu
}

// SetNillableClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID if the given value is not nil.
func (adsu *AttendanceDaySyncsUpdate) SetNillableClassPeriodID(id *string) *AttendanceDaySyncsUpdate {
	if id != nil {
		adsu = adsu.SetClassPeriodID(*id)
	}
	return adsu
}

// SetClassPeriod sets the "classPeriod" edge to the ClassPeriod entity.
func (adsu *AttendanceDaySyncsUpdate) SetClassPeriod(c *ClassPeriod) *AttendanceDaySyncsUpdate {
	return adsu.SetClassPeriodID(c.ID)
}

// Mutation returns the AttendanceDaySyncsMutation object of the builder.
func (adsu *AttendanceDaySyncsUpdate) Mutation() *AttendanceDaySyncsMutation {
	return adsu.mutation
}

// ClearClassPeriod clears the "classPeriod" edge to the ClassPeriod entity.
func (adsu *AttendanceDaySyncsUpdate) ClearClassPeriod() *AttendanceDaySyncsUpdate {
	adsu.mutation.ClearClassPeriod()
	return adsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adsu *AttendanceDaySyncsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(adsu.hooks) == 0 {
		affected, err = adsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceDaySyncsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adsu.mutation = mutation
			affected, err = adsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adsu.hooks) - 1; i >= 0; i-- {
			if adsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = adsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adsu *AttendanceDaySyncsUpdate) SaveX(ctx context.Context) int {
	affected, err := adsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adsu *AttendanceDaySyncsUpdate) Exec(ctx context.Context) error {
	_, err := adsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adsu *AttendanceDaySyncsUpdate) ExecX(ctx context.Context) {
	if err := adsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (adsu *AttendanceDaySyncsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendancedaysyncs.Table,
			Columns: attendancedaysyncs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: attendancedaysyncs.FieldID,
			},
		},
	}
	if ps := adsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adsu.mutation.LastSyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendancedaysyncs.FieldLastSyncID,
		})
	}
	if adsu.mutation.ClassPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancedaysyncs.ClassPeriodTable,
			Columns: []string{attendancedaysyncs.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adsu.mutation.ClassPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancedaysyncs.ClassPeriodTable,
			Columns: []string{attendancedaysyncs.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancedaysyncs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AttendanceDaySyncsUpdateOne is the builder for updating a single AttendanceDaySyncs entity.
type AttendanceDaySyncsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceDaySyncsMutation
}

// SetLastSyncID sets the "last_sync_id" field.
func (adsuo *AttendanceDaySyncsUpdateOne) SetLastSyncID(s string) *AttendanceDaySyncsUpdateOne {
	adsuo.mutation.SetLastSyncID(s)
	return adsuo
}

// SetClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID.
func (adsuo *AttendanceDaySyncsUpdateOne) SetClassPeriodID(id string) *AttendanceDaySyncsUpdateOne {
	adsuo.mutation.SetClassPeriodID(id)
	return adsuo
}

// SetNillableClassPeriodID sets the "classPeriod" edge to the ClassPeriod entity by ID if the given value is not nil.
func (adsuo *AttendanceDaySyncsUpdateOne) SetNillableClassPeriodID(id *string) *AttendanceDaySyncsUpdateOne {
	if id != nil {
		adsuo = adsuo.SetClassPeriodID(*id)
	}
	return adsuo
}

// SetClassPeriod sets the "classPeriod" edge to the ClassPeriod entity.
func (adsuo *AttendanceDaySyncsUpdateOne) SetClassPeriod(c *ClassPeriod) *AttendanceDaySyncsUpdateOne {
	return adsuo.SetClassPeriodID(c.ID)
}

// Mutation returns the AttendanceDaySyncsMutation object of the builder.
func (adsuo *AttendanceDaySyncsUpdateOne) Mutation() *AttendanceDaySyncsMutation {
	return adsuo.mutation
}

// ClearClassPeriod clears the "classPeriod" edge to the ClassPeriod entity.
func (adsuo *AttendanceDaySyncsUpdateOne) ClearClassPeriod() *AttendanceDaySyncsUpdateOne {
	adsuo.mutation.ClearClassPeriod()
	return adsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (adsuo *AttendanceDaySyncsUpdateOne) Select(field string, fields ...string) *AttendanceDaySyncsUpdateOne {
	adsuo.fields = append([]string{field}, fields...)
	return adsuo
}

// Save executes the query and returns the updated AttendanceDaySyncs entity.
func (adsuo *AttendanceDaySyncsUpdateOne) Save(ctx context.Context) (*AttendanceDaySyncs, error) {
	var (
		err  error
		node *AttendanceDaySyncs
	)
	if len(adsuo.hooks) == 0 {
		node, err = adsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceDaySyncsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adsuo.mutation = mutation
			node, err = adsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(adsuo.hooks) - 1; i >= 0; i-- {
			if adsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = adsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, adsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AttendanceDaySyncs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttendanceDaySyncsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (adsuo *AttendanceDaySyncsUpdateOne) SaveX(ctx context.Context) *AttendanceDaySyncs {
	node, err := adsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (adsuo *AttendanceDaySyncsUpdateOne) Exec(ctx context.Context) error {
	_, err := adsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adsuo *AttendanceDaySyncsUpdateOne) ExecX(ctx context.Context) {
	if err := adsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (adsuo *AttendanceDaySyncsUpdateOne) sqlSave(ctx context.Context) (_node *AttendanceDaySyncs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendancedaysyncs.Table,
			Columns: attendancedaysyncs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: attendancedaysyncs.FieldID,
			},
		},
	}
	id, ok := adsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttendanceDaySyncs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := adsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendancedaysyncs.FieldID)
		for _, f := range fields {
			if !attendancedaysyncs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendancedaysyncs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := adsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adsuo.mutation.LastSyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendancedaysyncs.FieldLastSyncID,
		})
	}
	if adsuo.mutation.ClassPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancedaysyncs.ClassPeriodTable,
			Columns: []string{attendancedaysyncs.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adsuo.mutation.ClassPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendancedaysyncs.ClassPeriodTable,
			Columns: []string{attendancedaysyncs.ClassPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: classperiod.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttendanceDaySyncs{config: adsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, adsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendancedaysyncs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
