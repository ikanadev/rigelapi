// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vmkevv/rigelapi/ent/attendanceday"
	"github.com/vmkevv/rigelapi/ent/classperiod"
)

// AttendanceDay is the model entity for the AttendanceDay schema.
type AttendanceDay struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Day holds the value of the "day" field.
	Day time.Time `json:"day,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceDayQuery when eager-loading is set.
	Edges                        AttendanceDayEdges `json:"edges"`
	class_period_attendance_days *string
	selectValues                 sql.SelectValues
}

// AttendanceDayEdges holds the relations/edges for other nodes in the graph.
type AttendanceDayEdges struct {
	// Attendances holds the value of the attendances edge.
	Attendances []*Attendance `json:"attendances,omitempty"`
	// ClassPeriod holds the value of the classPeriod edge.
	ClassPeriod *ClassPeriod `json:"classPeriod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttendancesOrErr returns the Attendances value or an error if the edge
// was not loaded in eager-loading.
func (e AttendanceDayEdges) AttendancesOrErr() ([]*Attendance, error) {
	if e.loadedTypes[0] {
		return e.Attendances, nil
	}
	return nil, &NotLoadedError{edge: "attendances"}
}

// ClassPeriodOrErr returns the ClassPeriod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceDayEdges) ClassPeriodOrErr() (*ClassPeriod, error) {
	if e.loadedTypes[1] {
		if e.ClassPeriod == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: classperiod.Label}
		}
		return e.ClassPeriod, nil
	}
	return nil, &NotLoadedError{edge: "classPeriod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttendanceDay) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendanceday.FieldID:
			values[i] = new(sql.NullString)
		case attendanceday.FieldDay:
			values[i] = new(sql.NullTime)
		case attendanceday.ForeignKeys[0]: // class_period_attendance_days
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttendanceDay fields.
func (ad *AttendanceDay) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendanceday.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ad.ID = value.String
			}
		case attendanceday.FieldDay:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				ad.Day = value.Time
			}
		case attendanceday.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_period_attendance_days", values[i])
			} else if value.Valid {
				ad.class_period_attendance_days = new(string)
				*ad.class_period_attendance_days = value.String
			}
		default:
			ad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttendanceDay.
// This includes values selected through modifiers, order, etc.
func (ad *AttendanceDay) Value(name string) (ent.Value, error) {
	return ad.selectValues.Get(name)
}

// QueryAttendances queries the "attendances" edge of the AttendanceDay entity.
func (ad *AttendanceDay) QueryAttendances() *AttendanceQuery {
	return NewAttendanceDayClient(ad.config).QueryAttendances(ad)
}

// QueryClassPeriod queries the "classPeriod" edge of the AttendanceDay entity.
func (ad *AttendanceDay) QueryClassPeriod() *ClassPeriodQuery {
	return NewAttendanceDayClient(ad.config).QueryClassPeriod(ad)
}

// Update returns a builder for updating this AttendanceDay.
// Note that you need to call AttendanceDay.Unwrap() before calling this method if this AttendanceDay
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *AttendanceDay) Update() *AttendanceDayUpdateOne {
	return NewAttendanceDayClient(ad.config).UpdateOne(ad)
}

// Unwrap unwraps the AttendanceDay entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *AttendanceDay) Unwrap() *AttendanceDay {
	_tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttendanceDay is not a transactional entity")
	}
	ad.config.driver = _tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *AttendanceDay) String() string {
	var builder strings.Builder
	builder.WriteString("AttendanceDay(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ad.ID))
	builder.WriteString("day=")
	builder.WriteString(ad.Day.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AttendanceDays is a parsable slice of AttendanceDay.
type AttendanceDays []*AttendanceDay
