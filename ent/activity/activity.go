// Code generated by ent, DO NOT EDIT.

package activity

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the activity type in the database.
	Label = "activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeScores holds the string denoting the scores edge name in mutations.
	EdgeScores = "scores"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeClassPeriod holds the string denoting the classperiod edge name in mutations.
	EdgeClassPeriod = "classPeriod"
	// Table holds the table name of the activity in the database.
	Table = "activities"
	// ScoresTable is the table that holds the scores relation/edge.
	ScoresTable = "scores"
	// ScoresInverseTable is the table name for the Score entity.
	// It exists in this package in order to avoid circular dependency with the "score" package.
	ScoresInverseTable = "scores"
	// ScoresColumn is the table column denoting the scores relation/edge.
	ScoresColumn = "activity_scores"
	// AreaTable is the table that holds the area relation/edge.
	AreaTable = "activities"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "area_activities"
	// ClassPeriodTable is the table that holds the classPeriod relation/edge.
	ClassPeriodTable = "activities"
	// ClassPeriodInverseTable is the table name for the ClassPeriod entity.
	// It exists in this package in order to avoid circular dependency with the "classperiod" package.
	ClassPeriodInverseTable = "class_periods"
	// ClassPeriodColumn is the table column denoting the classPeriod relation/edge.
	ClassPeriodColumn = "class_period_activities"
)

// Columns holds all SQL columns for activity fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "activities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"area_activities",
	"class_period_activities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Activity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByScoresCount orders the results by scores count.
func ByScoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScoresStep(), opts...)
	}
}

// ByScores orders the results by scores terms.
func ByScores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAreaField orders the results by area field.
func ByAreaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAreaStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassPeriodField orders the results by classPeriod field.
func ByClassPeriodField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassPeriodStep(), sql.OrderByField(field, opts...))
	}
}
func newScoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScoresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
	)
}
func newAreaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AreaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AreaTable, AreaColumn),
	)
}
func newClassPeriodStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassPeriodInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassPeriodTable, ClassPeriodColumn),
	)
}
