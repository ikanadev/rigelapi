// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParallel holds the string denoting the parallel field in the database.
	FieldParallel = "parallel"
	// EdgeStudents holds the string denoting the students edge name in mutations.
	EdgeStudents = "students"
	// EdgeClassPeriods holds the string denoting the classperiods edge name in mutations.
	EdgeClassPeriods = "classPeriods"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeGrade holds the string denoting the grade edge name in mutations.
	EdgeGrade = "grade"
	// EdgeYear holds the string denoting the year edge name in mutations.
	EdgeYear = "year"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// StudentsTable is the table that holds the students relation/edge.
	StudentsTable = "students"
	// StudentsInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentsInverseTable = "students"
	// StudentsColumn is the table column denoting the students relation/edge.
	StudentsColumn = "class_students"
	// ClassPeriodsTable is the table that holds the classPeriods relation/edge.
	ClassPeriodsTable = "class_periods"
	// ClassPeriodsInverseTable is the table name for the ClassPeriod entity.
	// It exists in this package in order to avoid circular dependency with the "classperiod" package.
	ClassPeriodsInverseTable = "class_periods"
	// ClassPeriodsColumn is the table column denoting the classPeriods relation/edge.
	ClassPeriodsColumn = "class_class_periods"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "classes"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_classes"
	// TeacherTable is the table that holds the teacher relation/edge.
	TeacherTable = "classes"
	// TeacherInverseTable is the table name for the Teacher entity.
	// It exists in this package in order to avoid circular dependency with the "teacher" package.
	TeacherInverseTable = "teachers"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "teacher_classes"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "classes"
	// SubjectInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectInverseTable = "subjects"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "subject_classes"
	// GradeTable is the table that holds the grade relation/edge.
	GradeTable = "classes"
	// GradeInverseTable is the table name for the Grade entity.
	// It exists in this package in order to avoid circular dependency with the "grade" package.
	GradeInverseTable = "grades"
	// GradeColumn is the table column denoting the grade relation/edge.
	GradeColumn = "grade_classes"
	// YearTable is the table that holds the year relation/edge.
	YearTable = "classes"
	// YearInverseTable is the table name for the Year entity.
	// It exists in this package in order to avoid circular dependency with the "year" package.
	YearInverseTable = "years"
	// YearColumn is the table column denoting the year relation/edge.
	YearColumn = "year_classes"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldParallel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"grade_classes",
	"school_classes",
	"subject_classes",
	"teacher_classes",
	"year_classes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Class queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByParallel orders the results by the parallel field.
func ByParallel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParallel, opts...).ToFunc()
}

// ByStudentsCount orders the results by students count.
func ByStudentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStudentsStep(), opts...)
	}
}

// ByStudents orders the results by students terms.
func ByStudents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClassPeriodsCount orders the results by classPeriods count.
func ByClassPeriodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassPeriodsStep(), opts...)
	}
}

// ByClassPeriods orders the results by classPeriods terms.
func ByClassPeriods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassPeriodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySchoolField orders the results by school field.
func BySchoolField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchoolStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeacherField orders the results by teacher field.
func ByTeacherField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeacherStep(), sql.OrderByField(field, opts...))
	}
}

// BySubjectField orders the results by subject field.
func BySubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByGradeField orders the results by grade field.
func ByGradeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGradeStep(), sql.OrderByField(field, opts...))
	}
}

// ByYearField orders the results by year field.
func ByYearField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newYearStep(), sql.OrderByField(field, opts...))
	}
}
func newStudentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StudentsTable, StudentsColumn),
	)
}
func newClassPeriodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassPeriodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassPeriodsTable, ClassPeriodsColumn),
	)
}
func newSchoolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchoolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SchoolTable, SchoolColumn),
	)
}
func newTeacherStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeacherInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubjectTable, SubjectColumn),
	)
}
func newGradeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GradeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GradeTable, GradeColumn),
	)
}
func newYearStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(YearInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, YearTable, YearColumn),
	)
}
