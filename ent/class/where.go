// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vmkevv/rigelapi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Class {
	return predicate.Class(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Class {
	return predicate.Class(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Class {
	return predicate.Class(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Class {
	return predicate.Class(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Class {
	return predicate.Class(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Class {
	return predicate.Class(sql.FieldContainsFold(FieldID, id))
}

// Parallel applies equality check predicate on the "parallel" field. It's identical to ParallelEQ.
func Parallel(v string) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldParallel, v))
}

// ParallelEQ applies the EQ predicate on the "parallel" field.
func ParallelEQ(v string) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldParallel, v))
}

// ParallelNEQ applies the NEQ predicate on the "parallel" field.
func ParallelNEQ(v string) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldParallel, v))
}

// ParallelIn applies the In predicate on the "parallel" field.
func ParallelIn(vs ...string) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldParallel, vs...))
}

// ParallelNotIn applies the NotIn predicate on the "parallel" field.
func ParallelNotIn(vs ...string) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldParallel, vs...))
}

// ParallelGT applies the GT predicate on the "parallel" field.
func ParallelGT(v string) predicate.Class {
	return predicate.Class(sql.FieldGT(FieldParallel, v))
}

// ParallelGTE applies the GTE predicate on the "parallel" field.
func ParallelGTE(v string) predicate.Class {
	return predicate.Class(sql.FieldGTE(FieldParallel, v))
}

// ParallelLT applies the LT predicate on the "parallel" field.
func ParallelLT(v string) predicate.Class {
	return predicate.Class(sql.FieldLT(FieldParallel, v))
}

// ParallelLTE applies the LTE predicate on the "parallel" field.
func ParallelLTE(v string) predicate.Class {
	return predicate.Class(sql.FieldLTE(FieldParallel, v))
}

// ParallelContains applies the Contains predicate on the "parallel" field.
func ParallelContains(v string) predicate.Class {
	return predicate.Class(sql.FieldContains(FieldParallel, v))
}

// ParallelHasPrefix applies the HasPrefix predicate on the "parallel" field.
func ParallelHasPrefix(v string) predicate.Class {
	return predicate.Class(sql.FieldHasPrefix(FieldParallel, v))
}

// ParallelHasSuffix applies the HasSuffix predicate on the "parallel" field.
func ParallelHasSuffix(v string) predicate.Class {
	return predicate.Class(sql.FieldHasSuffix(FieldParallel, v))
}

// ParallelEqualFold applies the EqualFold predicate on the "parallel" field.
func ParallelEqualFold(v string) predicate.Class {
	return predicate.Class(sql.FieldEqualFold(FieldParallel, v))
}

// ParallelContainsFold applies the ContainsFold predicate on the "parallel" field.
func ParallelContainsFold(v string) predicate.Class {
	return predicate.Class(sql.FieldContainsFold(FieldParallel, v))
}

// HasStudents applies the HasEdge predicate on the "students" edge.
func HasStudents() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StudentsTable, StudentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentsWith applies the HasEdge predicate on the "students" edge with a given conditions (other predicates).
func HasStudentsWith(preds ...predicate.Student) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newStudentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassPeriods applies the HasEdge predicate on the "classPeriods" edge.
func HasClassPeriods() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClassPeriodsTable, ClassPeriodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassPeriodsWith applies the HasEdge predicate on the "classPeriods" edge with a given conditions (other predicates).
func HasClassPeriodsWith(preds ...predicate.ClassPeriod) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newClassPeriodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchool applies the HasEdge predicate on the "school" edge.
func HasSchool() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SchoolTable, SchoolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchoolWith applies the HasEdge predicate on the "school" edge with a given conditions (other predicates).
func HasSchoolWith(preds ...predicate.School) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newSchoolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.Teacher) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newTeacherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGrade applies the HasEdge predicate on the "grade" edge.
func HasGrade() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GradeTable, GradeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGradeWith applies the HasEdge predicate on the "grade" edge with a given conditions (other predicates).
func HasGradeWith(preds ...predicate.Grade) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newGradeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasYear applies the HasEdge predicate on the "year" edge.
func HasYear() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, YearTable, YearColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasYearWith applies the HasEdge predicate on the "year" edge with a given conditions (other predicates).
func HasYearWith(preds ...predicate.Year) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := newYearStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		p(s.Not())
	})
}
