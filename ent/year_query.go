// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/area"
	"github.com/vmkevv/rigelapi/ent/class"
	"github.com/vmkevv/rigelapi/ent/period"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/subscription"
	"github.com/vmkevv/rigelapi/ent/year"
)

// YearQuery is the builder for querying Year entities.
type YearQuery struct {
	config
	ctx               *QueryContext
	order             []year.OrderOption
	inters            []Interceptor
	predicates        []predicate.Year
	withClasses       *ClassQuery
	withPeriods       *PeriodQuery
	withAreas         *AreaQuery
	withSubscriptions *SubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the YearQuery builder.
func (yq *YearQuery) Where(ps ...predicate.Year) *YearQuery {
	yq.predicates = append(yq.predicates, ps...)
	return yq
}

// Limit the number of records to be returned by this query.
func (yq *YearQuery) Limit(limit int) *YearQuery {
	yq.ctx.Limit = &limit
	return yq
}

// Offset to start from.
func (yq *YearQuery) Offset(offset int) *YearQuery {
	yq.ctx.Offset = &offset
	return yq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (yq *YearQuery) Unique(unique bool) *YearQuery {
	yq.ctx.Unique = &unique
	return yq
}

// Order specifies how the records should be ordered.
func (yq *YearQuery) Order(o ...year.OrderOption) *YearQuery {
	yq.order = append(yq.order, o...)
	return yq
}

// QueryClasses chains the current query on the "classes" edge.
func (yq *YearQuery) QueryClasses() *ClassQuery {
	query := (&ClassClient{config: yq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.ClassesTable, year.ClassesColumn),
		)
		fromU = sqlgraph.SetNeighbors(yq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPeriods chains the current query on the "periods" edge.
func (yq *YearQuery) QueryPeriods() *PeriodQuery {
	query := (&PeriodClient{config: yq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, selector),
			sqlgraph.To(period.Table, period.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.PeriodsTable, year.PeriodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(yq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAreas chains the current query on the "areas" edge.
func (yq *YearQuery) QueryAreas() *AreaQuery {
	query := (&AreaClient{config: yq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, selector),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.AreasTable, year.AreasColumn),
		)
		fromU = sqlgraph.SetNeighbors(yq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptions chains the current query on the "subscriptions" edge.
func (yq *YearQuery) QuerySubscriptions() *SubscriptionQuery {
	query := (&SubscriptionClient{config: yq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := yq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := yq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(year.Table, year.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, year.SubscriptionsTable, year.SubscriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(yq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Year entity from the query.
// Returns a *NotFoundError when no Year was found.
func (yq *YearQuery) First(ctx context.Context) (*Year, error) {
	nodes, err := yq.Limit(1).All(setContextOp(ctx, yq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{year.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (yq *YearQuery) FirstX(ctx context.Context) *Year {
	node, err := yq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Year ID from the query.
// Returns a *NotFoundError when no Year ID was found.
func (yq *YearQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = yq.Limit(1).IDs(setContextOp(ctx, yq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{year.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (yq *YearQuery) FirstIDX(ctx context.Context) string {
	id, err := yq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Year entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Year entity is found.
// Returns a *NotFoundError when no Year entities are found.
func (yq *YearQuery) Only(ctx context.Context) (*Year, error) {
	nodes, err := yq.Limit(2).All(setContextOp(ctx, yq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{year.Label}
	default:
		return nil, &NotSingularError{year.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (yq *YearQuery) OnlyX(ctx context.Context) *Year {
	node, err := yq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Year ID in the query.
// Returns a *NotSingularError when more than one Year ID is found.
// Returns a *NotFoundError when no entities are found.
func (yq *YearQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = yq.Limit(2).IDs(setContextOp(ctx, yq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{year.Label}
	default:
		err = &NotSingularError{year.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (yq *YearQuery) OnlyIDX(ctx context.Context) string {
	id, err := yq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Years.
func (yq *YearQuery) All(ctx context.Context) ([]*Year, error) {
	ctx = setContextOp(ctx, yq.ctx, "All")
	if err := yq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Year, *YearQuery]()
	return withInterceptors[[]*Year](ctx, yq, qr, yq.inters)
}

// AllX is like All, but panics if an error occurs.
func (yq *YearQuery) AllX(ctx context.Context) []*Year {
	nodes, err := yq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Year IDs.
func (yq *YearQuery) IDs(ctx context.Context) (ids []string, err error) {
	if yq.ctx.Unique == nil && yq.path != nil {
		yq.Unique(true)
	}
	ctx = setContextOp(ctx, yq.ctx, "IDs")
	if err = yq.Select(year.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (yq *YearQuery) IDsX(ctx context.Context) []string {
	ids, err := yq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (yq *YearQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, yq.ctx, "Count")
	if err := yq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, yq, querierCount[*YearQuery](), yq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (yq *YearQuery) CountX(ctx context.Context) int {
	count, err := yq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (yq *YearQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, yq.ctx, "Exist")
	switch _, err := yq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (yq *YearQuery) ExistX(ctx context.Context) bool {
	exist, err := yq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the YearQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (yq *YearQuery) Clone() *YearQuery {
	if yq == nil {
		return nil
	}
	return &YearQuery{
		config:            yq.config,
		ctx:               yq.ctx.Clone(),
		order:             append([]year.OrderOption{}, yq.order...),
		inters:            append([]Interceptor{}, yq.inters...),
		predicates:        append([]predicate.Year{}, yq.predicates...),
		withClasses:       yq.withClasses.Clone(),
		withPeriods:       yq.withPeriods.Clone(),
		withAreas:         yq.withAreas.Clone(),
		withSubscriptions: yq.withSubscriptions.Clone(),
		// clone intermediate query.
		sql:  yq.sql.Clone(),
		path: yq.path,
	}
}

// WithClasses tells the query-builder to eager-load the nodes that are connected to
// the "classes" edge. The optional arguments are used to configure the query builder of the edge.
func (yq *YearQuery) WithClasses(opts ...func(*ClassQuery)) *YearQuery {
	query := (&ClassClient{config: yq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	yq.withClasses = query
	return yq
}

// WithPeriods tells the query-builder to eager-load the nodes that are connected to
// the "periods" edge. The optional arguments are used to configure the query builder of the edge.
func (yq *YearQuery) WithPeriods(opts ...func(*PeriodQuery)) *YearQuery {
	query := (&PeriodClient{config: yq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	yq.withPeriods = query
	return yq
}

// WithAreas tells the query-builder to eager-load the nodes that are connected to
// the "areas" edge. The optional arguments are used to configure the query builder of the edge.
func (yq *YearQuery) WithAreas(opts ...func(*AreaQuery)) *YearQuery {
	query := (&AreaClient{config: yq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	yq.withAreas = query
	return yq
}

// WithSubscriptions tells the query-builder to eager-load the nodes that are connected to
// the "subscriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (yq *YearQuery) WithSubscriptions(opts ...func(*SubscriptionQuery)) *YearQuery {
	query := (&SubscriptionClient{config: yq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	yq.withSubscriptions = query
	return yq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value int `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Year.Query().
//		GroupBy(year.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (yq *YearQuery) GroupBy(field string, fields ...string) *YearGroupBy {
	yq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &YearGroupBy{build: yq}
	grbuild.flds = &yq.ctx.Fields
	grbuild.label = year.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value int `json:"value,omitempty"`
//	}
//
//	client.Year.Query().
//		Select(year.FieldValue).
//		Scan(ctx, &v)
func (yq *YearQuery) Select(fields ...string) *YearSelect {
	yq.ctx.Fields = append(yq.ctx.Fields, fields...)
	sbuild := &YearSelect{YearQuery: yq}
	sbuild.label = year.Label
	sbuild.flds, sbuild.scan = &yq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a YearSelect configured with the given aggregations.
func (yq *YearQuery) Aggregate(fns ...AggregateFunc) *YearSelect {
	return yq.Select().Aggregate(fns...)
}

func (yq *YearQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range yq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, yq); err != nil {
				return err
			}
		}
	}
	for _, f := range yq.ctx.Fields {
		if !year.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if yq.path != nil {
		prev, err := yq.path(ctx)
		if err != nil {
			return err
		}
		yq.sql = prev
	}
	return nil
}

func (yq *YearQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Year, error) {
	var (
		nodes       = []*Year{}
		_spec       = yq.querySpec()
		loadedTypes = [4]bool{
			yq.withClasses != nil,
			yq.withPeriods != nil,
			yq.withAreas != nil,
			yq.withSubscriptions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Year).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Year{config: yq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, yq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := yq.withClasses; query != nil {
		if err := yq.loadClasses(ctx, query, nodes,
			func(n *Year) { n.Edges.Classes = []*Class{} },
			func(n *Year, e *Class) { n.Edges.Classes = append(n.Edges.Classes, e) }); err != nil {
			return nil, err
		}
	}
	if query := yq.withPeriods; query != nil {
		if err := yq.loadPeriods(ctx, query, nodes,
			func(n *Year) { n.Edges.Periods = []*Period{} },
			func(n *Year, e *Period) { n.Edges.Periods = append(n.Edges.Periods, e) }); err != nil {
			return nil, err
		}
	}
	if query := yq.withAreas; query != nil {
		if err := yq.loadAreas(ctx, query, nodes,
			func(n *Year) { n.Edges.Areas = []*Area{} },
			func(n *Year, e *Area) { n.Edges.Areas = append(n.Edges.Areas, e) }); err != nil {
			return nil, err
		}
	}
	if query := yq.withSubscriptions; query != nil {
		if err := yq.loadSubscriptions(ctx, query, nodes,
			func(n *Year) { n.Edges.Subscriptions = []*Subscription{} },
			func(n *Year, e *Subscription) { n.Edges.Subscriptions = append(n.Edges.Subscriptions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (yq *YearQuery) loadClasses(ctx context.Context, query *ClassQuery, nodes []*Year, init func(*Year), assign func(*Year, *Class)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Year)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Class(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(year.ClassesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.year_classes
		if fk == nil {
			return fmt.Errorf(`foreign-key "year_classes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "year_classes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (yq *YearQuery) loadPeriods(ctx context.Context, query *PeriodQuery, nodes []*Year, init func(*Year), assign func(*Year, *Period)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Year)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Period(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(year.PeriodsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.year_periods
		if fk == nil {
			return fmt.Errorf(`foreign-key "year_periods" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "year_periods" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (yq *YearQuery) loadAreas(ctx context.Context, query *AreaQuery, nodes []*Year, init func(*Year), assign func(*Year, *Area)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Year)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Area(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(year.AreasColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.year_areas
		if fk == nil {
			return fmt.Errorf(`foreign-key "year_areas" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "year_areas" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (yq *YearQuery) loadSubscriptions(ctx context.Context, query *SubscriptionQuery, nodes []*Year, init func(*Year), assign func(*Year, *Subscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Year)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(year.SubscriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.year_subscriptions
		if fk == nil {
			return fmt.Errorf(`foreign-key "year_subscriptions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "year_subscriptions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (yq *YearQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := yq.querySpec()
	_spec.Node.Columns = yq.ctx.Fields
	if len(yq.ctx.Fields) > 0 {
		_spec.Unique = yq.ctx.Unique != nil && *yq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, yq.driver, _spec)
}

func (yq *YearQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(year.Table, year.Columns, sqlgraph.NewFieldSpec(year.FieldID, field.TypeString))
	_spec.From = yq.sql
	if unique := yq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if yq.path != nil {
		_spec.Unique = true
	}
	if fields := yq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, year.FieldID)
		for i := range fields {
			if fields[i] != year.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := yq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := yq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := yq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := yq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (yq *YearQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(yq.driver.Dialect())
	t1 := builder.Table(year.Table)
	columns := yq.ctx.Fields
	if len(columns) == 0 {
		columns = year.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if yq.sql != nil {
		selector = yq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if yq.ctx.Unique != nil && *yq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range yq.predicates {
		p(selector)
	}
	for _, p := range yq.order {
		p(selector)
	}
	if offset := yq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := yq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// YearGroupBy is the group-by builder for Year entities.
type YearGroupBy struct {
	selector
	build *YearQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ygb *YearGroupBy) Aggregate(fns ...AggregateFunc) *YearGroupBy {
	ygb.fns = append(ygb.fns, fns...)
	return ygb
}

// Scan applies the selector query and scans the result into the given value.
func (ygb *YearGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ygb.build.ctx, "GroupBy")
	if err := ygb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*YearQuery, *YearGroupBy](ctx, ygb.build, ygb, ygb.build.inters, v)
}

func (ygb *YearGroupBy) sqlScan(ctx context.Context, root *YearQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ygb.fns))
	for _, fn := range ygb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ygb.flds)+len(ygb.fns))
		for _, f := range *ygb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ygb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ygb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// YearSelect is the builder for selecting fields of Year entities.
type YearSelect struct {
	*YearQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ys *YearSelect) Aggregate(fns ...AggregateFunc) *YearSelect {
	ys.fns = append(ys.fns, fns...)
	return ys
}

// Scan applies the selector query and scans the result into the given value.
func (ys *YearSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ys.ctx, "Select")
	if err := ys.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*YearQuery, *YearSelect](ctx, ys.YearQuery, ys, ys.inters, v)
}

func (ys *YearSelect) sqlScan(ctx context.Context, root *YearQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ys.fns))
	for _, fn := range ys.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ys.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ys.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
