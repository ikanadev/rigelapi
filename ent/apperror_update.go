// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/apperror"
	"github.com/vmkevv/rigelapi/ent/predicate"
)

// AppErrorUpdate is the builder for updating AppError entities.
type AppErrorUpdate struct {
	config
	hooks    []Hook
	mutation *AppErrorMutation
}

// Where appends a list predicates to the AppErrorUpdate builder.
func (aeu *AppErrorUpdate) Where(ps ...predicate.AppError) *AppErrorUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetUserID sets the "user_id" field.
func (aeu *AppErrorUpdate) SetUserID(s string) *AppErrorUpdate {
	aeu.mutation.SetUserID(s)
	return aeu
}

// SetCause sets the "cause" field.
func (aeu *AppErrorUpdate) SetCause(s string) *AppErrorUpdate {
	aeu.mutation.SetCause(s)
	return aeu
}

// SetErrorMsg sets the "error_msg" field.
func (aeu *AppErrorUpdate) SetErrorMsg(s string) *AppErrorUpdate {
	aeu.mutation.SetErrorMsg(s)
	return aeu
}

// SetErrorStack sets the "error_stack" field.
func (aeu *AppErrorUpdate) SetErrorStack(s string) *AppErrorUpdate {
	aeu.mutation.SetErrorStack(s)
	return aeu
}

// Mutation returns the AppErrorMutation object of the builder.
func (aeu *AppErrorUpdate) Mutation() *AppErrorMutation {
	return aeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AppErrorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aeu.hooks) == 0 {
		affected, err = aeu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppErrorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aeu.mutation = mutation
			affected, err = aeu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aeu.hooks) - 1; i >= 0; i-- {
			if aeu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aeu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aeu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AppErrorUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AppErrorUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AppErrorUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aeu *AppErrorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apperror.Table,
			Columns: apperror.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apperror.FieldID,
			},
		},
	}
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldUserID,
		})
	}
	if value, ok := aeu.mutation.Cause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldCause,
		})
	}
	if value, ok := aeu.mutation.ErrorMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldErrorMsg,
		})
	}
	if value, ok := aeu.mutation.ErrorStack(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldErrorStack,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apperror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppErrorUpdateOne is the builder for updating a single AppError entity.
type AppErrorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppErrorMutation
}

// SetUserID sets the "user_id" field.
func (aeuo *AppErrorUpdateOne) SetUserID(s string) *AppErrorUpdateOne {
	aeuo.mutation.SetUserID(s)
	return aeuo
}

// SetCause sets the "cause" field.
func (aeuo *AppErrorUpdateOne) SetCause(s string) *AppErrorUpdateOne {
	aeuo.mutation.SetCause(s)
	return aeuo
}

// SetErrorMsg sets the "error_msg" field.
func (aeuo *AppErrorUpdateOne) SetErrorMsg(s string) *AppErrorUpdateOne {
	aeuo.mutation.SetErrorMsg(s)
	return aeuo
}

// SetErrorStack sets the "error_stack" field.
func (aeuo *AppErrorUpdateOne) SetErrorStack(s string) *AppErrorUpdateOne {
	aeuo.mutation.SetErrorStack(s)
	return aeuo
}

// Mutation returns the AppErrorMutation object of the builder.
func (aeuo *AppErrorUpdateOne) Mutation() *AppErrorMutation {
	return aeuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AppErrorUpdateOne) Select(field string, fields ...string) *AppErrorUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AppError entity.
func (aeuo *AppErrorUpdateOne) Save(ctx context.Context) (*AppError, error) {
	var (
		err  error
		node *AppError
	)
	if len(aeuo.hooks) == 0 {
		node, err = aeuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppErrorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aeuo.mutation = mutation
			node, err = aeuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aeuo.hooks) - 1; i >= 0; i-- {
			if aeuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aeuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aeuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppError)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppErrorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AppErrorUpdateOne) SaveX(ctx context.Context) *AppError {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AppErrorUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AppErrorUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aeuo *AppErrorUpdateOne) sqlSave(ctx context.Context) (_node *AppError, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apperror.Table,
			Columns: apperror.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apperror.FieldID,
			},
		},
	}
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppError.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apperror.FieldID)
		for _, f := range fields {
			if !apperror.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apperror.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldUserID,
		})
	}
	if value, ok := aeuo.mutation.Cause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldCause,
		})
	}
	if value, ok := aeuo.mutation.ErrorMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldErrorMsg,
		})
	}
	if value, ok := aeuo.mutation.ErrorStack(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apperror.FieldErrorStack,
		})
	}
	_node = &AppError{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apperror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
