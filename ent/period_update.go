// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/classperiod"
	"github.com/vmkevv/rigelapi/ent/period"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/year"
)

// PeriodUpdate is the builder for updating Period entities.
type PeriodUpdate struct {
	config
	hooks    []Hook
	mutation *PeriodMutation
}

// Where appends a list predicates to the PeriodUpdate builder.
func (pu *PeriodUpdate) Where(ps ...predicate.Period) *PeriodUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PeriodUpdate) SetName(s string) *PeriodUpdate {
	pu.mutation.SetName(s)
	return pu
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (pu *PeriodUpdate) AddClassPeriodIDs(ids ...string) *PeriodUpdate {
	pu.mutation.AddClassPeriodIDs(ids...)
	return pu
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (pu *PeriodUpdate) AddClassPeriods(c ...*ClassPeriod) *PeriodUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddClassPeriodIDs(ids...)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (pu *PeriodUpdate) SetYearID(id string) *PeriodUpdate {
	pu.mutation.SetYearID(id)
	return pu
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (pu *PeriodUpdate) SetNillableYearID(id *string) *PeriodUpdate {
	if id != nil {
		pu = pu.SetYearID(*id)
	}
	return pu
}

// SetYear sets the "year" edge to the Year entity.
func (pu *PeriodUpdate) SetYear(y *Year) *PeriodUpdate {
	return pu.SetYearID(y.ID)
}

// Mutation returns the PeriodMutation object of the builder.
func (pu *PeriodUpdate) Mutation() *PeriodMutation {
	return pu.mutation
}

// ClearClassPeriods clears all "classPeriods" edges to the ClassPeriod entity.
func (pu *PeriodUpdate) ClearClassPeriods() *PeriodUpdate {
	pu.mutation.ClearClassPeriods()
	return pu
}

// RemoveClassPeriodIDs removes the "classPeriods" edge to ClassPeriod entities by IDs.
func (pu *PeriodUpdate) RemoveClassPeriodIDs(ids ...string) *PeriodUpdate {
	pu.mutation.RemoveClassPeriodIDs(ids...)
	return pu
}

// RemoveClassPeriods removes "classPeriods" edges to ClassPeriod entities.
func (pu *PeriodUpdate) RemoveClassPeriods(c ...*ClassPeriod) *PeriodUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveClassPeriodIDs(ids...)
}

// ClearYear clears the "year" edge to the Year entity.
func (pu *PeriodUpdate) ClearYear() *PeriodUpdate {
	pu.mutation.ClearYear()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PeriodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PeriodUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PeriodUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PeriodUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PeriodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(period.Table, period.Columns, sqlgraph.NewFieldSpec(period.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(period.FieldName, field.TypeString, value)
	}
	if pu.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedClassPeriodsIDs(); len(nodes) > 0 && !pu.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   period.YearTable,
			Columns: []string{period.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   period.YearTable,
			Columns: []string{period.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{period.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PeriodUpdateOne is the builder for updating a single Period entity.
type PeriodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PeriodMutation
}

// SetName sets the "name" field.
func (puo *PeriodUpdateOne) SetName(s string) *PeriodUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// AddClassPeriodIDs adds the "classPeriods" edge to the ClassPeriod entity by IDs.
func (puo *PeriodUpdateOne) AddClassPeriodIDs(ids ...string) *PeriodUpdateOne {
	puo.mutation.AddClassPeriodIDs(ids...)
	return puo
}

// AddClassPeriods adds the "classPeriods" edges to the ClassPeriod entity.
func (puo *PeriodUpdateOne) AddClassPeriods(c ...*ClassPeriod) *PeriodUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddClassPeriodIDs(ids...)
}

// SetYearID sets the "year" edge to the Year entity by ID.
func (puo *PeriodUpdateOne) SetYearID(id string) *PeriodUpdateOne {
	puo.mutation.SetYearID(id)
	return puo
}

// SetNillableYearID sets the "year" edge to the Year entity by ID if the given value is not nil.
func (puo *PeriodUpdateOne) SetNillableYearID(id *string) *PeriodUpdateOne {
	if id != nil {
		puo = puo.SetYearID(*id)
	}
	return puo
}

// SetYear sets the "year" edge to the Year entity.
func (puo *PeriodUpdateOne) SetYear(y *Year) *PeriodUpdateOne {
	return puo.SetYearID(y.ID)
}

// Mutation returns the PeriodMutation object of the builder.
func (puo *PeriodUpdateOne) Mutation() *PeriodMutation {
	return puo.mutation
}

// ClearClassPeriods clears all "classPeriods" edges to the ClassPeriod entity.
func (puo *PeriodUpdateOne) ClearClassPeriods() *PeriodUpdateOne {
	puo.mutation.ClearClassPeriods()
	return puo
}

// RemoveClassPeriodIDs removes the "classPeriods" edge to ClassPeriod entities by IDs.
func (puo *PeriodUpdateOne) RemoveClassPeriodIDs(ids ...string) *PeriodUpdateOne {
	puo.mutation.RemoveClassPeriodIDs(ids...)
	return puo
}

// RemoveClassPeriods removes "classPeriods" edges to ClassPeriod entities.
func (puo *PeriodUpdateOne) RemoveClassPeriods(c ...*ClassPeriod) *PeriodUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveClassPeriodIDs(ids...)
}

// ClearYear clears the "year" edge to the Year entity.
func (puo *PeriodUpdateOne) ClearYear() *PeriodUpdateOne {
	puo.mutation.ClearYear()
	return puo
}

// Where appends a list predicates to the PeriodUpdate builder.
func (puo *PeriodUpdateOne) Where(ps ...predicate.Period) *PeriodUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PeriodUpdateOne) Select(field string, fields ...string) *PeriodUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Period entity.
func (puo *PeriodUpdateOne) Save(ctx context.Context) (*Period, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PeriodUpdateOne) SaveX(ctx context.Context) *Period {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PeriodUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PeriodUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PeriodUpdateOne) sqlSave(ctx context.Context) (_node *Period, err error) {
	_spec := sqlgraph.NewUpdateSpec(period.Table, period.Columns, sqlgraph.NewFieldSpec(period.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Period.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, period.FieldID)
		for _, f := range fields {
			if !period.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != period.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(period.FieldName, field.TypeString, value)
	}
	if puo.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedClassPeriodsIDs(); len(nodes) > 0 && !puo.mutation.ClassPeriodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClassPeriodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   period.ClassPeriodsTable,
			Columns: []string{period.ClassPeriodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(classperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   period.YearTable,
			Columns: []string{period.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   period.YearTable,
			Columns: []string{period.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(year.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Period{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{period.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
