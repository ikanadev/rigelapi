// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vmkevv/rigelapi/ent/activitysync"
	"github.com/vmkevv/rigelapi/ent/predicate"
	"github.com/vmkevv/rigelapi/ent/teacher"
)

// ActivitySyncUpdate is the builder for updating ActivitySync entities.
type ActivitySyncUpdate struct {
	config
	hooks    []Hook
	mutation *ActivitySyncMutation
}

// Where appends a list predicates to the ActivitySyncUpdate builder.
func (asu *ActivitySyncUpdate) Where(ps ...predicate.ActivitySync) *ActivitySyncUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetLastSyncID sets the "last_sync_id" field.
func (asu *ActivitySyncUpdate) SetLastSyncID(s string) *ActivitySyncUpdate {
	asu.mutation.SetLastSyncID(s)
	return asu
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (asu *ActivitySyncUpdate) SetTeacherID(id string) *ActivitySyncUpdate {
	asu.mutation.SetTeacherID(id)
	return asu
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (asu *ActivitySyncUpdate) SetNillableTeacherID(id *string) *ActivitySyncUpdate {
	if id != nil {
		asu = asu.SetTeacherID(*id)
	}
	return asu
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (asu *ActivitySyncUpdate) SetTeacher(t *Teacher) *ActivitySyncUpdate {
	return asu.SetTeacherID(t.ID)
}

// Mutation returns the ActivitySyncMutation object of the builder.
func (asu *ActivitySyncUpdate) Mutation() *ActivitySyncMutation {
	return asu.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (asu *ActivitySyncUpdate) ClearTeacher() *ActivitySyncUpdate {
	asu.mutation.ClearTeacher()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *ActivitySyncUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivitySyncMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *ActivitySyncUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *ActivitySyncUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *ActivitySyncUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *ActivitySyncUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitysync.Table,
			Columns: activitysync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: activitysync.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.LastSyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitysync.FieldLastSyncID,
		})
	}
	if asu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitysync.TeacherTable,
			Columns: []string{activitysync.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitysync.TeacherTable,
			Columns: []string{activitysync.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitysync.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ActivitySyncUpdateOne is the builder for updating a single ActivitySync entity.
type ActivitySyncUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivitySyncMutation
}

// SetLastSyncID sets the "last_sync_id" field.
func (asuo *ActivitySyncUpdateOne) SetLastSyncID(s string) *ActivitySyncUpdateOne {
	asuo.mutation.SetLastSyncID(s)
	return asuo
}

// SetTeacherID sets the "teacher" edge to the Teacher entity by ID.
func (asuo *ActivitySyncUpdateOne) SetTeacherID(id string) *ActivitySyncUpdateOne {
	asuo.mutation.SetTeacherID(id)
	return asuo
}

// SetNillableTeacherID sets the "teacher" edge to the Teacher entity by ID if the given value is not nil.
func (asuo *ActivitySyncUpdateOne) SetNillableTeacherID(id *string) *ActivitySyncUpdateOne {
	if id != nil {
		asuo = asuo.SetTeacherID(*id)
	}
	return asuo
}

// SetTeacher sets the "teacher" edge to the Teacher entity.
func (asuo *ActivitySyncUpdateOne) SetTeacher(t *Teacher) *ActivitySyncUpdateOne {
	return asuo.SetTeacherID(t.ID)
}

// Mutation returns the ActivitySyncMutation object of the builder.
func (asuo *ActivitySyncUpdateOne) Mutation() *ActivitySyncMutation {
	return asuo.mutation
}

// ClearTeacher clears the "teacher" edge to the Teacher entity.
func (asuo *ActivitySyncUpdateOne) ClearTeacher() *ActivitySyncUpdateOne {
	asuo.mutation.ClearTeacher()
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *ActivitySyncUpdateOne) Select(field string, fields ...string) *ActivitySyncUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated ActivitySync entity.
func (asuo *ActivitySyncUpdateOne) Save(ctx context.Context) (*ActivitySync, error) {
	var (
		err  error
		node *ActivitySync
	)
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivitySyncMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ActivitySync)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ActivitySyncMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *ActivitySyncUpdateOne) SaveX(ctx context.Context) *ActivitySync {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *ActivitySyncUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *ActivitySyncUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *ActivitySyncUpdateOne) sqlSave(ctx context.Context) (_node *ActivitySync, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitysync.Table,
			Columns: activitysync.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: activitysync.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActivitySync.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitysync.FieldID)
		for _, f := range fields {
			if !activitysync.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitysync.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.LastSyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitysync.FieldLastSyncID,
		})
	}
	if asuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitysync.TeacherTable,
			Columns: []string{activitysync.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activitysync.TeacherTable,
			Columns: []string{activitysync.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActivitySync{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitysync.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
